<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Implementation of the field storage API for Edoweb Storage.
 */

/**
* Implement hook_menu().
* Settings for edoweb_storage are configured here.
*/
function edoweb_storage_menu() {
  $items = array();
  $items['edoweb/config/storage'] = array(
    'title' => 'Storage',
    'description' => 'Configuration for the Edoweb Storage module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_storage_configuration_form'),
    'access arguments' => array('administer edoweb configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

 return $items;
}

/**
* Create and display the configuration settings form.
*/
function edoweb_storage_configuration_form($form, &$form_state) {

  // Text field for api host.
  $form['edoweb_api_host'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_api_host',
      'api.localhost'
    ),
    '#title' => t('API host'),
    '#description' => t('The hostname or IP address of the API, without leading http://'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Text field for api user.
  $form['edoweb_api_user'] = array(
    '#type' => 'textfield',
    '#default_value' => variable_get(
      'edoweb_api_user',
      'admin'
    ),
    '#title' => t('API user'),
    '#description' => t('The username to authorize with.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Password field for api user.
  $form['edoweb_api_password'] = array(
    '#type' => 'password',
    '#default_value' => variable_get(
      'edoweb_api_password',
      'admin'
    ),
    '#title' => t('API password'),
    '#description' => t('The password to authorize with.'),
    '#size' => 40,
    '#maxlength' => 120,
    '#required' => TRUE,
  );

  // Checkbox for debugging mode
  $form['edoweb_api_debug'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('edoweb_api_debug'),
    '#title' => t('Show debugging output'),
  );

  // Checkbox to disable caching
  $form['edoweb_api_nocache'] = array(
    '#type' => 'checkbox',
    '#default_value' => variable_get('edoweb_api_nocache'),
    '#title' => t('Disable caching'),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_field_storage_info().
 */
function edoweb_storage_field_storage_info() {
  return array(
    'edoweb_storage' => array(
      'label' => t('Edoweb Storage field storage'),
      'description' => t('Stores nodes and fields in a Edoweb Storage database.'),
    ),
  );
}

/**
 * Implements hook_field_storage_details().
 */
function edoweb_storage_field_storage_details($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_create_field().
 */
function edoweb_storage_field_storage_create_field($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_update_field().
 */
function edoweb_storage_field_storage_update_field($field, $prior_field, $has_data) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_delete_field().
 */
function edoweb_storage_field_storage_delete_field($field) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_load().
 */
function edoweb_storage_field_storage_load($entity_type, $entities, $age, $fields, $options) {
  $api = new EdowebAPIClient();
  foreach ($entities as $entity) {
    $api->load($entity);
  }
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_storage_write().
 */
function edoweb_storage_field_storage_write($entity_type, $entity, $op, $fields, $entity_write = FALSE) {
  $api = new EdowebAPIClient();
  $api->save($entity);
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}


/**
 * Implement hook_field_storage_delete().
 *
 */
function edoweb_storage_field_storage_delete($entity_type, $entity, $fields) {
  $api = new EdowebAPIClient();
  $api->delete($entity);
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implement hook_field_storage_delete_revision().
 *
 */
function edoweb_storage_field_storage_delete_revision($entity_type, $entity, $fields) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implement hook_field_storage_delete_instance().
 *
 */
function edoweb_storage_field_storage_delete_instance($instance) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

class EdowebStorageException extends Exception {}

/**
 * Implements hook_entity_query_alter().
 *
 * Alter the entity info.
 */
function edoweb_storage_entity_query_alter($query) {
  if (isset($query->tags['elasticsearch'])) {
    $query->executeCallback = '_edoweb_storage_query';
  }
}

function _edoweb_storage_query($query) {
  $api = new EdowebAPIClient();
  return $api->query($query);
}

/**
 * Implements hook_field_storage_query().
 *
 */
function edoweb_storage_field_storage_query($query) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_attach_rename_bundle().
 */
function edoweb_storage_field_attach_rename_bundle($entity_type, $bundle_old, $bundle_new) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_insert().
 */
function edoweb_storage_entity_insert($entity, $entity_type) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_update().
 */
function edoweb_storage_entity_update($entity, $entity_type) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_field_attach_delete.
 */
function edoweb_storage_field_attach_delete($entity_type, $entity) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

/**
 * Implements hook_entity_info_alter().
 */
function edoweb_storage_entity_info_alter(&$entity_info) {
  __devnulldb_log(__FUNCTION__ . " called\n");
  __devnulldb_log("arguments: " . print_r(func_get_args(), TRUE) . "\n");
  return;
}

function __devnulldb_log($message, $target='php://stderr') {
  //file_put_contents($target, $message);
}

/*************************
 * Edoweb helper functions
 *************************/

define('EDOWEB_ENTITY_TYPE', 'edoweb_basic');

function _edoweb_storage_entity_serialize_turtle(
  $entity, $metadata_types = array()
){
  $rdf_subject = _edoweb_storage_entity_get_uri($entity);
  $rdf_serializer = new LibRDF_Serializer('turtle');
  return _edoweb_storage_entity_serialize_rdf(
    $entity, $rdf_subject, $rdf_serializer, $metadata_types
  );
}

function _edoweb_storage_entity_serialize_ntriples(
  $entity, $metadata_types = array()
){
  $rdf_subject = _edoweb_storage_entity_get_uri($entity);
  $rdf_serializer = new LibRDF_Serializer('ntriples');
  return _edoweb_storage_entity_serialize_rdf(
    $entity, $rdf_subject, $rdf_serializer, $metadata_types
  );
}

function _edoweb_storage_entity_serialize_rdf(
  $entity, $rdf_subject, $rdf_serializer, $metadata_types = array()
){
  $rdf_model = new LibRDF_Model(new LibRDF_Storage());
  $rdf_mapping = rdf_mapping_load(
    EDOWEB_ENTITY_TYPE, _edoweb_storage_entity_get_bundle($entity)
  );
  // First element contains the rdf:type definitions
  $rdf_type_predicate = new LibRDF_URINode(
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type'
  );
  foreach (array_shift($rdf_mapping) as $rdf_type_mapping) {
    $rdf_type_statement = new LibRDF_Statement(
      $rdf_subject, $rdf_type_predicate,
      new LibRDF_URINode(_edoweb_expand_curie($rdf_type_mapping))
    );
    $rdf_model->addStatement($rdf_type_statement);
  }

  $wrapper = entity_metadata_wrapper(EDOWEB_ENTITY_TYPE, $entity);
  // Following elements contain predicate mappings
  foreach ($rdf_mapping as $field_name => $field_mapping) {
    $field_info = field_info_field($field_name);
    $metadata_type = $field_info['settings']['metadata_type'];
    if (!empty($metadata_types)
        && !in_array($metadata_type, $metadata_types)) {
      continue;
    }
    $rdf_predicate = new LibRDF_URINode(
      _edoweb_expand_curie($field_mapping['predicates'][0])
    );
    $rdf_subject = _get_rdf_subject($entity, $field_name);
    try {
      $items = $wrapper->{$field_name}->value();
    } catch (EntityMetadataWrapperException $e) {
      // Field is not available for this entity
      continue;
    }
    if (is_null($items) || empty($items)) {
      // Field is available for this entity,
      // but does not have value(s).
      continue;
    }
    if (!is_array($items)) {
      $items = array($items);
    }
    foreach ($items as $item) {
      if (isset($field_mapping['type'])
          and $field_mapping['type'] == 'rel') {
        if (is_object($item)) {
          $rdf_object = _edoweb_storage_entity_get_uri($item);
        } else {
          $rdf_object = new LibRDF_URINode($item);
        }
      } else {
        $rdf_object = new LibRDF_LiteralNode($item);
      }
      $rdf_statement = new LibRDF_Statement(
        $rdf_subject, $rdf_predicate, $rdf_object
      );
      $rdf_model->addStatement($rdf_statement);
    }
  }
  foreach (rdf_get_namespaces() as $prefix => $namespace) {
    _edoweb_log("mapping: $prefix to $namespace\n");
    $rdf_serializer->setNamespace($namespace, $prefix);
  }
  return $rdf_model->serializeStatements($rdf_serializer);
}

function _edoweb_storage_entity_deserialize_rdf($entity, $rdf_subject, $rdf_data, $rdf_parser) {
  $rdf_mapping = rdf_mapping_load(
    EDOWEB_ENTITY_TYPE, _edoweb_storage_entity_get_bundle($entity)
  );
  $rdf_model = new LibRDF_Model(new LibRDF_Storage());
  try {
    $rdf_model->loadStatementsFromString($rdf_parser, $rdf_data);
  } catch (LibRDF_Error $e) {
    // TODO: log errors
    // drupal_set_message($e->getMessage(), 'error');
  }
  LibRDF_LiteralNode::setPlainOutput(true);

  // Skip first element, these are the rdf:type definitions
  unset($rdf_mapping[key($rdf_mapping)]);
  $wrapper = entity_metadata_wrapper(EDOWEB_ENTITY_TYPE, $entity);
  // Modify subject URI for datastream metadata
  foreach ($rdf_mapping as $field_name => $mapping) {
    $rdf_predicate = new LibRDF_URINode(
      _edoweb_expand_curie($mapping['predicates'][0])
    );
    $rdf_subject = _get_rdf_subject($entity, $field_name);
    foreach ($rdf_model->getTargets($rdf_subject, $rdf_predicate) as $value) {
      try {
        if ($value instanceOf LibRDF_LiteralNode) {
          // Fix escaped unicode characters such as \u00E4
          $value = json_decode('"'.$value.'"');
          if ($wrapper->{$field_name} instanceOf EntityValueWrapper) {
            $wrapper->{$field_name} = (string) $value;
          } else {
            $wrapper->{$field_name}[] = (string) $value;
          }
        } else {
          //FIXME: hardcoded translation of edoweb-uri to local id
          if ('<edoweb:' === substr($value, 0, 8)) {
            $value = _edoweb_storage_entity_get_id($value);
          } else {
            $value = substr($value, 1, -1);
          }
          if ($wrapper->{$field_name} instanceOf EntityValueWrapper) {
            $wrapper->{$field_name} = $value;
          } else {
            $wrapper->{$field_name}[] = $value;
          }
        }
        //drupal_set_message("Populated $field_name.");
      } catch (EntityMetadataWrapperException $e) {
        //drupal_set_message($e->getMessage(), 'error');
      }
    }
  }
}

function _get_rdf_subject($entity, $field_name) {
  $rdf_subject = _edoweb_storage_entity_get_uri($entity);
  $datastream_properties = array(
    'field_edoweb_filetype',
    'field_edoweb_label',
    'field_edoweb_filesize',
    'field_edoweb_datastream',
  );
  if ('file' == $entity->bundle_type
      && in_array($field_name, $datastream_properties)
  ) {
    return new LibRDF_URINode(substr($rdf_subject, 1, -1) .  '/data');
  } else {
    return $rdf_subject;
  }
}

function _edoweb_storage_entity_get_uri($entity) {
  return new LibRDF_URINode("{$entity->remote_id}");
}

function _edoweb_storage_entity_get_id($entity) {
  if ($entity instanceof LibRDF_URINode) {
    $remote_id = substr($entity, 1, -1);
    $id = db_query(
      'SELECT local_id FROM {edoweb_basic} WHERE remote_id = :remote_id',
      array(':remote_id' => $remote_id)
    )->fetchField();
  } else if (is_object($entity)) {
    $entity_ids = entity_extract_ids(EDOWEB_ENTITY_TYPE, $entity);
    $id = $entity_ids[0];
  } else {
    $id = FALSE;
  }
  return $id;
}

function _edoweb_storage_entity_get_remote_id($entity) {
  if (is_object($entity)) {
    $remote_id = $entity->remote_id;
  } else {
    $remote_id = db_query(
      'SELECT remote_id FROM {edoweb_basic} WHERE local_id = :local_id',
      array(':local_id' => $entity)
    )->fetchField();
  }
  return $remote_id;
}

function _edoweb_storage_entity_get_bundle($entity) {
  $entity_ids = entity_extract_ids(EDOWEB_ENTITY_TYPE, $entity);
  return $entity_ids[2];
}

function _edoweb_storage_entity_serialize_jsonld(
  $entity, $metadata_types = array()
){
  $rdf_mapping = rdf_mapping_load(
    EDOWEB_ENTITY_TYPE, _edoweb_storage_entity_get_bundle($entity)
  );
  $jsonld_context = new stdClass();
  $rdf_namespaces = rdf_get_namespaces();
  foreach ($rdf_namespaces as $prefix => $uri) {
    $jsonld_context->{$prefix} = $uri;
  }
  _edoweb_storage_entity_get_uri($entity);
  $rdf_subject = _edoweb_storage_entity_get_uri($entity);
  $rdf_serializer = new LibRDF_Serializer('ntriples');
  $rdf_ntriples = _edoweb_storage_entity_serialize_rdf(
    $entity, $rdf_subject, $rdf_serializer, $metadata_types
  );
  try {
    $rdf_jsonld = jsonld_compact(jsonld_from_rdf($rdf_ntriples), $jsonld_context);
  } catch (JsonLdException $e) {
    // drupal_set_message("Error reading ntriples\n$rdf_ntriples");
    $rdf_jsonld = null;
  }
  return str_replace('\\/', '/', json_encode($rdf_jsonld));
}

function _edoweb_storage_entity_deserialize_jsonld($entity, $rdf_subject, $rdf_data) {
  $options = array();
  $options['format'] = 'application/nquads';
  $rdf_ntriples = jsonld_to_rdf(json_decode($rdf_data), $options);
  /*
   * jsonld_to_rdf returns N-Triples in utf-8, but currently
   * LibRDF expects ASCII with utf-8 hex values.
   */
  $char_map = array(
    '¢' => '\u00A2',
    '£' => '\u00A3',
    '€' => '\u20AC',
    '¥' => '\u00A5',
    '°' => '\u00B0',
    '¼' => '\u00BC',
    'Œ' => '\u0152',
    '½' => '\u00BD',
    'œ' => '\u0153',
    '¾' => '\u00BE',
    'Ÿ' => '\u0178',
    '¡' => '\u00A1',
    '«' => '\u00AB',
    '»' => '\u00BB',
    '¿' => '\u00BF',
    'À' => '\u00C0',
    'Á' => '\u00C1',
    'Â' => '\u00C2',
    'Ã' => '\u00C3',
    'Ä' => '\u00C4',
    'Å' => '\u00C5',
    'Æ' => '\u00C6',
    'Ç' => '\u00C7',
    'È' => '\u00C8',
    'É' => '\u00C9',
    'Ê' => '\u00CA',
    'Ë' => '\u00CB',
    'Ì' => '\u00CC',
    'Í' => '\u00CD',
    'Î' => '\u00CE',
    'Ï' => '\u00CF',
    'Ð' => '\u00D0',
    'Ñ' => '\u00D1',
    'Ò' => '\u00D2',
    'Ó' => '\u00D3',
    'Ô' => '\u00D4',
    'Õ' => '\u00D5',
    'Ö' => '\u00D6',
    'Ø' => '\u00D8',
    'Ù' => '\u00D9',
    'Ú' => '\u00DA',
    'Û' => '\u00DB',
    'Ü' => '\u00DC',
    'Ý' => '\u00DD',
    'Þ' => '\u00DE',
    'ß' => '\u00DF',
    'à' => '\u00E0',
    'á' => '\u00E1',
    'â' => '\u00E2',
    'ã' => '\u00E3',
    'ä' => '\u00E4',
    'å' => '\u00E5',
    'æ' => '\u00E6',
    'ç' => '\u00E7',
    'è' => '\u00E8',
    'é' => '\u00E9',
    'ê' => '\u00EA',
    'ë' => '\u00EB',
    'ì' => '\u00EC',
    'í' => '\u00ED',
    'î' => '\u00EE',
    'ï' => '\u00EF',
    'ð' => '\u00F0',
    'ñ' => '\u00F1',
    'ò' => '\u00F2',
    'ó' => '\u00F3',
    'ô' => '\u00F4',
    'õ' => '\u00F5',
    'ö' => '\u00F6',
    'ø' => '\u00F8',
    'ù' => '\u00F9',
    'ú' => '\u00FA',
    'û' => '\u00FB',
    'ü' => '\u00FC',
    'ý' => '\u00FD',
    'þ' => '\u00FE',
    'ÿ' => '\u00FF',
  );
  $rdf_ntriples = strtr($rdf_ntriples, $char_map);
  $rdf_parser = new LibRDF_Parser('ntriples');
  return _edoweb_storage_entity_deserialize_rdf($entity, $rdf_subject, $rdf_ntriples, $rdf_parser);
}

function _edoweb_log($message, $target='php://stderr') {
  // file_put_contents($target, $message);
}

function _edoweb_expand_curie($curie) {
  $rdf_namespaces = rdf_get_namespaces();
  list($curie_prefix, $curie_local) = explode(':', $curie);
  return $rdf_namespaces[$curie_prefix] . $curie_local;
}

