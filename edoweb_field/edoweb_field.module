<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * Implements hook_field_info().
 */
function edoweb_field_field_info() {
  return array(
    'edoweb_ld_reference' => array(
      'label' => t('A linked data field'),
      'description' => t('This field holds the URI of a linked data resource'),
      'default_widget' => 'edoweb_autocomplete_widget',
      'default_formatter' => 'edoweb_ld_format',
      'property_type' => 'text',
    ),
    'edoweb_date' => array(
      'label' => t('A field for dates'),
      'description' => t('This field holds dates of the format DD.MM.YYYY, MM/YYYY or YYYY'),
      'settings' => array('max_length' => 10),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'text_textfield',
      'default_formatter' => 'text_default',
      'property_type' => 'text',
    ),
    'edoweb_datastream' => array(
      'label' => t('A field for datastreams'),
      'description' => t('This field holds datastream URIs'),
      'instance_settings' => array('text_processing' => 0),
      'default_widget' => 'edoweb_upload_widget',
      'default_formatter' => 'edoweb_datastream_format',
      'property_type' => 'text',
    ),
  );
}

/**
 * Implement hook_menu().
 */
function edoweb_field_menu() {
  $items['edoweb_entity_label'] = array(
    'page callback' => 'edoweb_entity_label',
    'page arguments' => array(1,2),
    'access callback' => 'entity_js_access',
    'access arguments' => array(1, 'read'),
    'type' => MENU_CALLBACK,
  );
  $items['edoweb_entity_list'] = array(
    'page callback' => 'edoweb_entity_list',
    'page arguments' => array(1),
    'access callback' => 'entity_js_access',
    'access arguments' => array(1, 'read'),
    'type' => MENU_CALLBACK,
  );
  $items['edoweb_entity_add'] = array(
    'page callback' => 'edoweb_entity_add',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'entity_js_access',
    'access arguments' => array(1, 'create'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Label entity function for JavaScript callbacks.
 */
function edoweb_entity_label($entity_type, $entity_id) {
  if ($entity = entity_load_single($entity_type, $entity_id)) {
    if (isset($entity->type) && !user_access($entity_type . ' entity js read ' . $entity->type)) {
      return drupal_access_denied();
    }
    print entity_label(EDOWEB_ENTITY_TYPE, $entity);
  }
  exit();
}

/**
 * List entities function for JavaScript callbacks.
 */
function edoweb_entity_list($entity_type) {
  $ids = isset($_GET['ids']) && !empty($_GET['ids']) ? $_GET['ids'] : array();
  $columns = isset($_GET['columns']) ? $_GET['columns'] : 'generic';
  $entities = edoweb_basic_load_multiple($ids);
  $header = edoweb_basic_table_header($columns);
  $output = edoweb_basic_entity_table($header, $entities);
  die(drupal_render($output));
}

/**
 * Raw edit form for JavaScript callbacks.
 */
function edoweb_entity_add($entity_type, $bundle_type, $entity_id = null) {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller($entity_type)->create(
    array('bundle_type' => $bundle_type)
  );
  $form = drupal_get_form('edoweb_basic_form', $entity);

  unset($form['submit']);
  unset($form['cancel']);
  $form['#action'] = url("resource/add/{$bundle_type}");
  die(drupal_render($form));
}

/**
 * Implements hook_field_validate().
 */
function edoweb_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

  // Re-attach all necessary JS to display field after failed validation
  // since this is not done automatically when validating.
  drupal_add_library('system', 'drupal.collapse');
  drupal_add_library('system', 'ui.autocomplete');
  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/jquery.tablesorter.min.js'
  );
  drupal_add_js(array('edoweb_field' => array(
    'basePath' => base_path() . drupal_get_path('module', 'edoweb_field')
  )), 'setting');

  switch ($field['type']) {
    case 'edoweb_date':
      foreach ($items as $delta => $item) {
        if (!edoweb_field_field_is_empty($item, $field) &&
            !_edoweb_value_is_valid_date($item['value'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'edoweb_field_date_invalid',
            'message' => t('Dates must be of the form DD.MM.YYY, MM/YYYY or YYYY.'),
          );
        }
      }
      break;
    case 'edoweb_ld_reference':
      foreach ($items as $delta => $item) {
        if (!edoweb_field_field_is_empty($item, $field) &&
            !_edoweb_value_is_valid_uri($item['value'])) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error' => 'edoweb_field_uri_invalid',
            'message' => t('@label must be a valid, absolute URI.', array('@label' => $instance['label'])),
          );
        }
      }
      break;
  }
}

function _edoweb_value_is_valid_date($value) {
  $pattern = '/^(\d\d\.\d\d\.\d\d\d\d|\d\d\/\d\d\d\d|\d\d\d\d)$/';
  return preg_match($pattern, $value) === 1;
}

function _edoweb_value_is_valid_uri($value) {
  /*
   * URI validation regular expression from
   * http://jmrware.com/articles/2009/uri_regexp/URI_regex.html#uri-38
   */
  $pattern = "`
    [A-Za-z][A-Za-z0-9+\-.]* :
    (?: //
      (?: (?:[A-Za-z0-9\-._~!$&'()*+,;=:]|%[0-9A-Fa-f]{2})* @)?
      (?:
        \[
        (?:
          (?:
            (?:                                                    (?:[0-9A-Fa-f]{1,4}:){6}
            |                                                   :: (?:[0-9A-Fa-f]{1,4}:){5}
            | (?:                            [0-9A-Fa-f]{1,4})? :: (?:[0-9A-Fa-f]{1,4}:){4}
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,1} [0-9A-Fa-f]{1,4})? :: (?:[0-9A-Fa-f]{1,4}:){3}
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,2} [0-9A-Fa-f]{1,4})? :: (?:[0-9A-Fa-f]{1,4}:){2}
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,3} [0-9A-Fa-f]{1,4})? ::    [0-9A-Fa-f]{1,4}:
            | (?: (?:[0-9A-Fa-f]{1,4}:){0,4} [0-9A-Fa-f]{1,4})? ::
            ) (?:
                [0-9A-Fa-f]{1,4} : [0-9A-Fa-f]{1,4}
              | (?: (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?) \.){3}
                    (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
              )
          |   (?: (?:[0-9A-Fa-f]{1,4}:){0,5} [0-9A-Fa-f]{1,4})? ::    [0-9A-Fa-f]{1,4}
          |   (?: (?:[0-9A-Fa-f]{1,4}:){0,6} [0-9A-Fa-f]{1,4})? ::
          )
        | [Vv][0-9A-Fa-f]+\.[A-Za-z0-9\-._~!$&'()*+,;=:]+
        )
        \]
      | (?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}
           (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)
      | (?:[A-Za-z0-9\-._~!$&'()*+,;=]|%[0-9A-Fa-f]{2})*
      )
      (?: : [0-9]* )?
      (?:/ (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})* )*
    | /
      (?:    (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+
        (?:/ (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})* )*
      )?
    |        (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})+
        (?:/ (?:[A-Za-z0-9\-._~!$&'()*+,;=:@]|%[0-9A-Fa-f]{2})* )*
    |
    )
    (?:\? (?:[A-Za-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9A-Fa-f]{2})* )?
    `x";
  return preg_match($pattern, $value) === 1;
}

/**
 * Implements hook_field_is_empty().
 */
function edoweb_field_field_is_empty($item, $field) {
  if (empty($item['value']) && (string) $item['value'] !== '0') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_widget_info().
 *
 * @see field_example_field_widget_form()
 */
function edoweb_field_field_widget_info() {

  return array(
    'edoweb_autocomplete_widget' => array(
      'label' => t('Auto-complete'),
      'field types' => array('edoweb_ld_reference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
    'edoweb_upload_widget' => array(
      'label' => t('File Upload'),
      'field types' => array('edoweb_datastream'),
    ),
  );

}

/**
 * Implements hook_field_formatter_info().
 */
function edoweb_field_field_formatter_info() {
  return array(
    'edoweb_ld_format' => array(
      'label' => t('Linked data URI'),
      'field types' => array('edoweb_ld_reference'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
    'edoweb_datastream_format' => array(
      'label' => t('Datastream URI'),
      'field types' => array('edoweb_datastream'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function edoweb_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {

    case 'edoweb_ld_format':
      if (isset($instance['settings']['handler_settings']['target_bundles'])) {
        $target_bundles = array_values($instance['settings']['handler_settings']['target_bundles']);
      } else if (isset($field['settings']['handler_settings']['target_bundles'])) {
        $target_bundles = array_values($field['settings']['handler_settings']['target_bundles']);
      } else {
        $target_bundles = array();
      }

      foreach ($items as $delta => $item) {
        $curie = _edoweb_compact_uri($item['value']);
        $elements[$delta] = array(
          '#markup' => l($item['value'], $item['value'],
            array('attributes' => array(
              'data-target-bundle' => implode(' ', $target_bundles),
              'data-curie' => $curie,
            ))
          ),
        );
      }
      break;

    case 'edoweb_datastream_format':
      $mime_type = explode(
        '/', $entity->field_edoweb_filetype[LANGUAGE_NONE][0]['value']
      );
      $extension = next($mime_type);
      if (!file_exists(__DIR__ . "/$extension.svg")) {
        $extension = 'unknown';
      }
      $icon_url = file_create_url(
        drupal_get_path('module', 'edoweb_field') .  "/$extension.svg"
      );
      $curie = _edoweb_compact_uri($items[0]['value']);
      $link = base_path() . 'resource/' . $items[0]['value'];
      $title = t('Download @extension', array('@extension' => strtoupper($extension)));
      $elements[] = array(
        '#markup' => "<a data-curie=\"$curie\" title=\"$title\" href=\"$link\"><img class=\"edoweb-mimetype\" src=\"$icon_url\" /></a>"
      );
      break;

  }

  return $elements;

}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 */
function edoweb_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {
    case 'edoweb_autocomplete_widget':
      $field_name = $field['field_name'];
      $bundle_name = $instance['bundle'];
      $field_group = array_key_exists(
        'field_group', $field['settings']
      ) ? $field['settings']['field_group']
        : false;

      if (isset($instance['settings']['handler_settings']['target_bundles'])) {
        $target_bundles = array_values($instance['settings']['handler_settings']['target_bundles']);
      } else if (isset($field['settings']['handler_settings']['target_bundles'])) {
        $target_bundles = array_values($field['settings']['handler_settings']['target_bundles']);
      } else {
        $target_bundles = array();
      }

      drupal_add_library('system', 'drupal.collapse');
      drupal_add_library('system', 'ui.dialog');
      drupal_add_js(drupal_get_path('module', 'edoweb') . '/jquery.url.js');
      drupal_add_js(array('edoweb_field' => array(
        'basePath' => base_path() . drupal_get_path('module', 'edoweb_field')
      )), 'setting');

      $element += array('#type' => 'item');

      $element['edoweb_autocomplete_widget'] = array(
        '#parents' => array(
          'edoweb_autocomplete_widget', $field_name
        ),
        '#tree' => true,
      );

      // Textfield to hold new values
      $element['edoweb_autocomplete_widget']['value'] = array(
        '#type' => 'textfield',
        '#attributes' => array(
          'class' => array('edoweb_autocomplete_widget', $field_name),
          'data-field' => $field_name,
          'data-bundle' => $bundle_name,
          'data-target-bundle' => implode(' ' ,$target_bundles),
        ),
      );
      if ($field_group) {
        $element['edoweb_autocomplete_widget']['value']
          ['#attributes']['data-field-group'] = $field_group;
      }

      // Submit button to add new values
      $element['edoweb_autocomplete_widget']['submit'] = array(
        '#type' => 'submit',
        '#default_value' => t('Hinzufügen'),
        '#name' => "edoweb_autocomplete_widget_add_$field_name",
        '#validate' => array('edoweb_autocomplete_widget_validate_value'),
        '#ajax' => array(
          'callback' => 'edoweb_autocomplete_widget_update_value',
          'wrapper' => 'add-' . $field_name,
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );

      // Reload items from submitted values
      if (array_key_exists('values', $form_state)) {
        if (array_key_exists($field_name, $form_state['values'])) {
          $items = array();
          foreach ($form_state['values'][$field_name][LANGUAGE_NONE] as $value) {
            array_push($items, $value);
          }
        }
      }

      // List items
      $i = 0;
      foreach ($items as $i => $item) {
        $item_curie = $item['value']
          ? _edoweb_compact_uri($item['value']) : '';

        $element[$i]['value'] = array(
          '#type' => 'textfield',
          '#attributes' => array(
            'value' => $item_curie,
            'data-curie' => $item_curie,
          ),
        );
      }

      // Placeholder for new values
      $element[++$i]['value'] = array(
        '#prefix' => '<div id ="add-' . $field_name . '">',
        '#suffix' => '</div>',
      );

      if (empty($items)) {
        $element['edoweb_autocomplete_widget']['note'] = array(
          '#type' => 'item',
          '#markup' => '<em class="edoweb_autocomplete_widget_note">Es liegen keine Einträge für '.$instance['label'].' vor. Klicken Sie zum Hinzufügen oben auf [+].</em>',
        );
      }
      break;

    case 'edoweb_upload_widget':
      $widget = $element;
      $widget['#delta'] = $delta;
      $value = isset($items[$delta]['value']) ? $items[$delta]['value'] : '';
      if ($value == '') {
        $widget += array(
          '#type' => 'file',
          '#title' => t('Choose a file'),
        );
      }
      $element['value'] = $widget;
      break;

  }
  return $element;
}

function edoweb_autocomplete_widget_update_value($form, &$form_state) {
  $form_state['rebuild'] = TRUE;
  $parents = $form_state['triggering_element']['#array_parents'];
  array_pop($parents);
  array_pop($parents);
  array_pop($parents);
    // Handle add event
    if (array_key_exists('triggering_element', $form_state)) {
      $trigger = $form_state['triggering_element']['#name'];
      if (0 === strpos($trigger, 'edoweb_autocomplete_widget_add_')) {
        $field_name = end(explode('edoweb_autocomplete_widget_add_', $trigger));
        $element = drupal_array_get_nested_value($form, $parents);
        file_put_contents('php://stderr', print_r($form[$field_name], true));
        return $element;
        //$added_value =
        //  $form_state['values']['edoweb_autocomplete_widget'][$field_name]['value'];
        //$item_curie = _edoweb_compact_uri($added_value);
        //return array(
        //  '#type' => 'textfield',
        //  '#name' => $field_name . "[und][][value]",
        //  '#attributes' => array(
        //    'value' => $item_curie,
        //    'data-curie' => $item_curie,
        //  ),
        //);
      }
    }

  //print_r($form);die;
  //unset($form['edoweb_autocomplete_widget']['search']['#value']);
  //unset($form_state['input']['edoweb_autocomplete_widget']);
  //unset($form_state['edoweb_autocomplete_widget']);
  //unset($form_state['complete form']['edoweb_autocomplete_widget']);
  $form_state['rebuild'] = TRUE;
}

function edoweb_autocomplete_widget_validate_value($form, &$form_state) {
  form_clear_error();
  drupal_get_messages('error');
}

/**
 * Add cache table for linked data labels
 */
function edoweb_field_update_7100() {
  $schema = drupal_get_schema('edoweb_ld_reference_label_cache', TRUE);
  db_create_table('edoweb_ld_reference_label_cache', $schema);
}

/**
 * Drop cache table for linked data labels
 */
function edoweb_field_update_7101() {
  db_drop_table('edoweb_ld_reference_label_cache');
}
