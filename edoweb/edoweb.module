<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Implements the basic functionality required to create and display an entity.
 */

require_once dirname(__FILE__) . '/lib/LibRDF/LibRDF/LibRDF.php';
require_once dirname(__FILE__) . '/lib/php-json-ld/jsonld.php';

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with multiple bundles
 * and without revision support.
 */
function edoweb_entity_info() {
  $info['edoweb_basic'] = array(
    // A human readable label to identify our entity.
    'label' => t('Edoweb Basic Entity'),

    // Callback to label entities
    'label callback' => 'edoweb_basic_title',

    // The class for our Entity
    'entity class' => 'EdowebBasicEntity',

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'EdowebBasicController',

    // The table for this entity defined in hook_schema()
    'base table' => 'edoweb_basic',

    // Returns the uri elements of an entity
    'uri callback' => 'entity_class_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used
    // for key functions
    'entity keys' => array(
      // The 'id' (local_id here) is the unique id.
      'id' => 'local_id',
      // Bundle will be determined by the 'bundle_type' field
      'bundle' => 'bundle_type'
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    // 'static cache' => FALSE,

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    // 'field cache' => FALSE,

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'monograph' => array(
        'label' => t('Monograph'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/monograph/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'journal' => array(
        'label' => t('Journal'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/journal/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'volume' => array(
        'label' => t('Volume'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/volume/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'issue' => array(
        'label' => t('Issue'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/issue/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'article' => array(
        'label' => t('Article'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/article/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'file' => array(
        'label' => t('File'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/file/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'person' => array(
        'label' => t('Person'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/person/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'subject' => array(
        'label' => t('Schlagwort'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/subject/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'corporate_body' => array(
        'label' => t('KÃ¶rperschaft'),
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/corporate_body/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
    ),
    // View modes allow entities to be displayed differently based on context.
    'view modes' => array(
      'tweaky' => array(
        'label' => t('Tweaky'),
        'custom settings' =>  FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * Fetch a basic object.
 *
 * This function ends up being a shim between the menu system and
 * edoweb_basic_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: resource/%edoweb_basic in
 * hook_menu() tells Drupal to call edoweb_basic_load().
 *
 * @param $remote_id
 *   Integer specifying the basic entity uri.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see edoweb_basic_load_multiple()
 * @see edoweb_menu()
 */
function edoweb_basic_load($remote_id, $reset = FALSE) {
  $remote_ids = $remote_id ? array($remote_id) : array();
  $basic = edoweb_basic_load_multiple($remote_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function edoweb_basic_load_multiple($remote_ids = FALSE, $conditions = array(), $reset = FALSE) {
  // TODO: Determine whether to $reset by checking HTTP header
  // of resource in Edoweb API
  return entity_load('edoweb_basic', $remote_ids, $conditions, $reset);
}

/**
 * Implements hook_menu().
 */
function edoweb_menu() {

  // Configuration section for Edoweb modules
  $items['edoweb/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configuration options for the Edoweb modules',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer edoweb configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Bulk import
  $items['edoweb/config/import'] = array(
    'title' => 'Bulk Import',
    'description' => 'Import objects from the Edoweb API.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_bulk_import_form'),
    'access arguments' => array('administer edoweb configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Tunnel to API resource listing
  $items['edoweb/config/resources'] = array(
    'page callback' => '_edoweb_resource_list',
    'access arguments' => array('view any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );

  // Add new resources
  $items["resource/add/monograph"] = array(
    'title' => "Add new Monograph",
    'page callback' => 'edoweb_basic_add',
    'page arguments' => array('monograph'),
    'access arguments' => array('create edoweb_basic entities'),
  );

  $items['resource/add/%'] = array(
    'title callback' => 'edoweb_basic_bundle_name',
    'title arguments' => array(2),
    'page callback' => 'edoweb_basic_add',
    'page arguments' => array(2),
    'access arguments' => array('create edoweb_basic entities'),
    'type' => MENU_CALLBACK,
  );

  $items["resource/import/monograph"] = array(
    'title' => "Import Monograph",
    'page callback' => 'edoweb_basic_import',
    'page arguments' => array('monograph'),
    'access arguments' => array('create edoweb_basic entities'),
  );

  $items["resource/import/journal"] = array(
    'title' => "Import Journal",
    'page callback' => 'edoweb_basic_import',
    'page arguments' => array('journal'),
    'access arguments' => array('create edoweb_basic entities'),
  );

  // Resource landing page, list entities
  $items['resource'] = array(
    'title' => t('Edoweb'),
    'page callback' => 'edoweb_info_page',
    'page arguments' => array('0'),
    'access arguments' => array('view any edoweb_basic entity'),
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  $items['resource/%edoweb_basic'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array(EDOWEB_ENTITY_TYPE, 1),
    'page callback' => 'edoweb_basic_view',
    'page arguments' => array(1),
    'access arguments' => array('view any edoweb_basic entity'),
  );

  // 'View' tab for an individual entity page.
  $items['resource/%edoweb_basic/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['resource/%edoweb_basic/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_form', 1),
    'access callback' => '_edoweb_is_editable_entity',
    'access arguments' => array(1, 'edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Admin' tab for an individual entity page.
  $items['resource/%edoweb_basic/admin'] = array(
    'title' => 'Admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_admin', 1),
    'access arguments' => array('edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Files' tab for entities that can have files.
  $items['resource/%edoweb_basic/children'] = array(
    'title' => 'Children',
    'page callback' => 'edoweb_basic_children',
    'page arguments' => array(1),
    'access callback' => '_edoweb_field_access',
    'access arguments' => array(1, array('field_edoweb_struct_child')),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Structure' tab for entities.
  $items['resource/%edoweb_basic/structure'] = array(
    'title' => 'Structure',
    'page callback' => 'edoweb_basic_structure',
    'page arguments' => array(1),
    'access callback' => '_edoweb_field_access',
    'access arguments' => array(1, array('field_edoweb_struct_parent')),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Add Child' for entities that can have children.
  $items['resource/%edoweb_basic/children/add/%'] = array(
    'title callback' => 'edoweb_basic_bundle_name',
    'title arguments' => array(4),
    'page callback' => 'edoweb_basic_add',
    'page arguments' => array(4, 1),
    'access callback' => '_edoweb_field_access',
    'access arguments' => array(1, array('field_edoweb_struct_child'), 'create edoweb_basic entities'),
    'type' => MENU_CALLBACK,
  );

  // GND Autocompletion
  $items['edoweb/autocomplete'] = array(
    'page callback' => '_edoweb_autocomplete',
    'access arguments' => array('edit any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Basic information for the page.
 */
function edoweb_info_page() {
  $query = new EntityFieldQuery();
  $query->addTag('elasticsearch');
  $query->entityCondition('entity_type', 'edoweb_basic');
  $content['resource_list'] = edoweb_basic_search_entities(
    $query, TRUE
  );

  return $content;

}

/**
 * Implements hook_permission().
 */
function edoweb_permission() {
  $permissions = array(
    'administer edoweb_basic entities' =>  array(
      'title' => t('Administer Edoweb Basic entities'),
    ),
    'view any edoweb_basic entity' => array(
      'title' => t('View any Edoweb Basic entity'),
    ),
    'edit any edoweb_basic entity' => array(
      'title' => t('Edit any Edoweb Basic entity'),
    ),
    'create edoweb_basic entities' => array(
      'title' => t('Create Edoweb Basic Entities'),
    ),
    'administer edoweb configuration' => array(
      'title' => t('Administer Edoweb Configuration'),
    ),
  );
  return $permissions;
}

function edoweb_basic_search_entities_form($form, &$form_state, $advanced, $search_count, $query) {

  $form['#method'] = 'get';

  $form['query'] = array(
    '#tree' => TRUE,
    '#type' => 'form',
  );

  $url_params = explode('&', $_SERVER['QUERY_STRING']);
  foreach ($url_params as $param) {
    if (empty($param)) continue;
    list($key, $value) = explode('=', $param);
    if ("query[$search_count][term]" == urldecode($key) || 'op' == $key) continue;
    $form['query']['url_params'][] = array(
      '#type' => 'hidden',
      '#value' => urldecode($value),
      '#name' => urldecode($key),
    );
  }

  $form['query'][$search_count]['term']= array(
    '#type' => 'textfield',
    '#default_value' => isset($query['term']) ? $query['term'] : '',
    '#attributes' => array(
      'title' => t( 'Enter your search term here. You may use quotes to search for phrases as in "The quick brown fox", and also boolean operators as in This AND that OR those.')
    ),
  );

  $form['query'][$search_count]['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  if ($advanced) {
    global $user;
    $form['query'][$search_count]['users'] = array(
      '#type' => 'checkboxes',
      '#options' => array($user->uid => 'Only entities submitted by me'),
      '#default_value' =>
        isset($query['users']) ? array_keys($query['users']) : array(),
    );
  }

  return $form;
}

function edoweb_basic_search_entities(
  EntityFieldQuery $efq, $advanced = FALSE, $operations = array()
) {
  static $search_count = 0;

  if (array_key_exists('query', $_GET)
      && !empty($_GET['query'])
      && array_key_exists($search_count, $_GET['query'])
  ) {
    $query = $_GET['query'][$search_count];
  } else {
    $query = array();
  }

  $content = array();
  $content['search'] = drupal_get_form(
    'edoweb_basic_search_entities_form', $advanced, $search_count, $query
  );
  unset($content['search']['form_build_id']);
  unset($content['search']['form_id']);
  unset($content['search']['form_token']);

  if (@$term = $query['term']) {
    $efq->addMetaData('term', $term);
  }
  if (@$users = $query['users']) {
    $target_users = array_keys($users);
    $efq->propertyCondition('uid', $target_users);
  }

  $content['results'] = edoweb_basic_list_entities($efq, $operations, $search_count, @$query['facets']);
  $search_count++;
  return $content;
}

/**
 * Returns a render array with all edoweb_basic entities.
 *
 */
function edoweb_basic_list_entities(EntityFieldQuery $efq, $operations, $search_count = 0, $active_facets) {

  drupal_add_js(
    drupal_get_path('module', 'edoweb_field') . '/edoweb_field_reference.js'
  );

  // Prepare query: header for table sort
  $header = array(
    'ID',
    array(
      'data' => 'Updated',
      'type' => 'property',
      'specifier' => 'updated',
      'sort' => isset($efq->metaData['term']) ? null : 'desc',
    ),
    array(
      'data' => 'Title',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_edoweb_title',
        'column' => 'value',
      ),
    ),
    array(
      'data' => 'Issued',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_edoweb_issued',
        'column' => 'value',
      ),
    ),
    'Type',
    'Operations',
  );
  $efq->tableSort($header);

  $content = array();

  // Prepare query: apply active facets
  $content['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Facets'),
    '#attributes' => array(
      'class' => array('collapsible')
    ),
    '#weight' => -100,
  );
  $applied_facets = array();
  if ($active_facets) {
    foreach (array_keys($active_facets) as $jsonld_property) {
      $content['filters'][$jsonld_property] = array(
        '#title' => $jsonld_property,
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#weight' => -200,
      );
    }
    foreach ($active_facets as $jsonld_property => $facet) {
      $is_ref = in_array($jsonld_property, array('creator', 'subject'));
      foreach ($facet as $key => $value) {
        $applied_facets[$jsonld_property][$value] = TRUE;
        // Link to remove facet
        $params = drupal_get_query_parameters();
        unset($params['query'][$search_count]['facets'][$jsonld_property][$key]);
        $item = $is_ref ? '<span data-curie="' . _edoweb_compact_uri($value) . '">' . $value .  '</span>' : $value;
        $item .= l(t(' Remove'), current_path(), array('query' => $params));
        $content['filters'][$jsonld_property]['#items'][] = $item;
        // Add facet to query
        if ('contentType' == $jsonld_property) {
          $efq->entityCondition('bundle', array($value));
        } else {
          $field_name = _jsonld_key_to_field_name($jsonld_property);
          $efq->fieldCondition(
            $field_name, 'value', $value
          );
        }
      }
    }
  }

  // Execute query
  $result = $efq->execute();

  if (!$result or !array_key_exists('edoweb_basic', $result)) {
    $entities = array();
  } else {
    $entities = $result['edoweb_basic'];
  }

  $content['total_hits'] = array(
    '#type' => 'item',
    '#markup' => t(
      'Your search returned ' . $result['hits'] . '
      results. You may apply the following facets to further limit your
      search:'
    ),
    '#weight' => -300,
  );

  // Available facets
  if (isset($result['facets'])) {
    // Add list of available facets
    drupal_add_library('system', 'drupal.collapse');
    $content['filters']['facets'] = array(
      '#type' => 'fieldset',
      '#title' => t('Add Facet'),
      '#attributes' => array(
        'class' => array('collapsible', 'collapsed')
      ),
      '#weight' => -50,
    );
    foreach ($result['facets'] as $jsonld_property => $facet) {
      $content['filters']['facets'][$jsonld_property] = array(
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#title' => $jsonld_property,
      );
      $is_ref = in_array($jsonld_property, array('creator', 'subject'));
      foreach ($facet->terms as $term) {
        // Don't add facets that are already applied to the list
        if (isset($applied_facets[$jsonld_property][$term->term]))
          continue;
        $params = drupal_get_query_parameters();
        $facet_entity_uri = $term->term;
        $facet_entity_count = $term->count;
        $params['query'][$search_count]['facets'][$jsonld_property][] = $facet_entity_uri;
        $content['filters']['facets'][$jsonld_property]['#items'][] = l(
          "$facet_entity_uri", current_path(),
          array(
            'query' => $params,
            'attributes' => $is_ref ? array('data-curie' => _edoweb_compact_uri($facet_entity_uri)) : array(),
          )
        ) . " ($facet_entity_count)";
      }
    }
  }


  if (!empty($entities)) {
    foreach ( $entities as $i => $entity ) {
      $operation_elements = '';
      foreach ($operations as $operation) {
        $operation_form = drupal_get_form(
          "{$operation}_{$i}", $entity->remote_id
        );
        $operation_elements .= drupal_render($operation_form);
      }
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'id' => l($entity->remote_id, "resource/{$entity->remote_id}"),
          'updated' => format_date($entity->updated, 'custom', 'd.m.Y - H:i:s'),
          'title' => l(edoweb_basic_raw_title($entity), "resource/{$entity->remote_id}"),
          'issued' => 
            ($issued = field_get_items(
              'edoweb_basic', $entity, 'field_edoweb_issued'
            )) ? $issued[0]['value'] : '',
          'bundle' => edoweb_basic_bundle_name($entity->bundle_type),
          'operations' => $operation_elements,
        ),
      );
    }

    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $header,
    );
    $content['pager'] = array(
      '#theme' => 'pager',
      '#element' => $efq->pager_num,
      '#weight' => 10,
    );

  } else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No results.'),
    );
  }
  return $content;
}

/**
 * Callback for a title for this entity.
 */
function edoweb_basic_title($entity) {

  $bundle_name = edoweb_basic_bundle_name($entity->bundle_type);
  $title = edoweb_basic_raw_title($entity);
  return "$bundle_name: $title";

}

function edoweb_basic_raw_title($entity) {

  $label_fields = array();

  switch ($entity->bundle_type) {
    case 'monograph':
    case 'journal':
    case 'issue':
    case 'article':
      $label_fields[] = 'field_edoweb_title';
      break;
    case 'volume':
      $label_fields[] = 'field_edoweb_volume';
      break;
    case 'person':
    case 'corporate_body':
    case 'subject':
      $label_fields[] = 'field_gnd_name';
      $label_fields[] = 'field_skos_pref_label';
      break;
    default:
      $label_fields[] = 'field_edoweb_label';
      break;
  }

  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  $title_values = array();
  foreach ($label_fields as $label_field) {
    try {
      $title_value = $wrapper->$label_field->value();
      if ($title_value) $title_values[] = $title_value;
    } catch (EntityMetadataWrapperException $e) {
      // Field not available, ignore
    }
  }

  return empty($title_values)
    ? _edoweb_expand_curie($entity->remote_id)
    : implode(' | ', $title_values);

}

/**
 * Callback to display bundle name.
 */
function edoweb_basic_bundle_name($bundle) {
  $info = entity_get_info('edoweb_basic');
  $label = !empty($info['bundles'][$bundle]['label'])
    ? $info['bundles'][$bundle]['label']
    : 'Resource';
  return $label;
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function edoweb_basic_view($entity, $view_mode = 'tweaky') {
  // Our entity type, for convenience.
  $entity_type = 'edoweb_basic';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->local_id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->local_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);


  // Remove any structural fields from the form because they will be
  // displayed separately
  $instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );
  foreach ($instances_info as $field_name => $instance_info) {
    $field_info = field_info_field($field_name);
    $is_structural_field =
      isset($field_info['settings']['metadata_type'])
      && $field_info['settings']['metadata_type'] == 'structural';
    if ($is_structural_field) {
      //unset($entity->content[$field_name]);
    }
  }

  // OK, Field API done, now we can set up some of our own data.

  // Find fields linking to this entity
  $inverse_query = new EntityFieldQuery();
  $inverse_query->addTag('elasticsearch');
  $inverse_query->entityCondition(
    'entity_type', 'edoweb_basic'
  );
  $fields_info = field_info_fields();
  $has_inverse = FALSE;
  foreach ($fields_info as $field_name => $field_info) {
    if (isset($field_info['settings']['inverse'])
        && in_array($entity->bundle_type, $field_info['settings']['inverse']['bundles'])) {
      $has_inverse = TRUE;
      $inverse_query->fieldCondition(
        $field_name, 'value', $entity->identifier(), null, 'or'
      );
    }
  }
  if ($has_inverse) {
    $entity->content['related'] = edoweb_basic_search_entities(
      $inverse_query
    );
    $entity->content['related'] += array(
      '#weight' => 900,
      '#type' => 'fieldset',
      '#title' => 'Related resources',
    );
  }

  $entity->content['_updated'] = array(
    '#type' => 'item',
    '#markup' => '<small>Letzte Ãnderung: ' .  format_date($entity->updated, 'custom', 'd.m.Y - H:i:s') . '</small>',
    '#weight' => 1000,
  );

  $edoweb_api_host = variable_get('edoweb_api_host');
  $entity->content['remote_id'] = array(
    '#type' => 'item',
    '#markup' => '<small>' . l(
      'View source',
      _edoweb_expand_curie($entity->remote_id),
      array('attributes' => array('target'=>'_blank'))
    ) . '</small>',
    '#weight' => 1001,
  );

  if (1 == variable_get('edoweb_api_debug')) {
    $entity->content['turtle'] = array(
      '#type' => 'item',
      '#title' => t('Turtle view'),
      '#markup' => sprintf('<pre>%s</pre>', htmlentities(_edoweb_storage_entity_serialize_turtle($entity))),
      '#weight' => 100,
    );

    $entity->content['json'] = array(
      '#type' => 'item',
      '#title' => t('JSON-LD view'),
      '#markup' => sprintf('<pre>%s</pre>', htmlentities(_edoweb_storage_entity_serialize_jsonld($entity))),
      '#weight' => 100,
    );
  }

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language ;
  $langcode = $language->language ;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('edoweb_basic_view', 'entity_view'),
    $entity->content, $entity_type);

  _edoweb_build_breadcrumb($entity);

  // And finally return the content.
  return $entity->content;
}


function _edoweb_build_parent_trail($entity, $trail = array()) {
  // Recursively add parents to trail
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  if (FALSE !== $parents) {
    $parent = edoweb_basic_load($parents[0]['value']);
    $trail = array_merge(
      _edoweb_build_parent_trail($parent, $trail),
      $trail
    );
  }
  $title = entity_label(EDOWEB_ENTITY_TYPE, $entity);
  $entity_url = entity_class_uri($entity);
  $trail[] = l($title, $entity_url['path']);
  return $trail;
}

function _edoweb_build_breadcrumb($entity) {
  $trail = _edoweb_build_parent_trail($entity);
  drupal_set_breadcrumb($trail);
}

/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 */
function edoweb_field_extra_fields() {
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );

  // Attach extra_fields to all bundles
  $extra_fields['edoweb_basic']['monograph']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['journal']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['volume']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function edoweb_basic_add($bundle_type, $parent = NULL) {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('edoweb_basic')->create(
    array('bundle_type' => $bundle_type)
  );
  if (isset($_GET['source'])) {
    $api = new LinkedDataClient();
    $resource_uri = urldecode($_GET['source']);
    $entity->remote_id = $resource_uri;
    try {
      $api->load($entity);
      $namespace = variable_get('edoweb_api_namespace');
      $entity->remote_id = "$namespace:" . EdowebBasicController::uuid_v4();
      drupal_set_message(t("Imported data from ") . $resource_uri, 'status');
    } catch (LibRDF_Error $e) {
      drupal_set_message(t("Failed importing data from ") . $resource_uri, 'error');
    }
  }
  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  if (NULL !== $parent) {
    $wrapper->field_edoweb_struct_parent = $parent->remote_id;
  }
  _edoweb_build_breadcrumb($entity);
  return drupal_get_form('edoweb_basic_form', $entity);
}

/**
 * Provides a wrapper on the edit form to add a new child to an entity.
 */
function edoweb_basic_structure($entity, $bundle_types = array()) {

  $content = array();
  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);

  if (isset($wrapper->field_edoweb_struct_parent)) {
    // Parent
    $content['parent'] = array(
      '#type' => 'fieldset',
      '#title' => 'Parent',
    );
    // Current parent
    if ($parent_id = $wrapper->field_edoweb_struct_parent->value()) {
      $content['parent']['parent_list'] =
        _edoweb_field_embed_entities(
          array(array('value' => $parent_id)), $entity->remote_id
        );
    }

    // Update parent
    $field_info_instance = field_info_instance(
      'edoweb_basic', 'field_edoweb_struct_parent', $entity->bundle_type
    );
    $parent_bundles = $field_info_instance['settings']['handler_settings']['target_bundles'];
    $parent_query = new EntityFieldQuery();
    $parent_query->addTag('elasticsearch');
    $parent_query->entityCondition(
      'entity_type', 'edoweb_basic'
    );
    $parent_query->entityCondition(
      'bundle', $parent_bundles
    );

    $operations = array('edoweb_basic_structure_parent_update');
    $content['parent']['parent_query'] = edoweb_basic_search_entities(
      $parent_query, FALSE, $operations
    );

  }

  _edoweb_build_breadcrumb($entity);
  return $content;
}

function edoweb_basic_structure_parent_update_submit($form, &$form_state) {
  $entity = menu_get_object(EDOWEB_ENTITY_TYPE);
  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  $prev_parent_id = $wrapper->field_edoweb_struct_parent->value();
  $new_parent_id = $form_state['values']['parent_id'];
  $wrapper->field_edoweb_struct_parent = $new_parent_id;
  $api = new EdowebAPIClient();
  if ($api->saveResource($entity)) {
    entity_get_controller('edoweb_basic')->clearCache($prev_parent_id);
    entity_get_controller('edoweb_basic')->clearCache($new_parent_id);
    entity_get_controller('edoweb_basic')->clearCache($entity->remote_id);
    drupal_set_message(t('Parent updated'));
  } else {
    drupal_set_message(t('Failed to update parent'), 'error');
  }
}

function edoweb_basic_structure_parent_update($form, &$form_state, $parent_id) {
  $form = array(
    '#method' => 'post',
    '#tree' => TRUE,
  );
  $form['parent_id'] = array(
    '#type' => 'hidden',
    '#value' => $parent_id,
  );
  $form['operation'] = array(
    '#type' => 'submit',
    '#name' => "op[$parent_id]",
    '#value' => t('Set as Parent'),
    '#submit' => array('edoweb_basic_structure_parent_update_submit'),
  );
  return $form;
}

function edoweb_forms($form_id, $args) {
  $forms = array();
  if ('edoweb_basic_structure_parent_update' == substr($form_id, 0, 36)) {
    $forms[$form_id]['callback'] = 'edoweb_basic_structure_parent_update';
  }
  return $forms;
}

/**
 * Provides a wrapper on the edit form to add a new file to an entity.
 */
function edoweb_basic_children($entity, $bundle_types = array()) {

  $content = array();

  // Children
  $content['child'] = array(
    '#type' => 'fieldset',
    '#title' => 'Children',
  );

  // Add children
  if (user_access('create edoweb_basic entities')) {
    // Fetch and link to add possible child bundles
    $field_info_instance = field_info_instance(
      'edoweb_basic', 'field_edoweb_struct_child', $entity->bundle_type
    );
    $child_bundles = $field_info_instance['settings']['handler_settings']['target_bundles'];
    if ($child_bundles) foreach ($child_bundles as $child_bundle) {
      $child_bundle_label = edoweb_basic_bundle_name($child_bundle);
      $content['child']['add'][] = array(
        '#type' => 'item',
        '#markup' => l(
          t("Add $child_bundle_label"),
          "resource/{$entity->identifier()}/children/add/$child_bundle"
        ),
      );
    }
  }

  // List children
  $child_query = new EntityFieldQuery();
  $child_query->addTag('elasticsearch');
  $child_query->entityCondition(
    'entity_type', 'edoweb_basic'
  );
  $child_query->fieldCondition(
    'field_edoweb_struct_parent', 'value', $entity->remote_id
  );
  $content['child']['child_list'] = edoweb_basic_search_entities(
    $child_query
  );

  _edoweb_build_breadcrumb($entity);
  return $content;

}

/**
 * Provides a form to administrate entities.
 */
function edoweb_basic_admin($form, &$form_state, $entity) {

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['actions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Actions'),
    '#weight' => 5,
  );

  $form['actions']['reload'] = array(
    '#type' => 'submit',
    '#value' => t('Reload'),
    '#submit' => array('edoweb_basic_admin_reload'),
    '#weight' => 100,
  );

  $entity_is_managable = false;
  $namespace = variable_get('edoweb_api_namespace');
  if ("$namespace:" === substr($entity->identifier(), 0, strlen($namespace) + 1)) {
    $entity_is_managable = true;
  }

  if ($entity_is_managable) {
    $api = new EdowebAPIClient();
    $has_urn = field_get_items('edoweb_basic', $entity, 'field_edoweb_urn') ? TRUE : FALSE;
    if (!$has_urn) {
      $form['actions']['urn'] = array(
        '#type' => 'submit',
        '#value' => t('Add URN'),
        '#submit' => array('edoweb_basic_admin_add_urn'),
        '#weight' => 50,
      );
    }
    $form['actions']['index'] = array(
      '#type' => 'submit',
      '#value' => t('Index'),
      '#submit' => array('edoweb_basic_admin_index'),
      '#weight' => 50,
    );
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('edoweb_basic_admin_delete'),
      '#weight' => 200,
    );
    $form['transformers'] = array(
      '#type' => 'fieldset',
      '#title' => t('Transformers'),
      '#weight' => 5,
    );
    $transformers = $api->getTransformers($entity);
    $form['transformers']['transformers'] = array(
      '#type' => 'checkboxes',
      '#options' => array(
        'epicur' => t('Register Urn'),
        'aleph' => t('Copy to Catalog'),
        'oaidc' => t('Support OAI-PMH'),
        'pdfbox' => t('Allow Fulltext Search'),
        'pdfa' => t('Prepare for Long Term Preservation'),
      ),
      '#default_value' => $transformers,
      '#title' => t('Please choose the transformers to apply.'),
    );

    foreach ($transformers as $transformer) {
      $label = $form['transformers']['transformers']['#options'][$transformer];
      $edoweb_api_host = variable_get('edoweb_api_host');
      $api_link = l(
        $label,
        "http://{$edoweb_api_host}/resource/{$entity->remote_id}.$transformer",
        array('attributes' => array('target'=>'_blank'))
      );
      $form['transformers']['transformers']['#options'][$transformer] = $api_link;
    }

    $form['transformers']['apply'] = array(
      '#type' => 'submit',
      '#value' => t('Apply'),
      '#submit' => array('edoweb_basic_admin_apply_transformers'),
      '#weight' => 200,
    );
  }

  _edoweb_build_breadcrumb($entity);
  return $form;
}

/**
 * Form index handler.
 *
 */
function edoweb_basic_admin_index( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $api = new EdowebAPIClient();
  if ($api->index($entity)) {
    drupal_set_message(t('The entity %id has been indexed.',
      array('%id' => $entity->remote_id))
    );
  } else {
    drupal_set_message(t('Failed to index entity %id.',
      array('%id' => $entity->remote_id)), 'error'
    );
  }
  $form_state['redirect'] = 'resource/' . $entity->remote_id;
}

/**
 * Form reload handler.
 *
 */
function edoweb_basic_admin_reload( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  entity_get_controller('edoweb_basic')->clearCache($entity->remote_id);
  $api = new EdowebAPIClient();
  $api->importEntity($entity->remote_id);
  drupal_set_message(t('The entity %id has been reloaded.',
    array('%id' => $entity->remote_id))
  );
  $form_state['redirect'] = 'resource/' . $entity->remote_id;
}

/**
 * Form deletion handler.
 *
 * @TODO: Confirm deletion
 */
function edoweb_basic_admin_delete( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  edoweb_basic_delete($entity);
  drupal_set_message(t('The entity %id has been deleted',
    array('%id' => $entity->remote_id))
  );
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  $parent_id = '';
  if (FALSE !== $parents) {
    foreach($parents as $parent) {
      $parent_id = $parent['value'];
    }
  }
  $form_state['redirect'] = "resource/$parent_id";
}

/**
 * Form transformers handler.
 *
 */
function edoweb_basic_admin_apply_transformers( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $transformers = array_keys(array_filter($form_state['values']['transformers']));
  $api = new EdowebAPIClient();
  if ($api->saveResource($entity, $transformers)) {
    drupal_set_message(t('Transformers applied'));
  } else {
    drupal_set_message(t('Failed to apply transformers'), 'error');
  }
}

/**
 * Form add URN handler.
 *
 */
function edoweb_basic_admin_add_urn( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $api = new EdowebAPIClient();
  if ($api->addURN($entity)) {
    entity_get_controller('edoweb_basic')->clearCache($entity->remote_id);
    drupal_set_message(t('URN added'));
  } else {
    drupal_set_message(t('Failed to add URN'), 'error');
  }
}

/**
 * Provides a form to import entities from linked data.
 */
function edoweb_basic_import($bundle_type) {
  $entity = entity_get_controller('edoweb_basic')->create(
    array('bundle_type' => $bundle_type)
  );
  return drupal_get_form('edoweb_basic_import_form', $entity);
}

function edoweb_basic_import_form($form, &$form_state, $entity) {
  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  $form['resource_id'] = array(
    '#type' => 'textfield',
    '#weight' => 50,
    '#description' => t('Enter the HTTP-URI of the Linked Data resource you want to import.'),
  );
  $form['base_url'] = array(
    '#title' => 'ID Typ',
    '#type' => 'select',
    '#weight' => 75,
    '#options' => array(
      'http://lobid.org/resource/%s' => 'HT-Nummer oder ZDB-ID',
      '%s' => 'Linked Data URI',
    ),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    '#submit' => array('edoweb_basic_import_submit'),
    '#weight' => 100,
  );
  return $form;
}

function edoweb_basic_import_submit(&$form, &$form_state) {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = $form_state['values']['basic_entity'];
  $resource_id = $form['resource_id']['#value'];
  $base_url = $form['base_url']['#value'];
  $resource_uri = sprintf($base_url, $resource_id);
  drupal_goto(
    "resource/add/{$entity->bundle_type}",
    array('query' => array('source' => urlencode($resource_uri)))
  );
}

/**
* Create and display the bulk import form.
*/
function edoweb_bulk_import_form($form, &$form_state) {

  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/bulk_import.js'
  );

  $form['bulk_import'] = array(
    '#type' => 'fieldset',
    '#title' => 'Import all entities from API',
  );

  // Submit button
  $form['bulk_import']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Form function to create an edoweb_basic entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function edoweb_basic_form($form, &$form_state, $entity) {

  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/edoweb.js'
  );

  $form['#action'] = base_path() . current_path();

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('edoweb_basic', $entity, $form, $form_state);

  $instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );

  foreach ($instances_info as $field_name => $instance_info) {
    $field_info = field_info_field($field_name);
    $is_structural_field =
      isset($field_info['settings']['metadata_type'])
      && $field_info['settings']['metadata_type'] == 'structural';
    $is_readonly_field =
      isset($field_info['settings']['read_only'])
      && $field_info['settings']['metadata_type'] == TRUE;
    // Remove any structural fields from the form
    // because they will be added via a separate form
    if ($is_structural_field) {
      unset($form[$field_name]);
    }
    // Set fields holding machine-generated data to read-only
    if ($is_readonly_field) {
      $form[$field_name]['und'][0]['value']['#attributes']['readonly'] = 'readonly';
      $form_state['values'][$field_name]['und'][0]['value'] =
        isset($form[$field_name]['und'][0]['value']['#default_value'])
          ? $form[$field_name]['und'][0]['value']['#default_value']
          : "";
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#name' => 'submit',
    '#weight' => 1000,
  );
  $form['finish'] = array(
    '#type' => 'submit',
    '#value' => t('Finish'),
    '#name' => 'finish',
    '#weight' => 1000,
  );
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('edoweb_basic_edit_cancel'),
    '#weight' => 1500,
    '#limit_validation_errors' => array(),
  );

  _edoweb_build_breadcrumb($entity);
  return $form;
}


/**
 * Validation handler for edoweb_basic_add_form form.
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function edoweb_basic_form_validate($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  // Handle uploaded files by moving them from the tmp directory
  // and storing the resulting (local) URI
  if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
      && isset($_FILES['files']['error']['field_edoweb_datastream'])
      && 0 === $_FILES['files']['error']['field_edoweb_datastream']
  ) {
    $tmp_name = $_FILES['files']['tmp_name']['field_edoweb_datastream'];
    $file_name = $_FILES['files']['name']['field_edoweb_datastream'];
    $file_type = $_FILES['files']['type']['field_edoweb_datastream'];
    $file_size = $_FILES['files']['size']['field_edoweb_datastream'];
    $file_uri = file_unmanaged_move($tmp_name);
    $entity->field_edoweb_datastream[LANGUAGE_NONE][]['value'] = $file_uri;
    $entity->field_edoweb_label[LANGUAGE_NONE][]['value'] = $file_name;
    $entity->field_edoweb_filetype[LANGUAGE_NONE][]['value'] = $file_type;
    $entity->field_edoweb_filesize[LANGUAGE_NONE][]['value'] = $file_size;
    $form_state['values']['field_edoweb_datastream'][LANGUAGE_NONE][0]['value'] = $file_uri;
    $form_state['values']['field_edoweb_label'][LANGUAGE_NONE][0]['value'] = $file_name;
    $form_state['values']['field_edoweb_filetype'][LANGUAGE_NONE][0]['value'] = $file_type;
    $form_state['values']['field_edoweb_filesize'][LANGUAGE_NONE][0]['value'] = $file_size;
  } else if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
             && !isset($entity->field_edoweb_datastream[LANGUAGE_NONE][0]['value'])
  ) {
    form_set_error('field_edoweb_datastream', t('File is required.'));
  }
  field_attach_form_validate('edoweb_basic', $entity, $form, $form_state);
}

/**
 * Form submit handler: submits basic_add_form information
 */
function edoweb_basic_form_submit($form, &$form_state) {

  // Set field data from form
  $entity = $form_state['values']['basic_entity'];
  field_attach_submit('edoweb_basic', $entity, $form, $form_state);

  // Save the entity
  $entity = edoweb_basic_save($entity);

  // Reset cache to force reload of structural metadata from API
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  if (FALSE !== $parents) {
    foreach($parents as $parent) {
      entity_get_controller('edoweb_basic')->clearCache($parent['value']);
    }
  }

  if ($form_state['triggering_element']['#name'] == 'finish') {
    $form_state['redirect'] = "resource/{$entity->remote_id}";
  } else if ($form_state['triggering_element']['#name'] == 'save') {
    $form_state['rebuild'] = TRUE;
  }
}

/**
 * Form cancel handler.
 *
 */
function edoweb_basic_edit_cancel($form , &$form_state) {
  $entity = $form['basic_entity']['#value'];
  if (property_exists($entity, 'remote_id')) {
    $form_state['redirect'] = "resource/{$entity->remote_id}";
  } else {
    $form_state['redirect'] = 'resource';
  }
}

/**
 * We save the entity by calling the controller.
 */
function edoweb_basic_save(&$entity) {
  return entity_get_controller('edoweb_basic')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function edoweb_basic_delete($entity) {
  entity_get_controller('edoweb_basic')->delete($entity);
}

/**
 * Implements hook_rdf_mapping().
 *
 * This hook should only be used to define the RDF mapping for an entity or
 * bundle that has been defined by this module. On installation, this mapping
 * will be saved to the database. To alter anything in this mapping after module
 * installation (or to alter bundles defined in another module), the RDF CRUD
 * functions should be used.
 */
function edoweb_rdf_mapping() {

  module_load_install('edoweb');
  $bundles = _edoweb_installed_instances();

  $rdf_types = edoweb_rdf_types();
  $rdf_mappings = array();
  foreach ($bundles as $bundle_type => $field_instances) {
    $rdf_mapping = array(
      'type' => EDOWEB_ENTITY_TYPE,
      'bundle' => $bundle_type,
      'mapping' => array(
        'rdftype' => $rdf_types[$bundle_type],
      ),
    );
    foreach ($field_instances as $field_name => $field_instance) {
      $field_info = field_info_field($field_name);
      if (isset($field_info['settings']['predicates'])) {
        $rdf_mapping['mapping'][$field_name]['predicates'] =
          $field_info['settings']['predicates'];
        if ($field_info['type'] == 'edoweb_ld_reference') {
          $rdf_mapping['mapping'][$field_name]['type'] = 'rel';
        }
      }
    }
    $rdf_mappings[] = $rdf_mapping;
  }

  return $rdf_mappings;

}

function edoweb_rdf_types() {
  return array(
    'person' => array(
      'gnd:Person',
    ),
    'corporate_body' => array(
      'gnd:CorporateBody',
      'gnd:PlaceOrGeographicName',
    ),
    'subject' => array(
      'skos:Concept',
      'gnd:AuthorityResource'
    ),
    'monograph' => array(
      'bibo:Book',
      'dc:BibliographicResource',
      'bibo:Series'
    ),
    'journal' => array('bibo:Journal'),
    'volume' => array('bibo:Volume'),
    'issue' => array('bibo:Issue'),
    'article' => array('bibo:Article'),
    'file' => array('bibo:DocumentPart'),
  );
}

/*
 * Implements hook_rdf_namespaces().
 *
 * This hook should be used to define any prefixes used by this module that are
 * not already defined in core by entity_rdf_namespaces.
 *
 * http://api.drupal.org/api/drupal/modules--rdf--rdf.api.php/function/hook_rdf_namespaces/7
 */
function edoweb_rdf_namespaces() {
  $edoweb_api_host = variable_get('edoweb_api_host');
  $edoweb_api_namespace = variable_get('edoweb_api_namespace');
  return array(
    $edoweb_api_namespace => "http://$edoweb_api_host/resource/$edoweb_api_namespace:",
    'local' => "http://$edoweb_api_host/resource/local:",
    'isbd' => 'http://iflastandards.info/ns/isbd/elements/',
    'frbr' => 'http://purl.org/vocab/frbr/core#',
    'bibo' => 'http://purl.org/ontology/bibo/',
    'dce'  => 'http://purl.org/dc/elements/1.1/',
    'ore'  => 'http://www.openarchives.org/ore/terms/',
    'foaf'  => 'http://xmlns.com/foaf/0.1/',
    'umbel'  => 'http://umbel.org/umbel#',
    'lv'  => 'http://purl.org/lobid/lv#',
    'rdfs'  => 'http://www.w3.org/2000/01/rdf-schema#',
    'orca'  => 'http://geni-orca.renci.org/owl/topology.owl#',
    'dnb' => 'http://d-nb.info/gnd/',
    'gnd' => 'http://d-nb.info/standards/elementset/gnd#',
    'lr' => 'http://lobid.org/resource/',
    'skos' => 'http://www.w3.org/2004/02/skos/core#',
    'ddc' => 'http://dewey.info/class/',
    'regal' => 'http://hbz-nrw.de/regal#',
    'rdvocab' => 'http://rdvocab.info/Elements/',
    'file' => 'http://downlode.org/Code/RDF/File_Properties/schema#',
    'marcrel' => 'http://id.loc.gov/vocabulary/relators/',
    'rpb' => 'http://purl.org/lobid/rpb#',
  );
}

/**
 * Implements hook_help().
 */
function edoweb_help($path, $arg) {
  //switch ($path) {
  //  case 'edoweb/resource':
  //    return "<p>" . t(
  //      'This Module implements Edoweb functionality'
  //    ) . "</p>";
  //}
}

/**
 * Implements hook_file_load().
 */
function edoweb_file_load($files) {
  //drupal_set_message(print_r($files, TRUE));
}

/**
 * Implements hook_file_insert().
 */
function edoweb_file_insert($files) {
  //drupal_set_message(print_r($files, TRUE));
}

function _edoweb_http_request($request_url, $http_options) {

  $http_response = drupal_http_request($request_url, $http_options);

  // FIXME: drupal_http_request does not follow 303s
  if ((303 == $http_response->code) || (307 == $http_response->code)) {
    $redirect_url = $http_response->headers['location'];
    // Fix for relative redirect URLs
    if ("/" == substr($redirect_url, 0, 1)) {
      $parsed_url = parse_url($request_url);
      $redirect_url = "{$parsed_url['scheme']}://{$parsed_url['host']}$redirect_url";
    }
    $request_url = $redirect_url;
    $http_response = drupal_http_request($request_url, $http_options);
  }

  // Display response in UI
  if (1 == variable_get('edoweb_api_debug')) {
    $status_type = 'error';
    switch ($http_response->code[0]) {
      case '2':
        $status_type = 'status';
        break;
      case '5':
        $status_type = 'warning';
        break;
    }
    drupal_set_message(
      sprintf(
        'API call responded with HTTP %s.<pre>{%s}</pre>',
        $http_response->code,
        htmlentities(print_r($http_response, TRUE))
      ),
      $status_type
    );
  }

  return $http_response;
}

function _edoweb_resource_list() {
  $edoweb_api_host = variable_get('edoweb_api_host');
  $edoweb_api_user = variable_get('edoweb_api_user');
  $edoweb_api_pass = variable_get('edoweb_api_password');
  $namespace = variable_get('edoweb_api_namespace');
  $from = isset($_GET['from']) ? $_GET['from'] : 0;
  $source = 'es';
  $until = $from + 10;
  // Build resource list url
  $http_url = sprintf(
    'http://%s:%s@%s/resource?getListingFrom=%s&from=%s&until=%s&namespace=%s',
    $edoweb_api_user,
    $edoweb_api_pass,
    $edoweb_api_host,
    $source,
    $from,
    $until,
    $namespace
  );

  // Fetch resource list
  $http_options = array(
    'method' => 'GET',
    'headers' => array('Accept' => 'application/json'),
  );
  $http_response = _edoweb_http_request($http_url, $http_options);
  if ((200 != $http_response->code) || !isset($http_response->data)) {
    watchdog('edoweb_storage', 'Unable to fetch resource listing from @api.',
      array(
        '@api' => variable_get('edoweb_api_host'),
      )
    );
    drupal_json_output(array());
    return;
  }

  drupal_json_output(json_decode($http_response->data)->list);
}

function _edoweb_autocomplete($bundle_name, $field_name) {

  $term = $_GET['term'];
  $entities = _edoweb_lookup($bundle_name, $field_name, $term);
  $matches = array();
  foreach ($entities as $entity) {
    $matches[] = array(
      'value' => $entity->identifier(),
      'label' => edoweb_basic_raw_title($entity),
    );
  }
  drupal_json_output($matches);
}

function _edoweb_lookup($bundle_name, $field_name, $term, $page = null) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'edoweb_basic');
  $query->addMetaData('term', $term);

  // Overwrite page query parameter
  if (!is_null($page)) {
    $_GET['page'] = $page;
  }

  $instance_definition = field_info_instance(
    EDOWEB_ENTITY_TYPE, $field_name, $bundle_name
  );
  $field_definition = field_info_field($field_name);

  $endpoint = isset($field_definition['settings']['endpoint'])
    ? $field_definition['settings']['endpoint']
    : false;
  $parameter = isset($field_definition['settings']['parameter'])
    ? $field_definition['settings']['parameter']
    : false;

  if ($endpoint && $parameter) {
    $query->addTag('lobid');
    $query->addMetaData('endpoint', $endpoint);
    $query->addMetaData('parameter', $parameter);
  } else {
    $query->addTag('elasticsearch');
  }

  $target_bundles = isset($instance_definition['settings']['handler_settings']['target_bundles'])
    ? array_values($instance_definition['settings']['handler_settings']['target_bundles'])
    : array_values($field_definition['settings']['handler_settings']['target_bundles']);

  $query->entityCondition('bundle', $target_bundles);

  $result = $query->execute();
  if (!$result or !array_key_exists('edoweb_basic', $result)) {
    $entities = array();
  } else {
    $entities = $result['edoweb_basic'];
  }
  return $entities;
}

function _edoweb_field_has_value_type($entity, $field_name, $bundle_type) {
  $values = field_get_items('edoweb_basic', $entity, $field_name);
  if (FALSE === $values) return FALSE;
  $field_has_value_type = FALSE;
  foreach ($values as $value) {
    $ref_entity = edoweb_basic_load($value['value']);
    if ($ref_entity->bundle_type == $bundle_type) {
      $field_has_value_type = TRUE;
      break;
    }
  }
  return $field_has_value_type;
}

function _edoweb_field_access($entity, $fields = array(), $permissions = null) {
  // Check that the entity has at least one of the provided
  // fields and that the user has the proper permission.
  $field_instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );
  $entity_has_field = FALSE;
  foreach ($field_instances_info as $field_name => $instance_settings) {
    if (in_array($field_name, $fields)) {
      $entity_has_field = TRUE;
      break;
    }
  }
  if (isset($permission)) {
    return $entity_has_field && user_access($permissions);
  } else {
    return $entity_has_field;
  }
}

function _edoweb_is_editable_entity($entity, $permissions = null) {
  $namespace = variable_get('edoweb_api_namespace');
  if ("$namespace:" === substr($entity->identifier(), 0, strlen($namespace) + 1)) {
    $entity_is_editable = TRUE;
  } else {
    $entity_is_editable = FALSE;
  }
  if (isset($permissions)) {
    return $entity_is_editable && user_access($permissions);
  } else {
    return $entity_is_editable;
  }
}

function _edoweb_available_languages() {
  $languages = include drupal_realpath(file_default_scheme() . '://') .  '/available_languages.inc';
  return $languages;
}



function _update_edoweb_installed_fields($updated_fields = null) {

  module_load_install('edoweb');
  $installed_fields = _edoweb_installed_fields();

  // Update all fields by default
  if (is_null($updated_fields)) {
    $updated_fields = array_keys($installed_fields);
  }

  foreach ($updated_fields as $field_name) {
    $field_definition = $installed_fields[$field_name];
    $field_definition['field_name'] = $field_name;
    $installed_field = field_info_field($field_name);
    if (is_null($installed_field)) {
      $field_definition['storage'] = array(
        'type' => 'edoweb_storage',
      );
      field_create_field($field_definition);
      drupal_set_message("Created field $field_name.");
    } else if($installed_field['type'] != $field_definition['type']) {
      field_delete_field($field_name);
      field_purge_batch(10);
      $field_definition['storage'] = array(
        'type' => 'edoweb_storage',
      );
      field_create_field($field_definition);
      drupal_set_message("Recreated field $field_name.");
    } else {
      field_update_field($field_definition);
      drupal_set_message("Updated field $field_name.");
    }
  }

}

/*
 * Reload instance definitions from edoweb.install
 * @param $updated_instances
 *   array(
 *     'updated_bundle' => array(
 *       field_name_1, field_name_2, ...
 *     )
 *   )
 */
function _update_edoweb_installed_instances($updated_instances = null) {

  module_load_install('edoweb');
  $installed_instances = _edoweb_installed_instances();

  // Update all instances by default
  if (is_null($updated_instances)) {
    $updated_instances = array();
    foreach ($installed_instances as $bundle_type => $installed_fields) {
      foreach (array_keys($installed_fields) as $field_name) {
        $updated_instances[$bundle_type][] = $field_name;
      }
    }
  }

  foreach ($updated_instances as $bundle_type => $field_names) {
    foreach ($field_names as $field_name) {
      $field_instance = $installed_instances[$bundle_type][$field_name];
      $field_instance['field_name'] = $field_name;
      $field_instance['entity_type'] = 'edoweb_basic';
      $field_instance['bundle'] = $bundle_type;
      $widget_weight = array_search(
        $field_name, array_keys($installed_instances[$bundle_type])
      );
      if (FALSE !== $widget_weight) {
        $field_instance['widget']['weight'] = $widget_weight;
        drupal_set_message("Setting widget weight for $field_name in
        bundle $bundle_type to $widget_weight");
      }
      $defaults = _edoweb_field_instance_defaults($field_name);
      $field_instance['label'] = array_key_exists('label', $defaults)
        ? $defaults['label']
        : null;
      $field_instance['description'] = array_key_exists('description', $defaults)
        ? $defaults['description']
        : null;
      $field_instance['default_value'] = array_key_exists('default_value', $defaults)
        ? $defaults['default_value']
        : null;
      $installed_instance = field_info_instance(
        EDOWEB_ENTITY_TYPE, $field_name, $bundle_type
      );
      if (is_null($installed_instance)) {
        field_create_instance($field_instance);
        drupal_set_message(
          "Created instance for field $field_name in bundle $bundle_type."
        );
      } else {
        field_update_instance($field_instance);
        drupal_set_message(
          "Updated instance for field $field_name in bundle $bundle_type."
        );
      }
    }
  }

}

function _update_rdf_mapping($updated_mappings = null) {

  module_load_install('edoweb');
  $installed_fields = _edoweb_installed_fields();

  // Update mappings for all fields by default
  if (is_null($updated_mappings)) {
    $updated_mappings = array_keys($installed_fields);
  }

  // Add RDF type
  $updated_mappings[] = 'rdftype';

  $rdf_mappings = edoweb_rdf_mapping();
  foreach ($rdf_mappings as $rdf_mapping) {
    foreach (array_keys($rdf_mapping['mapping']) as $field_name) {
      if (!in_array($field_name, $updated_mappings)) {
        unset($rdf_mapping['mapping'][$field_name]);
      }
    }
    rdf_mapping_save($rdf_mapping);
    drupal_set_message(
      'Updated RDF mappings for '
      . implode(', ', array_keys($rdf_mapping['mapping']))
    );
  }

}

/**
 * Fix RDF mapping of field_edoweb_urn
 */
function edoweb_update_7100() {
  $rdf_mapping = array(
    'type' => EDOWEB_ENTITY_TYPE,
    'bundle' => RDF_DEFAULT_BUNDLE,
    'mapping' => array(
      'field_edoweb_urn' => array(
        'predicates' => array('orca:hasURN'),
      ),
    ),
  );
  rdf_mapping_save($rdf_mapping);
}

/**
 * Update definitions of linked data fields
 */
function edoweb_update_7101() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_parallel',
  );
  module_load_install('edoweb');
  $field_definitions = _edoweb_installed_fields();
  foreach ($updated_fields as $updated_field) {
    $field_definition = array();
    $field_definition['settings']['label_properties'] =
      $field_definitions[$updated_field]['settings']['label_properties'];
    $field_definition['field_name'] = $updated_field;
    field_update_field($field_definition);
  }
}

/**
 * Add URN field instances to volume, issue, article and file bundles
 */
function edoweb_update_7102() {
  $added_instances = array(
    'volume' => array('field_edoweb_urn'),
    'issue' => array('field_edoweb_urn'),
    'article' => array('field_edoweb_urn'),
    'file' => array('field_edoweb_urn'),
  );
  _update_edoweb_installed_instances($added_instances);
}

/**
 * Remove superfluous fields
 */
function edoweb_update_7103() {
  field_delete_field('field_edoweb_creator_new');
  field_delete_field('field_edoweb_contributor_new');
  field_delete_field('field_edoweb_identifier');
  field_purge_batch(10);
}

/**
 * Add user id column
 */
function edoweb_update_7104() {
  $uid_column = array(
    'description' => 'The {users}.uid that created this entity.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('edoweb_basic', 'uid', $uid_column);
}

/**
 * Update fields, field instances and RDF mappings
 */
function edoweb_update_7105() {
  cache_clear_all('field:edoweb_basic:*', 'cache_field', TRUE);
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
  _update_rdf_mapping();
}

/**
 * Update RDF mapping for field_gnd_name
 */
function edoweb_update_7106() {
  _update_edoweb_installed_fields(
    array('field_gnd_name')
  );
  _update_edoweb_installed_instances(
    array('subject' => array('field_gnd_name'))
  );
  _update_rdf_mapping();
}

/**
 * Update field definitions
 */
function edoweb_update_7107() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
    'field_edoweb_parallel',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Update RDF mappings, add fields for alternative and short title
 */
function edoweb_update_7108() {
  _update_edoweb_installed_fields();
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_title_alternative',
      'field_edoweb_title_short',
    ),
    'journal' => array(
      'field_edoweb_title_alternative',
      'field_edoweb_title_short',
    ),
    'corporate_body' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Configure inverse fields
 */
function edoweb_update_7109() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Configure field groups
 */
function edoweb_update_7110() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
    'field_edoweb_parallel',
    'field_edoweb_parent',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Add extensive list of MARC relator fields
 */
function edoweb_update_7111() {
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
  _update_rdf_mapping();
}

/**
 * Update title fields to text_long, apply field weights
 */
function edoweb_update_7112() {
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
}

/**
 * Ungroup parent, parallel and subject fields
 */
function edoweb_update_7113() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_parallel',
    'field_edoweb_subject',
  );
  foreach ($updated_fields as $updated_field) {
    $field_info = field_info_field($updated_field);
    $field_info['settings']['field_group'] = null;
    field_update_field($field_info);
  }
}
