<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Implements the basic functionality required to create and display an entity.
 */

require_once dirname(__FILE__) . '/lib/LibRDF/LibRDF/LibRDF.php';
require_once dirname(__FILE__) . '/lib/php-json-ld/jsonld.php';

/**
 * Implements hook_init().
 */
function edoweb_init() {
  drupal_add_library('system', 'ui.dialog');
  drupal_add_library('system', 'ui.sortable');
  drupal_add_library('system', 'ui.datepicker');
  drupal_add_library('system', 'drupal.collapse');
  global $user;
  $action_access = ((in_array('edoweb_backend_admin', $user->roles)
                    || in_array('edoweb_backend_user', $user->roles)));
  drupal_add_js(array('actionAccess' => $action_access), 'setting');

  $bundle_infos = field_info_instances(EDOWEB_ENTITY_TYPE);
  $instances = array();
  foreach ($bundle_infos as $bundle => $bundle_info) {
    foreach ($bundle_info as $field_name => $instance) {
      // Load field settings.
      $field = field_info_field($field_name);
      if (isset($field['cardinality'])) {
        $instance['settings']['cardinality'] = $field['cardinality'];
      }
      $instance['settings'] += $field['settings'];
      $instances[$bundle][$field_name] = array(
        'instance' => $instance,
      );
    }
  }
  $settings = array(
    'fields' => $instances,
    'namespaces' => edoweb_rdf_namespaces(),
  );
  drupal_add_js(array('edoweb' => $settings), 'setting');
}

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with multiple bundles
 * and without revision support.
 */
function edoweb_entity_info() {
  $info['edoweb_basic'] = array(

    // A human readable label to identify our entity.
    'label' => t('Edoweb Basic Entity'),

    // Callback to label entities
    'label callback' => 'entity_class_label',

    // The class for our Entity
    'entity class' => 'EdowebBasicEntity',

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'EdowebBasicController',

    // No base table as we are storing only remote
    'base table' => null,

    // Returns the uri elements of an entity
    'uri callback' => 'entity_class_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used
    // for key functions
    'entity keys' => array(
      // The 'id' (remote_id here) is the unique id.
      'id' => 'remote_id',
      // Bundle will be determined by the 'bundle_type' field
      'bundle' => 'bundle_type'
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'monograph' => array(
        'label' => t('Monograph'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/monograph/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'journal' => array(
        'label' => t('Journal'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/journal/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'volume' => array(
        'label' => t('Volume'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/volume/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'issue' => array(
        'label' => t('Issue'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/issue/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'article' => array(
        'label' => t('Article'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/article/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'file' => array(
        'label' => t('File'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/file/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'person' => array(
        'label' => t('Person'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/person/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'subject' => array(
        'label' => t('Schlagwort'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/subject/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'corporate_body' => array(
        'label' => t('KÃ¶rperschaft'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/corporate_body/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'event' => array(
        'label' => t('Veranstaltung'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/event/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'family' => array(
        'label' => t('Familie'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/family/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'work' => array(
        'label' => t('Werk'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/work/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'place' => array(
        'label' => t('Ort'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/place/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'collection' => array(
        'label' => t('Sammlung'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/collection/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'authority_resource' => array(
        'label' => t('Authority Resource'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/authority_resource/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function edoweb_entity_property_info() {
  $property_info = array();
  $properties = &$property_info[EDOWEB_ENTITY_TYPE]['properties'];
  $properties['bundle_type'] = array(
    'label' => t('The bundle of the Entity'),
    'type' => 'text',
  );
  $properties['created'] = array(
    'label' => t('The creation date of the Entity'),
    'type' => 'date',
  );
  $properties['updated'] = array(
    'label' => t('The update date of the Entity'),
    'type' => 'text',
  );
  $properties['uid'] = array(
    'label' => t('The user ID of the creator of the Entity'),
    'type' => 'integer',
  );
  $properties['remote_id'] = array(
    'label' => t('The ID of the Entity, a URI'),
    'type' => 'uri',
  );
  $properties['access_md'] = array(
    'label' => t('The metadata access scheme of the Entity'),
    'type' => 'text',
  );
  $properties['data_md'] = array(
    'label' => t('The data access scheme of the Entity'),
    'type' => 'text',
  );
  return $property_info;
}

/**
 * Fetch a basic object.
 *
 * This function ends up being a shim between the menu system and
 * edoweb_basic_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: resource/%edoweb_basic in
 * hook_menu() tells Drupal to call edoweb_basic_load().
 *
 * @param $remote_id
 *   Integer specifying the basic entity uri.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see edoweb_basic_load_multiple()
 * @see edoweb_menu()
 */
function edoweb_basic_load($remote_id, $reset = FALSE) {
  $remote_ids = $remote_id ? array($remote_id) : array();
  $basic = edoweb_basic_load_multiple($remote_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function edoweb_basic_load_multiple($remote_ids = FALSE, $conditions = array(), $reset = FALSE) {
  // TODO: Determine whether to $reset by checking HTTP header
  // of resource in Edoweb API
  return entity_load('edoweb_basic', $remote_ids, $conditions, $reset);
}

/**
 * Implements hook_menu().
 */
function edoweb_menu() {

  // Configuration section for Edoweb modules
  $items['edoweb/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configuration options for the Edoweb modules',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer edoweb configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Paged search result listing for AJAX retrieval
  $items['edoweb/search'] = array(
    'page callback' => '_edoweb_search',
    'access arguments' => array('view any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );

  // Add new resources
  $items['resource/add/%'] = array(
    'title callback' => 'edoweb_basic_bundle_name',
    'title arguments' => array(2),
    'page callback' => 'edoweb_basic_add',
    'page arguments' => array(2),
    'access arguments' => array('create edoweb_basic entities'),
    'type' => MENU_CALLBACK,
  );

  // Resource landing page, list entities
  $items['resource'] = array(
    'title' => 'Edoweb',
    'page callback' => 'edoweb_info_page',
    'page arguments' => array('0'),
    'access arguments' => array('create edoweb_basic entities'),
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  $items['resource/%edoweb_basic'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array(EDOWEB_ENTITY_TYPE, 1),
    'page callback' => 'edoweb_basic_view',
    'page arguments' => array(1),
    'access callback' => '_edoweb_has_md_access',
    'access arguments' => array(1, 'view any edoweb_basic entity'),
  );

  // 'View' tab for an individual entity page.
  $items['resource/%edoweb_basic/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['resource/%edoweb_basic/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_form', 1),
    'access callback' => '_edoweb_is_editable_entity',
    'access arguments' => array(1, 'edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Admin' tab for an individual entity page.
  $items['resource/%edoweb_basic/admin'] = array(
    'title' => 'Admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_admin', 1),
    'access arguments' => array('edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Access' tab for an individual entity page.
  $items['resource/%edoweb_basic/access'] = array(
    'title' => 'Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_access_form', 1),
    'access callback' => '_edoweb_is_editable_entity',
    'access arguments' => array(1, 'edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Data' callback for entities' datastreams
  $items['resource/%edoweb_basic/data'] = array(
    'page callback' => 'edoweb_basic_data',
    'page arguments' => array(1),
    'access callback' => '_edoweb_field_access',
    'access arguments' => array(1, array('field_edoweb_datastream')),
    'type' => MENU_CALLBACK,
  );

  // 'Structure' callback for entities.
  $items['resource/%edoweb_basic/structure'] = array(
    'page callback' => 'edoweb_basic_structure',
    'page arguments' => array(1),
    'access callback' => '_edoweb_field_access',
    'access arguments' => array(1, array('field_edoweb_struct_parent')),
    'type' => MENU_CALLBACK,
  );

  // 'Add Child' for entities that can have children.
  $items['resource/%edoweb_basic/children/add/%'] = array(
    'title callback' => 'edoweb_basic_bundle_name',
    'title arguments' => array(4),
    'page callback' => 'edoweb_basic_add',
    'page arguments' => array(4, 1),
    'access callback' => '_edoweb_field_access',
    'access arguments' => array(1, array('field_edoweb_struct_child'), 'create edoweb_basic entities'),
    'type' => MENU_CALLBACK,
  );

  // GND Autocompletion
  $items['edoweb/autocomplete'] = array(
    'page callback' => '_edoweb_autocomplete',
    'access arguments' => array('edit any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Basic information for the page.
 */
function edoweb_info_page() {
  drupal_set_title('');
  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/edoweb.js'
  );
  $query = new EntityFieldQuery();
  $query->addTag('elasticsearch');
  $query->entityCondition('entity_type', 'edoweb_basic');
  $query->entityCondition('bundle', array(
    'monograph', 'journal', 'volume', 'issue', 'article', 'file'
  ));
  $content['resource_list'] = edoweb_basic_search_entities(
    $query, TRUE, array(), TRUE, TRUE
  );

  return $content;
}

/**
 * Implements hook_permission().
 */
function edoweb_permission() {
  $permissions = array(
    'administer edoweb_basic entities' =>  array(
      'title' => t('Administer Edoweb Basic entities'),
    ),
    'view any edoweb_basic entity' => array(
      'title' => t('View any Edoweb Basic entity'),
    ),
    'edit any edoweb_basic entity' => array(
      'title' => t('Edit any Edoweb Basic entity'),
    ),
    'create edoweb_basic entities' => array(
      'title' => t('Create Edoweb Basic Entities'),
    ),
    'administer edoweb configuration' => array(
      'title' => t('Administer Edoweb Configuration'),
    ),
  );
  return $permissions;
}

function _edoweb_search($bundle_name = null, $field_name = null) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'edoweb_basic');
  $endpoint = null;
  $parameter = null;

  if ($bundle_name && $field_name) {
    $instance_definition = field_info_instance(
      EDOWEB_ENTITY_TYPE, $field_name, $bundle_name
    );
    $field_definition = field_info_field($field_name);

    $endpoint = isset($field_definition['settings']['endpoint'])
      ? $field_definition['settings']['endpoint']
      : false;
    $parameter = isset($field_definition['settings']['parameter'])
      ? $field_definition['settings']['parameter']
      : false;

    $target_bundles = isset($instance_definition['settings']['handler_settings']['target_bundles'])
      ? array_values($instance_definition['settings']['handler_settings']['target_bundles'])
      : array_values($field_definition['settings']['handler_settings']['target_bundles']);

    $query->entityCondition('bundle', $target_bundles);
  } else if ($bundle_name) {
    $endpoint = 'resource';
    $parameter = 'name';
    $query->entityCondition('bundle', array($bundle_name));
  }

  if ($endpoint && $parameter) {
    $query->addTag('lobid');
    $query->addMetaData('endpoint', $endpoint);
    $query->addMetaData('parameter', $parameter);
    $sortable = FALSE;
  } else {
    $query->addTag('elasticsearch');
    $sortable = TRUE;
  }

  $content = edoweb_basic_search_entities($query, FALSE, array(), FALSE, TRUE, $sortable);

  die(drupal_render($content));

}

function edoweb_basic_search_entities_form($form, &$form_state, $advanced, $search_count, $query, $live_search = TRUE) {

  $form['#method'] = 'get';

  $form['query'] = array(
    '#tree' => TRUE,
  );

  $url_params = explode('&', $_SERVER['QUERY_STRING']);
  foreach ($url_params as $param) {
    if (empty($param)) continue;
    list($key, $value) = explode('=', $param);
    if ("query[$search_count][term]" == urldecode($key)
        || 'op' == $key
        || "query[$search_count][type]" == urldecode($key)
        || "query[$search_count][user]" == urldecode($key)
        ) continue;
    $form['query']['url_params'][] = array(
      '#type' => 'hidden',
      '#value' => urldecode($value),
      '#name' => urldecode($key),
    );
  }

  $form['query'][$search_count]['term'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($query['term']) ? urldecode($query['term']) : '',
    '#attributes' => array(
      'title' => t('Enter your search term here. You may use quotes to search for phrases as in "The quick brown fox", and also boolean operators as in This AND that OR those.'),
    ),
  );

  if ($live_search) {
    $form['query'][$search_count]['term']['#attributes']['class']
      = array('edoweb_live_search');
  }

  if (isset($query['target_bundles']) && isset($query['endpoint'])) {
    $options = array();
    $bundle_infos = field_info_bundles(EDOWEB_ENTITY_TYPE);
    foreach ($query['target_bundles'] as $target_bundle) {
      $bundle_info = $bundle_infos[$target_bundle];
      $options[$target_bundle] = $bundle_info['label'];
    }
    $form['query'][$search_count]['type'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#default_value' => isset($query['type']) && $query['type'] != ''
        ? $query['type']
        : current(array_keys($options)),
    );
  }

  $form['query'][$search_count]['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  if ($advanced) {
    // FIXME: Filtering by user to be done by facets
    //global $user;
    //$form['query'][$search_count]['users'] = array(
    //  '#type' => 'checkboxes',
    //  '#options' => array($user->uid => 'Only entities submitted by me'),
    //  '#default_value' =>
    //    isset($query['users']) ? array_keys($query['users']) : array(),
    //);
  }

  return $form;
}

function edoweb_basic_search_entities(
  EntityFieldQuery $efq, $advanced = FALSE, $operations = array(), $list_noterm = TRUE, $add_links = FALSE, $sortable = TRUE
) {
  static $search_count = 0;
  if (array_key_exists('query', $_GET)
      && !empty($_GET['query'])
      && array_key_exists($search_count, $_GET['query'])
  ) {
    $query = $_GET['query'][$search_count];
  } else {
    $query = array();
  }

  if (isset($efq->metaData['endpoint'])) {
    $query['endpoint'] = $efq->metaData['endpoint'];
  }

  if (isset($efq->entityConditions['bundle'])) {
    $query['target_bundles'] = $efq->entityConditions['bundle']['value'];
  }

  $content = array();
  $content['search'] = drupal_get_form(
    'edoweb_basic_search_entities_form', $advanced, $search_count, $query
  );

  unset($content['search']['form_build_id']);
  unset($content['search']['form_id']);
  unset($content['search']['form_token']);

  $parent_entity = null;
  foreach ($efq->fieldConditions as $field_condition) {
    if ($field_condition['field']['field_name'] == 'field_edoweb_struct_parent') {
      $parent_entity = $field_condition['value'];
    }
  }

  if (isset($efq->entityConditions['bundle']) && $add_links) {
    $target_bundles = $efq->entityConditions['bundle']['value'];
    $links = '';
    foreach($target_bundles as $target_bundle) {
      $url = is_null($parent_entity)
        ? "resource/add/{$target_bundle}"
        : "resource/$parent_entity/children/add/$target_bundle";
      $links .= l(
        _edoweb_map_string("Add {$target_bundle}"), $url,
        array('attributes' => array('data-bundle' => $target_bundle))
      );
    }
    $content['add'] = array(
      '#type' => 'item',
      '#markup' => $links,
    );
  }

  if (@$users = $query['users']) {
    $target_users = array_keys($users);
    $efq->propertyCondition('uid', $target_users);
  }

  if (@$type = $query['type']) {
    $efq->addMetaData('type', $type);
  }

  if (@$term = $query['term']) {
    $efq->addMetaData('term', $term);
  }

  if ($term || $list_noterm) {
    $content['results'] = edoweb_basic_list_entities($efq, $operations, $search_count, @$query['facets'], $sortable);
  }

  $search_count++;
  return $content;
}

/*
 * Returns table header
 */
function edoweb_basic_table_header($bundle_type = 'generic', $init_sort = false) {
  $columns = array();
  switch ($bundle_type) {
    case 'monograph':
    case 'journal':
    case 'volume':
    case 'issue':
    case 'article':
    case 'file':
    case 'collection':
      $columns = array(
        array(
          'data' => t('Title'),
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_title',
            'column' => 'value',
          ),
        ),
        array(
          'data' => t('HT-Nummer'),
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_identifier_ht',
            'column' => 'value',
          ),
        ),
        array(
          'data' => t('Volume'),
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_volume',
            'column' => 'value',
          ),
        ),
        array(
          'data' => t('Issued'),
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_issued',
            'column' => 'value',
          ),
        ),
        array(
          'data' => t('Download'),
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_datastream',
            'column' => 'value',
          ),
        ),
        array(
          'data' => t('Byte'),
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_filesize',
            'column' => 'value',
          ),
        ),
        array(
          'data' => t('File type'),
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_filetype',
            'column' => 'value',
          ),
        ),
      );
      break;
    case 'person':
    case 'subject':
    case 'corporate_body':
    case 'event':
    case 'work':
    case 'place':
    case 'authority_resource':
      $columns = array(
        array(
          'data' => 'Name',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_name',
            'column' => 'value',
          ),
        ),
        array(
          'data' => 'GND-ID',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_identifier',
            'column' => 'value',
          ),
        ),
        array(
          'data' => 'Geburtsdatum',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_date_of_birth',
            'column' => 'value',
          ),
        ),
        array(
          'data' => 'Todesdatum',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_date_of_death',
            'column' => 'value',
          ),
        ),
        array(
          'data' => 'GrÃ¼ndungsdatum',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_date_of_establishment',
            'column' => 'value',
          ),
        ),
        array(
          'data' => 'AuflÃ¶sungsdatum',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_date_of_termination',
            'column' => 'value',
          ),
        ),
        array(
          'data' => 'Beruf',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_profession',
            'column' => 'value',
          ),
        ),
      );
      break;
    case 'subject':
      $columns = array(
        array(
          'data' => 'Title',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_name',
            'column' => 'value',
          ),
        ),
        array(
          'data' => 'Identifier',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_gnd_identifier',
            'column' => 'value',
          ),
        ),
      );
      break;
    default:
      $columns = array(
        array(
          'data' => 'Label',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_label',
            'column' => 'value',
          ),
        ),
      );
  }

  // Add fixed columns, independant of bundle type
  array_unshift($columns, 'ID');
  $updated = array(
    'data' => t('Updated'),
    'type' => 'property',
    'specifier' => 'updated',
    'format' => '_edoweb_format_date',
    'sort' => $init_sort ? 'desc' : null,
  );
  array_push($columns, $updated);
  array_push($columns, t('Type'));
  array_push($columns, t('Operations'));

  return $columns;

}

/*
 * Returns a list of entities themed as a table.
 */
function edoweb_basic_entity_table($header, $entities, $operations = array(), $total = null) {

  $content = array(
    '#type' => 'fieldset',
    '#title' => t('Your search returned @total results', array('@total' => $total)),
    '#attributes' => array(
      'class' => array('edoweb-entity-list')
    ),
  );

  $rows = array();
  $columns = array_slice($header, 1, sizeof($header) - 3);

  foreach ($entities as $i => $entity) {

    // Render embedded operations form
    $operation_elements = '';
    foreach ($operations as $operation) {
      $operation_form = drupal_get_form(
        "{$operation}_{$i}", $entity->remote_id
      );
      $operation_elements .= drupal_render($operation_form);
    }

    $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
    $curie = $wrapper->remote_id->value();
    $row = array('data-curie' => $curie);
    $row['data'][] = l(
      $curie, _edoweb_expand_curie($curie), array(
        'attributes' => array('data-curie' => $curie)
      )
    );
    foreach ($columns as $column) {
      $property = null;
      $value = null;
      $is_ref = false;
      $list_items = array();
      if ('field' == $column['type']) {
        $property = $column['specifier']['field'];
        $field_info = field_info_field($property);
        $is_ref = ($field_info['type'] == 'edoweb_ld_reference');
      } else if ('property' == $column['type']) {
        $property = $column['specifier'];
      }
      try {
        $values = $wrapper->$property->value();
        if ($values and !is_array($values)) $values = array($values);
        if ($values) foreach ($values as $value) {
          if ('field' == $column['type']) {
            // Fixme: workaround for Drupal bug
            // https://www.drupal.org/node/1824820
            $field_value = field_view_value(
              EDOWEB_ENTITY_TYPE, $entity, $property, array('value' => $value)
            );
            $list_items[] = drupal_render($field_value);
          } else if (isset($column['format'])) {
            $list_items[] = $column['format']($value);
          } else {
            $list_items[] = $value;
          }
        }
      } catch (EntityMetadataWrapperException $e) {
        // No value for field, ignore
        //var_dump($e);
      }
      $row['data'][] = theme_item_list(array(
        'items' => $list_items,
        'title' => null,
        'type' => 'ul',
        'attributes' => array(),
      ));
    }

    $row['data'][] = sprintf(
      '<span class="entity-label-%s">%s</span>',
      $entity->bundle_type,
      edoweb_basic_bundle_name($entity->bundle_type)
    );
    $row['data'][] = $operation_elements;
    $rows[] = $row;
  }

  $content['pager_above'] = array(
    '#theme' => 'pager',
    '#weight' => 8,
  );
  // Put our entities into a themed table. See theme_table() for details.
  $content['entity_table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
    '#weight' => 9,
  );
  $content['pager_below'] = array(
    '#theme' => 'pager',
    '#weight' => 10,
  );
  return $content;
}

/**
 * Returns a render array with all edoweb_basic entities.
 *
 */
function edoweb_basic_list_entities(EntityFieldQuery $efq, $operations = array(), $search_count = 0, $active_facets = null, $sortable = TRUE) {

  // Prepare query: header for table sort
  // TODO: decide which table header to use if multiple target bundles
  // are set.
  $target_bundle = isset($efq->entityConditions['bundle']['value'])
    ? current($efq->entityConditions['bundle']['value'])
    : null;
  $header = edoweb_basic_table_header($target_bundle, !isset($efq->metaData['term']));
  if ($sortable) {
    $efq->tableSort($header);
  }

  $content = array();

  // Prepare query: apply active facets
  $content['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Facets'),
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#attributes' => array(
      'class' => array('edoweb-facets')
    ),
  );

  if ($active_facets) {
    foreach (array_keys($active_facets) as $jsonld_property) {
      $content['filters'][$jsonld_property] = array(
        '#theme' => 'item_list',
        '#attributes' => array(
          'class' => array('edoweb-facets-active'),
        ),
        '#type' => 'ul',
        '#weight' => -200,
      );
    }
    foreach ($active_facets as $jsonld_property => $facet) {
      $is_ref = in_array($jsonld_property, array('creator', 'subject'));
      foreach ($facet as $key => $value) {
        // Link to remove facet
        $params = drupal_get_query_parameters();
        unset($params['query'][$search_count]['facets'][$jsonld_property][$key]);
        if (isset($params['page'])) {
          unset($params['page']);
        }
        $item = $is_ref
          ? '<span data-curie="' .  _edoweb_compact_uri($value) . '" class="facet">' . $value .  '</span>'
          : "<span>" . _edoweb_map_string($value) . "</span>";
        $item .= l(t(' [x]'), current_path(), array('query' => $params));
        $content['filters'][$jsonld_property]['#items'][$value] = $item;
        // Add facet to query
        if ('contentType' == $jsonld_property) {
          $efq->entityCondition('bundle', array($value));
        } else {
          $field_name = _jsonld_key_to_field_name($jsonld_property);
          $efq->fieldCondition(
            $field_name, 'value', $value
          );
        }
      }
    }
  }

  // Execute query
  $result = $efq->execute();

  if (!$result or !array_key_exists('edoweb_basic', $result)) {
    $entities = array();
  } else {
    $entities = $result['edoweb_basic'];
  }

  // Available facets
  if (isset($result['facets'])) {
    // Add list of available facets
    foreach ($result['facets'] as $jsonld_property => $facet) {
      $content['filters']['facets'][$jsonld_property] = array(
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#attributes' => array(
          'class' => array('edoweb-facets-available'),
        ),
        '#title' => _edoweb_map_string($jsonld_property),
      );
      $is_ref = in_array($jsonld_property, array('creator', 'subject'));
      foreach ($facet->terms as $term) {
        // Don't add facets that are already applied to the list
        if (isset($content['filters'][$jsonld_property]['#items'][$term->term]))
          continue;
        $params = drupal_get_query_parameters();
        if (isset($params['page'])) {
          unset($params['page']);
        }
        $facet_entity_uri = $term->term;
        $facet_entity_count = $term->count;
        $params['query'][$search_count]['facets'][$jsonld_property][] = $facet_entity_uri;
        $apply_facet_link = l(
          _edoweb_map_string("$facet_entity_uri"), current_path(),
          array(
            'query' => $params,
            'attributes' => $is_ref
              ? array(
                'data-curie' => _edoweb_compact_uri($facet_entity_uri),
                'class' => array('facet')
              ) : array(),
          )
        ) . " <span>($facet_entity_count)</span>";
        $content['filters']['facets'][$jsonld_property]['#items'][] = $apply_facet_link;
      }
    }
  }

  if (!$active_facets && !isset($result['facets'])) {
    unset($content['filters']);
  }


  if (!empty($entities)) {
    $content['entity_list'] = edoweb_basic_entity_table($header, $entities, $operations, $result['hits']);
  } else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No results.'),
    );
  }
  return $content;
}

/**
 * Due to the way Drupals t() function works, variable strings must be
 * mapped to literals.
 */
function _edoweb_map_string($string) {
  switch ($string) {
    case 'creator':
      return t('creator');
    case 'subject':
      return t('subject');
    case 'issued':
      return t('issued');
    case 'contentType':
      return t('contentType');
    case 'file':
      return t('file');
    case 'monograph':
      return t('monograph');
    case 'journal':
      return t('journal');
    case 'volume':
      return t('volume');
    case 'issue':
      return t('issue');
    case 'article':
      return t('article');
    case 'Add monograph':
      return t('Add monograph');
    case 'Add journal':
      return t('Add journal');
    case 'Add volume':
      return t('Add volume');
    case 'Add issue':
      return t('Add issue');
    case 'Add article':
      return t('Add article');
    case 'Add file':
      return t('Add file');
    default:
      return $string;
  }
}

/**
 * Callback to display bundle name.
 */
function edoweb_basic_bundle_name($bundle) {
  $info = entity_get_info('edoweb_basic');
  $label = !empty($info['bundles'][$bundle]['label'])
    ? $info['bundles'][$bundle]['label']
    : 'Resource';
  return $label;
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function edoweb_basic_view($entity, $view_mode = 'default') {
  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/jquery.tablesorter.min.js'
  );
  drupal_add_js('https://rdfquery.googlecode.com/files/jquery.rdfquery.rdfa.min-1.0.js', 'external');
  drupal_add_js(drupal_get_path('module', 'edoweb') . '/jquery.url.js');
  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/edoweb_tree.js'
  );
  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/edoweb.js'
  );
  $postdata = file_get_contents("php://input");
  if ($postdata != '') {
    $url = current_path();
    $remote_id = new LibRDF_URINode(end(explode('/', $url)));
    $rdf_model = new LibRDF_Model(new LibRDF_Storage());
    $rdfa_model = new LibRDF_Model(new LibRDF_Storage());
    $rdf_parser = new LibRDF_Parser('rdfxml');
    $rdfa_model->loadStatementsFromString(
      $rdf_parser, $postdata
    );
    foreach ($rdfa_model as $stmt) {
      $rdf_model->addStatement(new LibRDF_Statement(
        $remote_id, $stmt->getPredicate(), $stmt->getObject()
      ));
    }
    echo $rdf_model;
    _edoweb_storage_entity_deserialize_rdf($entity, $rdf_model, $rdf_parser);
    edoweb_basic_save($entity);
    die;
  }

  // Our entity type, for convenience.
  $entity_type = 'edoweb_basic';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
    '#prefix' => '<div class="edoweb entity" data-entity-bundle="' .  $entity->bundle_type . '" about="' . $entity->remote_id . '">',
    '#suffix' => '</div>',
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->remote_id => $entity),
    $view_mode);

  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->remote_id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);


  // Remove any structural fields from the form because they will be
  // displayed separately
  $instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );
  foreach ($instances_info as $field_name => $instance_info) {
    $field_info = field_info_field($field_name);
    $is_structural_field =
      isset($field_info['settings']['metadata_type'])
      && $field_info['settings']['metadata_type'] == 'structural';
    if ($is_structural_field) {
      //unset($entity->content[$field_name]);
    }
  }

  // OK, Field API done, now we can set up some of our own data.

  // Find fields linking to this entity
  $inverse_query = new EntityFieldQuery();
  $inverse_query->addTag('elasticsearch');
  $inverse_query->entityCondition(
    'entity_type', 'edoweb_basic'
  );
  $fields_info = field_info_fields();
  $has_inverse = FALSE;
  foreach ($fields_info as $field_name => $field_info) {
    if (isset($field_info['settings']['inverse'])
        && in_array($entity->bundle_type, $field_info['settings']['inverse']['bundles'])) {
      $has_inverse = TRUE;
      $inverse_query->fieldCondition(
        $field_name, 'value', $entity->identifier(), null, 'or'
      );
    }
  }
  if ($has_inverse) {
    $inverse_query->entityCondition('bundle', array(
      'monograph', 'journal', 'volume', 'issue', 'article', 'file'
    ));
    $entity->content['related'] = edoweb_basic_search_entities(
      $inverse_query
    );
    $entity->content['related'] += array(
      '#weight' => 900,
      '#type' => 'fieldset',
      '#title' => 'Related resources',
    );
  }

  $entity->content['_updated'] = array(
    '#type' => 'item',
    '#markup' => '<small>Letzte Ãnderung: ' .  _edoweb_format_date($entity->updated) . '</small>',
    '#weight' => 1000,
  );

  $entity->content['remote_id'] = array(
    '#type' => 'item',
    '#markup' => '<small>' . l(
      'View source',
      _edoweb_expand_curie($entity->remote_id),
      array('attributes' => array(
        'target'=>'_blank',
        'class' => array('entity-id'),
      ))
    ) . '</small>',
    '#weight' => 1001,
  );

  if (1 == variable_get('edoweb_api_debug')) {
    $entity->content['turtle'] = array(
      '#type' => 'item',
      '#title' => t('Turtle view'),
      '#markup' => sprintf('<pre>%s</pre>', htmlentities(_edoweb_storage_entity_serialize_turtle($entity))),
      '#weight' => 100,
    );

    $entity->content['json'] = array(
      '#type' => 'item',
      '#title' => t('JSON-LD view'),
      '#markup' => sprintf('<pre>%s</pre>', htmlentities(_edoweb_storage_entity_serialize_jsonld($entity))),
      '#weight' => 100,
    );
  }

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language ;
  $langcode = $language->language ;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('edoweb_basic_view', 'entity_view'), $entity->content, $entity_type);

  _edoweb_build_breadcrumb($entity);

  // Add custom HTTP header for AJAX requests
  drupal_add_http_header('X-Edoweb-Entity', $entity->remote_id);

  // And finally return the content.
  return $entity->content;
}

function _edoweb_find_top_level_parent($entity) {
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  if (FALSE !== $parents) {
    return _edoweb_find_top_level_parent(
      edoweb_basic_load($parents[0]['value'])
    );
  }
  return $entity;
}

function _edoweb_build_tree($entity) {

  // Cache entity currently loaded in content region
  static $loaded_entity;
  if (null === $loaded_entity) {
    $loaded_entity = menu_get_object(EDOWEB_ENTITY_TYPE);
  }

  // Add current entity to tree
  $title = entity_label(EDOWEB_ENTITY_TYPE, $entity);
  $entity_url = entity_class_uri($entity);
  $entity_bundle = $entity->bundle();
  $options = array('attributes' => array('data-bundle' => $entity_bundle));
  $tree_item = array('data' => l($title, $entity_url['path'], $options));
  if ($entity == $loaded_entity) {
    $tree_item['class'] = array('active');
  }

  // Add links to insert child entities
  $instance_definition = field_info_instance(
    EDOWEB_ENTITY_TYPE, 'field_edoweb_struct_child', $entity->bundle_type
  );
  $target_bundles = isset($instance_definition['settings']['handler_settings']['target_bundles'])
    ? array_values($instance_definition['settings']['handler_settings']['target_bundles'])
    : array();
  $links = '';
  foreach($target_bundles as $target_bundle) {
    $url = "{$entity_url['path']}/children/add/$target_bundle";
    if (drupal_valid_path($url)) {
      $links .= l(
        _edoweb_map_string("Add {$target_bundle}"), $url,
        array('attributes' => array('data-target-bundle' => $target_bundle))
      );
    }
  }
  $tree_item['data'] .= " $links";

  // Add child enities to tree
  $children = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_child');
  if (FALSE !== $children) {
    $ld_client = new LinkedDataClient();
    $ld_data = $ld_client->getRDF(
      _edoweb_expand_curie("{$entity->remote_id}/parts")
    );
    foreach ($children as $child) {
      $child_entity = entity_get_controller('edoweb_basic')->load(
        array($child['value']), array(), $ld_data
      );
      $child_entity = end($child_entity);
      // Append download links for file children
      if ('file' == $child_entity->bundle_type) {
        $datastreams = field_get_items(
          'edoweb_basic', $child_entity, 'field_edoweb_datastream'
        );
        if (FALSE !== $datastreams) {
          foreach ($datastreams as $datastream) {
            if (drupal_valid_path('resource/' .  $datastream['value'])) {
              $download_link = field_view_value(
                EDOWEB_ENTITY_TYPE, $child_entity, 'field_edoweb_datastream', $datastream
              );
              $tree_item['data'] .= ' ' . drupal_render($download_link);
            }
          }
        }
      }
      $tree_item['children'][] = _edoweb_build_tree($child_entity);
    }
  }

  return $tree_item;

}

function _edoweb_build_parent_trail($entity, $trail = array()) {
  // Recursively add parents to trail
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  if (FALSE !== $parents) {
    $parent = edoweb_basic_load($parents[0]['value']);
    $trail = array_merge(
      _edoweb_build_parent_trail($parent, $trail),
      $trail
    );
  }
  $title = entity_label(EDOWEB_ENTITY_TYPE, $entity);
  $entity_url = entity_class_uri($entity);
  $attributes = array('attributes' => array(
    'class' => array("entity-label-{$entity->bundle_type}"),
  ));
  $trail[] = l($title, $entity_url['path'], $attributes);
  return $trail;
}

function _edoweb_build_breadcrumb($entity) {
  $trail = _edoweb_build_parent_trail($entity);
  array_unshift($trail, l(t('Edoweb'), 'resource'));
  drupal_set_breadcrumb($trail);
}

/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 */
function edoweb_field_extra_fields() {
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );

  // Attach extra_fields to all bundles
  $extra_fields['edoweb_basic']['monograph']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['journal']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['volume']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function edoweb_basic_add($bundle_type, $parent = NULL) {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('edoweb_basic')->create(
    array(
      'remote_id' => 'edoweb:12345',
      'bundle_type' => $bundle_type,
      'created' => time(),
      'updated' => time(),
    )
  );
  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  if (NULL !== $parent) {
    $wrapper->field_edoweb_struct_parent = $parent->remote_id;
  }
  return edoweb_basic_view($entity);
}

/**
 * Provides a wrapper on the edit form to add a new child to an entity.
 */
function edoweb_basic_structure($entity) {
  $new_parent_id = isset($_POST['parent_id']) ? $_POST['parent_id'] : FALSE;
  if (!$new_parent_id) die('Missing new parent ID');
  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  $prev_parent_id = $wrapper->field_edoweb_struct_parent->value();
  $wrapper->field_edoweb_struct_parent = $new_parent_id;
  $api = new EdowebAPIClient();
  if ($api->saveResource($entity)) {
    entity_get_controller('edoweb_basic')->clearCache($prev_parent_id);
    entity_get_controller('edoweb_basic')->clearCache($new_parent_id);
    entity_get_controller('edoweb_basic')->clearCache($entity->remote_id);
    die("Moving {$entity->remote_id} from $prev_parent_id to $new_parent_id");
  } else {
    die("Failed moving {$entity->remote_id} from $prev_parent_id to $new_parent_id");
  }
}

/**
 * Provides a form to administrate entities.
 */
function edoweb_basic_admin($form, &$form_state, $entity) {

  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/edoweb.js'
  );


  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['actions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Actions'),
    '#weight' => 5,
  );

  $form['actions']['reload'] = array(
    '#type' => 'submit',
    '#value' => t('Reload'),
    '#submit' => array('edoweb_basic_admin_reload'),
    '#weight' => 100,
  );

  $entity_is_managable = false;
  $namespace = variable_get('edoweb_api_namespace');
  if ("$namespace:" === substr($entity->identifier(), 0, strlen($namespace) + 1)) {
    $entity_is_managable = true;
  }

  if ($entity_is_managable) {
    $api = new EdowebAPIClient();
    $has_urn = field_get_items('edoweb_basic', $entity, 'field_edoweb_urn') ? TRUE : FALSE;
    if (!$has_urn) {
      $form['actions']['urn'] = array(
        '#type' => 'submit',
        '#value' => t('Add URN'),
        '#submit' => array('edoweb_basic_admin_add_urn'),
        '#weight' => 50,
      );
    }
    $form['actions']['index'] = array(
      '#type' => 'submit',
      '#value' => t('Index'),
      '#submit' => array('edoweb_basic_admin_index'),
      '#weight' => 50,
    );
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('edoweb_basic_admin_delete'),
      '#weight' => 200,
    );
    $form['transformers'] = array(
      '#type' => 'fieldset',
      '#title' => t('Transformers'),
      '#weight' => 5,
    );
    $transformers = $api->getTransformers($entity);
    $form['transformers']['transformers'] = array(
      '#type' => 'checkboxes',
      '#options' => array(
        'epicur' => t('Register Urn'),
        'aleph' => t('Copy to Catalog'),
        'oaidc' => t('Support OAI-PMH'),
        'pdfbox' => t('Allow Fulltext Search'),
        'pdfa' => t('Prepare for Long Term Preservation'),
      ),
      '#default_value' => $transformers,
    );

    foreach ($transformers as $transformer) {
      $label = $form['transformers']['transformers']['#options'][$transformer];
      $edoweb_api_host = variable_get('edoweb_api_host');
      $api_link = l(
        $label,
        "http://{$edoweb_api_host}/resource/{$entity->remote_id}.$transformer",
        array('attributes' => array('target'=>'_blank'))
      );
      $form['transformers']['transformers']['#options'][$transformer] = $api_link;
    }

    $form['transformers']['apply'] = array(
      '#type' => 'submit',
      '#value' => t('Apply'),
      '#submit' => array('edoweb_basic_admin_apply_transformers'),
      '#weight' => 200,
    );
  }

  _edoweb_build_breadcrumb($entity);
  return $form;
}

/**
 * Form index handler.
 *
 */
function edoweb_basic_admin_index( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $api = new EdowebAPIClient();
  if ($api->index($entity)) {
    drupal_set_message(t('The entity %id has been indexed.',
      array('%id' => $entity->remote_id))
    );
  } else {
    drupal_set_message(t('Failed to index entity %id.',
      array('%id' => $entity->remote_id)), 'error'
    );
  }
  $form_state['redirect'] = 'resource/' . $entity->remote_id;
}

/**
 * Form reload handler.
 *
 */
function edoweb_basic_admin_reload( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  entity_get_controller('edoweb_basic')->clearCache($entity->remote_id);
  $form_state['redirect'] = 'resource/' . $entity->remote_id;
}

/**
 * Form deletion handler.
 *
 */
function edoweb_basic_admin_delete( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  edoweb_basic_delete($entity);
  drupal_set_message(t('The entity %id has been deleted',
    array('%id' => $entity->remote_id))
  );
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  $parent_id = '';
  if (FALSE !== $parents) {
    foreach($parents as $parent) {
      $parent_id = $parent['value'];
    }
  }
  $form_state['redirect'] = "resource/$parent_id";
}

/**
 * Form transformers handler.
 *
 */
function edoweb_basic_admin_apply_transformers( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $transformers = array_keys(array_filter($form_state['values']['transformers']));
  $api = new EdowebAPIClient();
  if ($api->saveResource($entity, $transformers)) {
    drupal_set_message(t('Transformers applied'));
  } else {
    drupal_set_message(t('Failed to apply transformers'), 'error');
  }
}

/**
 * Form add URN handler.
 *
 */
function edoweb_basic_admin_add_urn( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $api = new EdowebAPIClient();
  if ($api->addURN($entity)) {
    entity_get_controller('edoweb_basic')->clearCache($entity->remote_id);
    drupal_set_message(t('URN added'));
  } else {
    drupal_set_message(t('Failed to add URN'), 'error');
  }
}

/**
 * Provides a form to configure access for entities.
 */
function edoweb_basic_access_form($form, &$form_state, $entity) {

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['access_md'] = array(
    '#type' => 'radios',
    '#title' => t('Metadata'),
    '#default_value' => isset($entity->access_md) ? $entity->access_md : 'private',
    '#options' => array(
      'public' => t('Public'),
      'private' => t('Private'),
    ),
  );

  if ('file' === $entity->bundle_type) {
    $form['access_data'] = array(
      '#type' => 'radios',
      '#title' => t('Data'),
      '#default_value' => isset($entity->access_data) ? $entity->access_data : 'private',
      '#options' => array(
        'public' => t('Public'),
        'private' => t('Private'),
        'restricted' => t('Restricted'),
      ),
    );
  }

  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
  );

  _edoweb_build_breadcrumb($entity);
  return $form;
}

function edoweb_basic_access_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];

  $access_md = isset($form_state['values']['access_md'])
    ? $form_state['values']['access_md'] : FALSE;

  $access_data = isset($form_state['values']['access_data'])
    ? $form_state['values']['access_data'] : FALSE;

  if ($access_md) $entity->access_md = $access_md;
  if ($access_data) $entity->access_data = $access_data;

  $api = new EdowebAPIClient();
  if ($api->saveResource($entity)) {
    drupal_set_message(
      t('Access rights for @id updated.', array('@id' => $entity->remote_id))
    );
  } else {
    drupal_set_message(
      t('Failed to update access rights for @id.', array('@id' => $entity->remote_id))
    );
  }
}

function edoweb_basic_data($entity) {
  $api = new EdowebAPIClient();
  $file = @file_get_contents($api->getFileUrl($entity));
  if ($file === FALSE) {
    return drupal_access_denied();
  }
  foreach ($http_response_header as $header) {
    header($header);
  }
  die($file);
}

/**
 * Form function to create an edoweb_basic entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function edoweb_basic_form($form, &$form_state, $entity) {

  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/jquery.tablesorter.min.js'
  );

  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/edoweb.js'
  );

  if (isset($_GET['source'])) {
    $api = new LinkedDataClient();
    $namespace = variable_get('edoweb_api_namespace');
    $remote_id = isset($entity->remote_id)
      ? $entity->remote_id
      : null;
    $bundle_type = $entity->bundle_type;
    $resource_uri = urldecode($_GET['source']);
    $entity = entity_get_controller('edoweb_basic')->create(
      array(
        'bundle_type' => $bundle_type,
        'remote_id' => $resource_uri,
      )
    );
    try {
      $api->load($entity);
      $entity->remote_id = $remote_id;
      $title = entity_label(EDOWEB_ENTITY_TYPE, $entity);
      drupal_set_title($title);
      drupal_set_message(t("Imported data from ") . $resource_uri, 'status');
    } catch (LibRDF_Error $e) {
      drupal_set_message(t("Failed importing data from ") . $resource_uri, 'error');
    }
  }

  $form['#action'] = base_path() . current_path();

  $form['#attributes'] = array('data-bundle' => $entity->bundle_type);

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('edoweb_basic', $entity, $form, $form_state);

  $instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );

  foreach ($instances_info as $field_name => $instance_info) {
    $field_info = field_info_field($field_name);
    $is_structural_field =
      isset($field_info['settings']['metadata_type'])
      && $field_info['settings']['metadata_type'] == 'structural';
    $is_readonly_field =
      isset($field_info['settings']['read_only'])
      && $field_info['settings']['metadata_type'] == TRUE;
    // Remove any structural fields from the form
    // because they will be added via a separate form
    if ($is_structural_field) {
      unset($form[$field_name]);
    }
    // Set fields holding machine-generated data to read-only
    if ($is_readonly_field) {
      $form[$field_name]['und'][0]['value']['#attributes']['readonly'] = 'readonly';
      $form_state['values'][$field_name]['und'][0]['value'] =
        isset($form[$field_name]['und'][0]['value']['#default_value'])
          ? $form[$field_name]['und'][0]['value']['#default_value']
          : "";
    }
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Speichern'),
    '#name' => 'save',
    '#weight' => 1000,
  );
  $form['finish'] = array(
    '#type' => 'submit',
    '#value' => t('Fertigstellen'),
    '#name' => 'finish',
    '#weight' => 1000,
  );
  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('edoweb_basic_edit_cancel'),
    '#weight' => 1500,
    '#limit_validation_errors' => array(),
  );

  _edoweb_build_breadcrumb($entity);
  return $form;
}


/**
 * Validation handler for edoweb_basic_add_form form.
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function edoweb_basic_form_validate($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];
  // Handle uploaded files by moving them from the tmp directory
  // and storing the resulting (local) URI
  if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
      && isset($_FILES['files']['error']['field_edoweb_datastream'])
      && 0 === $_FILES['files']['error']['field_edoweb_datastream']
  ) {
    $tmp_name = $_FILES['files']['tmp_name']['field_edoweb_datastream'];
    $file_name = $_FILES['files']['name']['field_edoweb_datastream'];
    $file_type = $_FILES['files']['type']['field_edoweb_datastream'];
    $file_size = $_FILES['files']['size']['field_edoweb_datastream'];
    $file_uri = file_unmanaged_move($tmp_name);
    $entity->field_edoweb_datastream[LANGUAGE_NONE][]['value'] = $file_uri;
    $entity->field_edoweb_label[LANGUAGE_NONE][]['value'] = $file_name;
    $entity->field_edoweb_filetype[LANGUAGE_NONE][]['value'] = $file_type;
    $entity->field_edoweb_filesize[LANGUAGE_NONE][]['value'] = $file_size;
    $form_state['values']['field_edoweb_datastream'][LANGUAGE_NONE][0]['value'] = $file_uri;
    $form_state['values']['field_edoweb_label'][LANGUAGE_NONE][0]['value'] = $file_name;
    $form_state['values']['field_edoweb_filetype'][LANGUAGE_NONE][0]['value'] = $file_type;
    $form_state['values']['field_edoweb_filesize'][LANGUAGE_NONE][0]['value'] = $file_size;
  } else if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
             && !isset($entity->field_edoweb_datastream[LANGUAGE_NONE][0]['value'])
  ) {
    form_set_error('field_edoweb_datastream', t('File is required.'));
  }
  field_attach_form_validate('edoweb_basic', $entity, $form, $form_state);
}

/**
 * Form submit handler: submits basic_add_form information
 */
function edoweb_basic_form_submit($form, &$form_state) {

  // Set field data from form
  $entity = $form_state['values']['basic_entity'];
  field_attach_submit('edoweb_basic', $entity, $form, $form_state);

  // Save the entity
  edoweb_basic_save($entity);

  // Reset cache to force reload of structural metadata from API
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  if (FALSE !== $parents) {
    foreach($parents as $parent) {
      entity_get_controller('edoweb_basic')->clearCache($parent['value']);
    }
  }

  if ($form_state['triggering_element']['#name'] == 'save') {
    $form_state['redirect'] = "resource/{$entity->remote_id}/edit";
  } else {
    $form_state['redirect'] = "resource/{$entity->remote_id}";
  }

}

/**
 * Form cancel handler.
 *
 */
function edoweb_basic_edit_cancel($form , &$form_state) {
  $path = explode('/', current_path());
  $entity = $form['basic_entity']['#value'];
  if (property_exists($entity, 'remote_id')) {
    $form_state['redirect'] = "resource/{$entity->remote_id}";
  } else if (array_key_exists(2, $path) && 'children' == $path[2]) {
    $form_state['redirect'] = "resource/{$path[1]}/children";
  } else {
    $form_state['redirect'] = 'resource';
  }
}

/**
 * We save the entity by calling the controller.
 */
function edoweb_basic_save(&$entity) {
  return entity_get_controller('edoweb_basic')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function edoweb_basic_delete($entity) {
  entity_get_controller('edoweb_basic')->delete($entity);
}

/**
 * Implements hook_rdf_mapping().
 *
 * This hook should only be used to define the RDF mapping for an entity or
 * bundle that has been defined by this module. On installation, this mapping
 * will be saved to the database. To alter anything in this mapping after module
 * installation (or to alter bundles defined in another module), the RDF CRUD
 * functions should be used.
 */
function edoweb_rdf_mapping() {

  module_load_install('edoweb');
  $bundles = _edoweb_installed_instances();

  $rdf_types = edoweb_rdf_types();
  $rdf_mappings = array();
  foreach ($bundles as $bundle_type => $field_instances) {
    $rdf_mapping = array(
      'type' => EDOWEB_ENTITY_TYPE,
      'bundle' => $bundle_type,
      'mapping' => array(
        'rdftype' => $rdf_types[$bundle_type],
      ),
    );
    foreach ($field_instances as $field_name => $field_instance) {
      $field_info = field_info_field($field_name);
      if (isset($field_info['settings']['predicates'])) {
        $rdf_mapping['mapping'][$field_name]['predicates'] =
          $field_info['settings']['predicates'];
        if ($field_info['type'] == 'edoweb_ld_reference') {
          $rdf_mapping['mapping'][$field_name]['type'] = 'rel';
        }
      }
    }
    $rdf_mappings[] = $rdf_mapping;
  }

  return $rdf_mappings;

}

function edoweb_rdf_types() {
  return array(
    'person' => array('gnd:DifferentiatedPerson'),
    'corporate_body' => array('gnd:CorporateBody'),
    'event' => array('gnd:ConferenceOrEvent'),
    'family' => array('gnd:Family'),
    'work' => array('gnd:Work'),
    'place' => array('gnd:PlaceOrGeographicName'),
    'subject' => array(
      'skos:Concept',
      'gnd:SubjectHeading'
    ),
    'monograph' => array(
      'bibo:Book',
    ),
    'journal' => array('bibo:Journal'),
    'volume' => array('bibo:Volume'),
    'issue' => array('bibo:Issue'),
    'article' => array('bibo:Article'),
    'file' => array('bibo:DocumentPart'),
    'authority_resource' => array('gnd:AuthorityResource'),
    'collection' => array(
      'bibo:Collection',
      'radion:Repository',
      'bibo:Series',
    ),
  );
}

/*
 * Implements hook_rdf_namespaces().
 *
 * This hook should be used to define any prefixes used by this module that are
 * not already defined in core by entity_rdf_namespaces.
 *
 * http://api.drupal.org/api/drupal/modules--rdf--rdf.api.php/function/hook_rdf_namespaces/7
 */
function edoweb_rdf_namespaces() {
  $edoweb_api_host = variable_get('edoweb_api_host');
  $edoweb_api_namespace = variable_get('edoweb_api_namespace');
  return array(
    $edoweb_api_namespace => "http://$edoweb_api_host/resource/$edoweb_api_namespace:",
    'local' => "http://$edoweb_api_host/resource/local:",
    'isbd' => 'http://iflastandards.info/ns/isbd/elements/',
    'frbr' => 'http://purl.org/vocab/frbr/core#',
    'bibo' => 'http://purl.org/ontology/bibo/',
    'dce'  => 'http://purl.org/dc/elements/1.1/',
    'ore'  => 'http://www.openarchives.org/ore/terms/',
    'foaf'  => 'http://xmlns.com/foaf/0.1/',
    'umbel'  => 'http://umbel.org/umbel#',
    'lv'  => 'http://purl.org/lobid/lv#',
    'rdfs'  => 'http://www.w3.org/2000/01/rdf-schema#',
    'orca'  => 'http://geni-orca.renci.org/owl/topology.owl#',
    'dnb' => 'http://d-nb.info/gnd/',
    'gnd' => 'http://d-nb.info/standards/elementset/gnd#',
    'lr' => 'http://lobid.org/resource/',
    'skos' => 'http://www.w3.org/2004/02/skos/core#',
    'ddc' => 'http://dewey.info/class/',
    'regal' => 'http://hbz-nrw.de/regal#',
    'rdvocab' => 'http://rdvocab.info/Elements/',
    'file' => 'http://downlode.org/Code/RDF/File_Properties/schema#',
    'marcrel' => 'http://id.loc.gov/vocabulary/relators/',
    'rpb' => 'http://purl.org/lobid/rpb#',
    'nwbib' => 'http://purl.org/lobid/nwbib#',
    'nwbib-spatial' => 'http://purl.org/lobid/nwbib-spatial#',
    'radion' => 'http://www.w3.org/ns/radion#',
  );
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 *
 */
function edoweb_block_info() {
  $blocks = array();

  $blocks['edoweb_search_block'] = array(
    'info' => t('Edoweb search'),
    'status' => 1,
    'region' => 'header',
    'weight' => '100',
  );

  $blocks['edoweb_tree_navigation'] = array(
    'info' => t('Edoweb Tree Navigation'),
    'status' => 1,
    'region' => 'left',
    'weight' => '100',
  );

  return $blocks;
}

function edoweb_block_list_alter(&$blocks) {
  // Exclude all blocks when handling AJAX request
  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])
      && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest')
  {
    $blocks = array();
  }
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function edoweb_block_view($delta = '') {
  //drupal_add_js(
  //  drupal_get_path('module', 'edoweb') . '/edoweb_tree.js'
  //);
  $block = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'edoweb_search_block':
      drupal_add_css(
        '.block .form-text {max-width: 100%;}',
        array('type' => 'inline')
      );
      $block['subject'] = t('Search');
      $block['content'] = drupal_get_form(
        'edoweb_basic_search_entities_form', FALSE, 0, array(), FALSE
      );
      $block['content']['#action'] = url('resource');
      unset($block['content']['form_build_id']);
      unset($block['content']['form_id']);
      unset($block['content']['form_token']);
      break;
    case 'edoweb_tree_navigation':
      if ($entity = menu_get_object(EDOWEB_ENTITY_TYPE)) {
        $top_level_parent = _edoweb_find_top_level_parent($entity);
        $subtree = _edoweb_build_tree($top_level_parent);
        $block['content'] = theme_item_list(array(
          'items' => array($subtree),
          'title' => null,
          'type' => 'ul',
          'attributes' => array('class' => array('edoweb-tree')),
        ));
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_help().
 */
function edoweb_help($path, $arg) {
  //switch ($path) {
  //  case 'edoweb/resource':
  //    return "<p>" . t(
  //      'This Module implements Edoweb functionality'
  //    ) . "</p>";
  //}
}

/**
 * Implements hook_file_load().
 */
function edoweb_file_load($files) {
  //drupal_set_message(print_r($files, TRUE));
}

/**
 * Implements hook_file_insert().
 */
function edoweb_file_insert($files) {
  //drupal_set_message(print_r($files, TRUE));
}

function _edoweb_format_date($timestamp) {
  return format_date($timestamp, 'custom', 'D, d.m.Y - H:i:s');
}

function _edoweb_http_request($request_url, $http_options) {

file_put_contents('php://stderr', "$request_url\n");

  $http_options += array(
    'timeout' => 60,
  );

  $http_response = drupal_http_request($request_url, $http_options);

  // FIXME: drupal_http_request does not follow 303s
  if ((303 == $http_response->code) || (307 == $http_response->code)) {
    $redirect_url = $http_response->headers['location'];
    // Fix for relative redirect URLs
    if ("/" == substr($redirect_url, 0, 1)) {
      $parsed_url = parse_url($request_url);
      $redirect_url = "{$parsed_url['scheme']}://{$parsed_url['host']}$redirect_url";
    }
    $request_url = $redirect_url;
    $http_response = drupal_http_request($request_url, $http_options);
  }

  // Display response in UI
  if (1 == variable_get('edoweb_api_debug')) {
    $status_type = 'error';
    switch ($http_response->code[0]) {
      case '2':
        $status_type = 'status';
        break;
      case '5':
        $status_type = 'warning';
        break;
    }
    drupal_set_message(
      sprintf(
        'API call responded with HTTP %s.<pre>{%s}</pre>',
        $http_response->code,
        htmlentities(print_r($http_response, TRUE))
      ),
      $status_type
    );
  }

  return $http_response;
}

function _edoweb_autocomplete($bundle_name, $field_name) {

  $term = $_GET['term'];
  $entities = _edoweb_lookup($bundle_name, $field_name, $term);
  $matches = array();
  foreach ($entities as $entity) {
    $matches[] = array(
      'value' => $entity->identifier(),
      'label' => entity_label(EDOWEB_ENTITY_TYPE, $entity),
    );
  }
  drupal_json_output($matches);
}

function _edoweb_lookup($bundle_name, $field_name, $term, $page = null) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'edoweb_basic');
  $query->addMetaData('term', $term);

  // Overwrite page query parameter
  if (!is_null($page)) {
    $_GET['page'] = $page;
  }

  $instance_definition = field_info_instance(
    EDOWEB_ENTITY_TYPE, $field_name, $bundle_name
  );
  $field_definition = field_info_field($field_name);

  $endpoint = isset($field_definition['settings']['endpoint'])
    ? $field_definition['settings']['endpoint']
    : false;
  $parameter = isset($field_definition['settings']['parameter'])
    ? $field_definition['settings']['parameter']
    : false;

  if ($endpoint && $parameter) {
    $query->addTag('lobid');
    $query->addMetaData('endpoint', $endpoint);
    $query->addMetaData('parameter', $parameter);
  } else {
    $query->addTag('elasticsearch');
  }

  $target_bundles = isset($instance_definition['settings']['handler_settings']['target_bundles'])
    ? array_values($instance_definition['settings']['handler_settings']['target_bundles'])
    : array_values($field_definition['settings']['handler_settings']['target_bundles']);

  $query->entityCondition('bundle', $target_bundles);

  $result = $query->execute();
  if (!$result or !array_key_exists('edoweb_basic', $result)) {
    $entities = array();
  } else {
    $entities = $result['edoweb_basic'];
  }
  return $entities;
}

function _edoweb_field_has_value_type($entity, $field_name, $bundle_type) {
  $values = field_get_items('edoweb_basic', $entity, $field_name);
  if (FALSE === $values) return FALSE;
  $field_has_value_type = FALSE;
  foreach ($values as $value) {
    $ref_entity = edoweb_basic_load($value['value']);
    if ($ref_entity->bundle_type == $bundle_type) {
      $field_has_value_type = TRUE;
      break;
    }
  }
  return $field_has_value_type;
}

function _edoweb_field_access($entity, $fields = array(), $permissions = null) {
  // Check that the entity has at least one of the provided
  // fields and that the user has the proper permission.
  $field_instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );
  $entity_has_field = FALSE;
  foreach ($field_instances_info as $field_name => $instance_settings) {
    if (in_array($field_name, $fields)) {
      $entity_has_field = TRUE;
      break;
    }
  }
  if (isset($permissions)) {
    return $entity_has_field && user_access($permissions);
  } else {
    return $entity_has_field;
  }
}

function _edoweb_is_editable_entity($entity, $permissions = null) {
  $namespace = variable_get('edoweb_api_namespace');
  if ("$namespace:" === substr($entity->identifier(), 0, strlen($namespace) + 1)) {
    $entity_is_editable = TRUE;
  } else {
    $entity_is_editable = FALSE;
  }
  if (isset($permissions)) {
    return $entity_is_editable && user_access($permissions);
  } else {
    return $entity_is_editable;
  }
}

function _edoweb_has_md_access($entity, $permissions = null) {
  global $user;
  $user_access = isset($permissions) ? user_access($permissions) : true;
  return (($entity->access_md == 'public') && $user_access)
          || ((in_array('edoweb_backend_admin', $user->roles)
            || in_array('edoweb_backend_user', $user->roles))
            && $user_access);
}

function _edoweb_available_languages() {
  $languages = include drupal_realpath(file_default_scheme() . '://') .  '/available_languages.inc';
  return $languages;
}



function _update_edoweb_installed_fields($updated_fields = null) {

  module_load_install('edoweb');
  $installed_fields = _edoweb_installed_fields();

  // Update all fields by default
  if (is_null($updated_fields)) {
    $updated_fields = array_keys($installed_fields);
  }

  foreach ($updated_fields as $field_name) {
    $field_definition = $installed_fields[$field_name];
    $field_definition['field_name'] = $field_name;
    $installed_field = field_info_field($field_name);
    if (is_null($installed_field)) {
      $field_definition['storage'] = array(
        'type' => 'edoweb_storage',
      );
      field_create_field($field_definition);
      drupal_set_message("Created field $field_name.");
    } else if($installed_field['type'] != $field_definition['type']) {
      field_delete_field($field_name);
      field_purge_batch(10);
      $field_definition['storage'] = array(
        'type' => 'edoweb_storage',
      );
      field_create_field($field_definition);
      drupal_set_message("Recreated field $field_name.");
    } else {
      field_update_field($field_definition);
      drupal_set_message("Updated field $field_name.");
    }
  }

}

/*
 * Reload instance definitions from edoweb.install
 * @param $updated_instances
 *   array(
 *     'updated_bundle' => array(
 *       field_name_1, field_name_2, ...
 *     )
 *   )
 */
function _update_edoweb_installed_instances($updated_instances = null) {

  module_load_install('edoweb');
  $installed_instances = _edoweb_installed_instances();

  // Update all instances by default
  if (is_null($updated_instances)) {
    $updated_instances = array();
    foreach ($installed_instances as $bundle_type => $installed_fields) {
      foreach (array_keys($installed_fields) as $field_name) {
        $updated_instances[$bundle_type][] = $field_name;
      }
    }
  }

  foreach ($updated_instances as $bundle_type => $field_names) {
    foreach ($field_names as $field_name) {
      $field_instance = $installed_instances[$bundle_type][$field_name];
      $field_instance['field_name'] = $field_name;
      $field_instance['entity_type'] = 'edoweb_basic';
      $field_instance['bundle'] = $bundle_type;
      $defaults = _edoweb_field_instance_defaults($field_name);
      $field_instance['label'] = array_key_exists('label', $defaults)
        ? $defaults['label']
        : null;
      $field_instance['description'] = array_key_exists('description', $defaults)
        ? $defaults['description']
        : null;
      $field_instance['default_value'] = array_key_exists('default_value', $defaults)
        ? $defaults['default_value']
        : null;
      $field_instance['required'] = array_key_exists('required', $defaults)
        ? $defaults['required']
        : FALSE;
      $field_instance['widget'] = array_key_exists('widget', $defaults)
        ? $defaults['widget']
        : array();
      $widget_weight = array_search(
        $field_name, array_keys($installed_instances[$bundle_type])
      );
      if (FALSE !== $widget_weight) {
        $field_instance['widget']['weight'] = $widget_weight;
        $field_instance['display']['default']['weight'] = $widget_weight;
        drupal_set_message("Setting widget weight for $field_name in
        bundle $bundle_type to $widget_weight");
      }
      $installed_instance = field_info_instance(
        EDOWEB_ENTITY_TYPE, $field_name, $bundle_type
      );
      if (is_null($installed_instance)) {
        field_create_instance($field_instance);
        drupal_set_message(
          "Created instance for field $field_name in bundle $bundle_type."
        );
      } else {
        field_update_instance($field_instance);
        drupal_set_message(
          "Updated instance for field $field_name in bundle $bundle_type."
        );
      }
    }
  }

}

function _update_rdf_mapping($updated_mappings = null) {

  module_load_install('edoweb');
  $installed_fields = _edoweb_installed_fields();

  // Update mappings for all fields by default
  if (is_null($updated_mappings)) {
    $updated_mappings = array_keys($installed_fields);
  }

  // Add RDF type
  $updated_mappings[] = 'rdftype';

  $rdf_mappings = edoweb_rdf_mapping();
  foreach ($rdf_mappings as $rdf_mapping) {
    foreach (array_keys($rdf_mapping['mapping']) as $field_name) {
      if (!in_array($field_name, $updated_mappings)) {
        unset($rdf_mapping['mapping'][$field_name]);
      }
    }
    rdf_mapping_save($rdf_mapping);
    drupal_set_message(
      'Updated RDF mappings for '
      . implode(', ', array_keys($rdf_mapping['mapping']))
    );
  }

}

/**
 * Fix RDF mapping of field_edoweb_urn
 */
function edoweb_update_7100() {
  $rdf_mapping = array(
    'type' => EDOWEB_ENTITY_TYPE,
    'bundle' => RDF_DEFAULT_BUNDLE,
    'mapping' => array(
      'field_edoweb_urn' => array(
        'predicates' => array('orca:hasURN'),
      ),
    ),
  );
  rdf_mapping_save($rdf_mapping);
}

/**
 * Update definitions of linked data fields
 */
function edoweb_update_7101() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_parallel',
  );
  module_load_install('edoweb');
  $field_definitions = _edoweb_installed_fields();
  foreach ($updated_fields as $updated_field) {
    $field_definition = array();
    $field_definition['settings']['label_properties'] =
      $field_definitions[$updated_field]['settings']['label_properties'];
    $field_definition['field_name'] = $updated_field;
    field_update_field($field_definition);
  }
}

/**
 * Add URN field instances to volume, issue, article and file bundles
 */
function edoweb_update_7102() {
  $added_instances = array(
    'volume' => array('field_edoweb_urn'),
    'issue' => array('field_edoweb_urn'),
    'article' => array('field_edoweb_urn'),
    'file' => array('field_edoweb_urn'),
  );
  _update_edoweb_installed_instances($added_instances);
}

/**
 * Remove superfluous fields
 */
function edoweb_update_7103() {
  field_delete_field('field_edoweb_creator_new');
  field_delete_field('field_edoweb_contributor_new');
  field_delete_field('field_edoweb_identifier');
  field_purge_batch(10);
}

/**
 * Add user id column
 */
function edoweb_update_7104() {
  $uid_column = array(
    'description' => 'The {users}.uid that created this entity.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('edoweb_basic', 'uid', $uid_column);
}

/**
 * Update fields, field instances and RDF mappings
 */
function edoweb_update_7105() {
  cache_clear_all('field:edoweb_basic:*', 'cache_field', TRUE);
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
  _update_rdf_mapping();
}

/**
 * Update RDF mapping for field_gnd_name
 */
function edoweb_update_7106() {
  _update_edoweb_installed_fields(
    array('field_gnd_name')
  );
  _update_edoweb_installed_instances(
    array('subject' => array('field_gnd_name'))
  );
  _update_rdf_mapping();
}

/**
 * Update field definitions
 */
function edoweb_update_7107() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
    'field_edoweb_parallel',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Update RDF mappings, add fields for alternative and short title
 */
function edoweb_update_7108() {
  _update_edoweb_installed_fields();
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_title_alternative',
      'field_edoweb_title_short',
    ),
    'journal' => array(
      'field_edoweb_title_alternative',
      'field_edoweb_title_short',
    ),
    'corporate_body' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Configure inverse fields
 */
function edoweb_update_7109() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Configure field groups
 */
function edoweb_update_7110() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
    'field_edoweb_parallel',
    'field_edoweb_parent',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Add extensive list of MARC relator fields
 */
function edoweb_update_7111() {
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
  _update_rdf_mapping();
}

/**
 * Update title fields to text_long, apply field weights
 */
function edoweb_update_7112() {
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
}

/**
 * Ungroup parent, parallel and subject fields
 */
function edoweb_update_7113() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_parallel',
    'field_edoweb_subject',
  );
  foreach ($updated_fields as $updated_field) {
    $field_info = field_info_field($updated_field);
    $field_info['settings']['field_group'] = null;
    field_update_field($field_info);
  }
}

/**
 * Update field and instance definitions:
 * - use name parameter for lobid lookups
 * - delete SKOS-specific fields
 */
function edoweb_update_7114() {
  field_delete_field('field_skos_pref_label');
  field_delete_field('field_skos_notation');
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_editor',
    'field_edoweb_edt',
    'field_edoweb_translator',
    'field_edoweb_ill',
    'field_edoweb_act',
    'field_edoweb_drt',
    'field_edoweb_clb',
    'field_edoweb_pht',
    'field_edoweb_cnd',
    'field_edoweb_cmp',
    'field_edoweb_aui',
    'field_edoweb_aus',
    'field_edoweb_col',
    'field_edoweb_ctb',
    'field_edoweb_prf',
    'field_edoweb_cng',
    'field_edoweb_ant',
    'field_edoweb_voc',
    'field_edoweb_ivr',
    'field_edoweb_ive',
    'field_edoweb_ctg',
    'field_edoweb_mus',
    'field_edoweb_aft',
    'field_edoweb_pro',
    'field_edoweb_egr',
    'field_edoweb_dte',
    'field_edoweb_subject',
    'field_edoweb_parallel',
    'field_gnd_profession',
    'field_gnd_name',
    'field_gnd_identifier',
  );
  $updated_instances = array(
    'person' => array(
      'field_gnd_profession',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Update RDF mappings, set read-only fields
 */
function edoweb_update_7115() {
  $updated_fields = array(
    'field_edoweb_urn',
    'field_edoweb_identifier_ht',
    'field_edoweb_identifier_zdb',
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_rdf_mapping();
}

/**
 * Add free-text tag field
 */
function edoweb_update_7116() {
  $updated_fields = array(
    'field_edoweb_tag',
  );
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_tag',
    ),
    'journal' => array(
      'field_edoweb_tag',
    ),
    'article' => array(
      'field_edoweb_tag',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Set subject endpoint for all GND lookups
 */
function edoweb_update_7117() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_editor',
    'field_edoweb_edt',
    'field_edoweb_translator',
    'field_edoweb_ill',
    'field_edoweb_act',
    'field_edoweb_drt',
    'field_edoweb_clb',
    'field_edoweb_pht',
    'field_edoweb_cnd',
    'field_edoweb_cmp',
    'field_edoweb_aui',
    'field_edoweb_aus',
    'field_edoweb_col',
    'field_edoweb_ctb',
    'field_edoweb_prf',
    'field_edoweb_cng',
    'field_edoweb_ant',
    'field_edoweb_voc',
    'field_edoweb_ivr',
    'field_edoweb_ive',
    'field_edoweb_ctg',
    'field_edoweb_mus',
    'field_edoweb_aft',
    'field_edoweb_pro',
    'field_edoweb_egr',
    'field_edoweb_dte',
  );

  _update_edoweb_installed_fields($updated_fields);
  _update_rdf_mapping();
}

/**
 * Remove add and import actions from menu
 */
function edoweb_update_7118() {
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Add bundles for event, family, event, work, place and collection
 */
function edoweb_update_7119() {
  cache_clear_all('field:edoweb_basic:*', 'cache_field', TRUE);
  $updated_fields = array('field_edoweb_subject');
  $updated_instances = array(
    'event' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'family' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'work' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'place' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'collection' => array(
      'field_edoweb_label',
      'field_edoweb_description',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Move field_edoweb_parent field to last position
 */
function edoweb_update_7120() {
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_parent',
    ),
    'journal' => array(
      'field_edoweb_parent',
    ),
    'file' => array(
      'field_edoweb_filesize',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Add generic bundle for authority resources, add fields for date of
 * establishment & termination
 */
function edoweb_update_7121() {
  $updated_fields = array(
    'field_gnd_date_of_establishment',
    'field_gnd_date_of_termination',
  );
  $updated_instances = array(
    'collection' => array(
      'field_edoweb_title',
      'field_edoweb_identifier_ht',
    ),
    'authority_resource' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'subject' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'corporate_body' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'event' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'work' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'place' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
  cache_clear_all('*', 'cache_field', TRUE);
  db_truncate('edoweb_basic')->execute();
  drupal_set_message('Entity caches cleared');
}

/**
 * Configure fieldset rows
 */
function edoweb_update_7122() {
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_title',
      'field_edoweb_title_other',
      'field_edoweb_title_alternative',
    ),
    'journal' => array(
      'field_edoweb_title',
      'field_edoweb_title_other',
      'field_edoweb_title_alternative',
    ),
    'issue' => array(
      'field_edoweb_title',
    ),
    'article' => array(
      'field_edoweb_title',
      'field_edoweb_title_other',
    ),
    'file' => array(
      'field_edoweb_title',
    ),
    'collection' => array(
      'field_edoweb_title',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
}

/**
 * Fix field weights for view mode
 */
function edoweb_update_7123() {
  edoweb_update_7122();
}

/**
 * Add field_edoweb_struct_child for file in article bundle
 */
function edoweb_update_7124() {
  $updated_instances = array(
    'article' => array(
      'field_edoweb_struct_child',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
}

/**
 * Add field_edoweb_title to volume bundle, make title mandatory for all
 * bundles
 */
function edoweb_update_7125() {
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_title',
    ),
    'journal' => array(
      'field_edoweb_title',
    ),
    'volume' => array(
      'field_edoweb_title',
    ),
    'issue' => array(
      'field_edoweb_title',
    ),
    'article' => array(
      'field_edoweb_title',
    ),
    'file' => array(
      'field_edoweb_title',
    ),
    'collection' => array(
      'field_edoweb_title',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Rebuild menu
 */
function edoweb_update_7126() {
  menu_rebuild();
}

/**
 * Rebuild menu
 */
function edoweb_update_7127() {
  menu_rebuild();
}

/**
 * Rebuild menu
 */
function edoweb_update_7128() {
  menu_rebuild();
}

/**
 * Update RDF mapping for monographs
 */
function edoweb_update_7129() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_parallel',
  );
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_parent',
      'field_edoweb_parallel'
    ),
    'journal' => array(
      'field_edoweb_parent',
      'field_edoweb_parallel'
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Rebuild menu
 */
function edoweb_update_7130() {
  menu_rebuild();
}

/**
 * Add columns for access rights
 */
function edoweb_update_7131() {
  $new_fields = array('access_md', 'access_data');
  module_load_install('edoweb');
  if (function_exists('edoweb_schema')) {
    $schema = edoweb_schema();
    foreach ($new_fields as $new_field) {
      $column = $schema[EDOWEB_ENTITY_TYPE]['fields'][$new_field];
      db_add_field(EDOWEB_ENTITY_TYPE, $new_field, $column);
    }
  }
  menu_rebuild();
}

/**
 * Add edoweb_backend_reader role and permissions
 */
function edoweb_update_7132() {
  module_load_install('edoweb');
  $permissions = _edoweb_installed_permissions();
  $role = new stdClass();
  $role->name = 'edoweb_backend_reader';
  user_role_save($role);
  user_role_grant_permissions($role->rid, $permissions[$role->name]);
}

/**
 * Drop the entity table
 */
function edoweb_update_7133() {
  db_drop_table('edoweb_basic');
  menu_rebuild();
}
