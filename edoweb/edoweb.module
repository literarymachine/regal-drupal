<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Implements the basic functionality required to create and display an entity.
 */

require_once dirname(__FILE__) . '/lib/LibRDF/LibRDF/LibRDF.php';
require_once dirname(__FILE__) . '/lib/php-json-ld/jsonld.php';

/**
 * Implements hook_init().
 */
function edoweb_init() {
  drupal_add_library('system', 'ui.sortable');
  if (drupal_match_path(current_path(), 'resource' . PHP_EOL . 'resource/*')
      || drupal_match_path(current_path(), 'browse' . PHP_EOL . 'browse/*')) {
    drupal_add_library('system', 'ui.dialog');
    drupal_add_library('system', 'ui.datepicker');
    drupal_add_library('system', 'drupal.collapse');
    global $user;
    $action_access = ((in_array('edoweb_backend_admin', $user->roles)
                      || in_array('edoweb_backend_user', $user->roles)));
    drupal_add_js(array('actionAccess' => $action_access), 'setting');

    $bundle_infos = field_info_instances(EDOWEB_ENTITY_TYPE);
    $instances = array();
    foreach ($bundle_infos as $bundle => $bundle_info) {
      foreach ($bundle_info as $field_name => $instance) {
        // Load field settings.
        $field = field_info_field($field_name);
        if (isset($field['cardinality'])) {
          $instance['settings']['cardinality'] = $field['cardinality'];
        }
        $instance['settings'] += $field['settings'];
        $instance['settings']['field_type'] = $field['type'];
        $instances[$bundle][$field_name] = array(
          'instance' => $instance,
        );
      }
    }
    $settings = array(
      'fields' => $instances,
      'namespaces' => rdf_get_namespaces(),
      'primary_bundles' => array(
        'monograph', 'journal', 'volume', 'issue', 'article'
      ),
      'site_frontpage' => variable_get('site_frontpage', '/'),
      'deepzoomServiceUrl' => variable_get('edoweb_deepzoom_url') ,
      'thumbyServiceUrl' => variable_get('edoweb_thumby_url'),
      'linked_entity_display' => variable_get('linked_entity_display'),
    );
    drupal_add_js(array('edoweb' => $settings), 'setting');
    drupal_add_js(
      drupal_get_path('module', 'edoweb') . '/edoweb.js'
    );
    drupal_add_js(
      drupal_get_path('module', 'edoweb') . '/edoweb_view.js'
    );
    drupal_add_js(
      drupal_get_path('module', 'edoweb') . '/jquery.tablesorter.min.js'
    );
    drupal_add_js(
      drupal_get_path('module', 'edoweb') . '/jquery.blockUI.js'
    );
    drupal_add_js(drupal_get_path('module', 'edoweb') . '/jquery.rdfquery.rdfa.min-1.0.js');
    drupal_add_js(drupal_get_path('module', 'edoweb') . '/jquery.url.js');
    drupal_add_js(drupal_get_path('module', 'edoweb') . '/jquery-listnav.js');
    drupal_add_css(drupal_get_path('module', 'edoweb') . '/listnav.css');
    drupal_add_css('https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css', array('type' => 'external'));
  }
}

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with multiple bundles
 * and without revision support.
 */
function edoweb_entity_info() {
  $info['edoweb_basic'] = array(

    // A human readable label to identify our entity.
    'label' => t('Edoweb Basic Entity'),

    // Callback to label entities
    'label callback' => 'entity_class_label',

    // The class for our Entity
    'entity class' => 'EdowebBasicEntity',

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'EdowebBasicController',

    // No base table as we are storing only remote
    'base table' => null,

    // Returns the uri elements of an entity
    'uri callback' => 'entity_class_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used
    // for key functions
    'entity keys' => array(
      // The 'id' (remote_id here) is the unique id.
      'id' => 'remote_id',
      // Bundle will be determined by the 'bundle_type' field
      'bundle' => 'bundle_type'
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'monograph' => array(
        'label' => t('Monograph'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/monograph/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'journal' => array(
        'label' => t('Journal'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/journal/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'volume' => array(
        'label' => t('Volume'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/volume/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'issue' => array(
        'label' => t('Issue'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/issue/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'article' => array(
        'label' => t('Article'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/article/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'file' => array(
        'label' => t('File'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/file/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'webpage' => array(
        'label' => t('Webseite'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/webpage/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'version' => array(
        'label' => t('Version'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/version/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'generic' => array(
        'label' => t('Bibliographic Resource'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/generic/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'part' => array(
        'label' => t('Part'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/part/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'person' => array(
        'label' => t('Person'),
        'namespace' => 'local',
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/person/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'subject' => array(
        'label' => t('Sachschlagwort'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/subject/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'corporate_body' => array(
        'label' => t('KÃ¶rperschaft'),
        'namespace' => 'local',
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/corporate_body/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'event' => array(
        'label' => t('Veranstaltung'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/event/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'family' => array(
        'label' => t('Familie'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/family/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'work' => array(
        'label' => t('Werk'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/work/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'place' => array(
        'label' => t('Geographikum'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/place/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'collection' => array(
        'label' => t('Sammlung'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/collection/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
      'authority_resource' => array(
        'label' => t('Authority Resource'),
        'admin' => array(
          'path' => 'admin/structure/edoweb_basic/authority_resource/manage',
          'access arguments' => array('administer edoweb_basic entities'),
        ),
      ),
    ),
    'view modes' => array(
      'compact' => array(
        'label' => t('Compact'),
        'custom settings' => TRUE,
      ),
    ),
  );

  return $info;
}

/**
 * Implements hook_entity_property_info().
 */
function edoweb_entity_property_info() {
  $property_info = array();
  $properties = &$property_info[EDOWEB_ENTITY_TYPE]['properties'];
  $properties['bundle_type'] = array(
    'label' => t('The bundle of the Entity'),
    'type' => 'text',
  );
  $properties['created'] = array(
    'label' => t('The creation date of the Entity'),
    'type' => 'date',
  );
  $properties['updated'] = array(
    'label' => t('The update date of the Entity'),
    'type' => 'text',
  );
  $properties['objectTimestamp'] = array(
    'label' => t('The last manual update date of the Entity'),
    'type' => 'text',
  );
  $properties['uid'] = array(
    'label' => t('The user ID of the creator of the Entity'),
    'type' => 'integer',
  );
  $properties['mid'] = array(
    'label' => t('The user ID of the last modificator of the Entity'),
    'type' => 'integer',
  );
  $properties['remote_id'] = array(
    'label' => t('The ID of the Entity, a URI'),
    'type' => 'uri',
  );
  $properties['access_md'] = array(
    'label' => t('The metadata access scheme of the Entity'),
    'type' => 'text',
  );
  $properties['access_data'] = array(
    'label' => t('The data access scheme of the Entity'),
    'type' => 'text',
  );
  $properties['name'] = array(
    'label' => t('A name for the metadata record'),
    'type' => 'text',
  );
  return $property_info;
}

/**
 * Fetch a basic object.
 *
 * This function ends up being a shim between the menu system and
 * edoweb_basic_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: resource/%edoweb_basic in
 * hook_menu() tells Drupal to call edoweb_basic_load().
 *
 * @param $remote_id
 *   Integer specifying the basic entity uri.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see edoweb_basic_load_multiple()
 * @see edoweb_menu()
 */
function edoweb_basic_load($remote_id, $reset = FALSE) {
  $remote_ids = $remote_id ? array($remote_id) : array();
  $basic = edoweb_basic_load_multiple($remote_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function edoweb_basic_load_multiple($remote_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('edoweb_basic', $remote_ids, $conditions, $reset);
}

/**
 * Implements hook_menu().
 */
function edoweb_menu() {

  // Configuration section for Edoweb modules
  $items['edoweb/config'] = array(
    'title' => 'Configuration',
    'description' => 'Configuration options for the Edoweb modules',
    'position' => 'left',
    'weight' => -100,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer edoweb repository'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Repository settings configuration
  $items['edoweb/config/settings'] = array(
    'title' => 'Einstellungen',
    'description' => 'Configuration for the repository.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_repository_configuration_form'),
    'access arguments' => array('administer edoweb repository'),
    'type' => MENU_NORMAL_ITEM,
  );

  // Paged search result listing for AJAX retrieval
  $items['edoweb/search'] = array(
    'page callback' => '_edoweb_search',
    'access arguments' => array('view any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );

  // List of templates
  $items['edoweb/templates'] = array(
    'page callback' => '_edoweb_templates',
    'access arguments' => array('view any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );

  // Returns last modified entity in tree
  $items['edoweb/lastmodified/%'] = array(
    'page callback' => '_edoweb_lastmodified',
    'page arguments' => array(2),
    'access arguments' => array('view any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );

  // Add new resources
  $items['resource/add/%'] = array(
    'title callback' => 'edoweb_basic_bundle_name',
    'title arguments' => array(2),
    'page callback' => 'edoweb_basic_add',
    'page arguments' => array(2),
    'access arguments' => array('create edoweb_basic entities'),
    'type' => MENU_CALLBACK,
  );

  // Resource landing page, list entities
  $items['resource'] = array(
    'title' => 'Edoweb',
    'page callback' => 'edoweb_info_page',
    'page arguments' => array('0'),
    'access arguments' => array('view any edoweb_basic entity'),
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  $items['resource/%edoweb_basic'] = array(
    'title callback' => 'entity_label',
    'title arguments' => array(EDOWEB_ENTITY_TYPE, 1),
    'page callback' => 'edoweb_basic_view',
    'page arguments' => array(1),
    // Access control handled by API
    'access callback' => TRUE,
  );

  // 'View' tab for an individual entity page.
  $items['resource/%edoweb_basic/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['resource/%edoweb_basic/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'edoweb_basic_edit',
    'page arguments' => array(1),
    'access callback' => '_edoweb_is_editable_entity',
    'access arguments' => array(1, 'edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Status' tab.
  $items['resource/%edoweb_basic/status'] = array(
    'title' => 'Status',
    'page callback' => 'edoweb_basic_status',
    'page arguments' => array(1),
    'access callback' => '_edoweb_is_editable_entity',
    'access arguments' => array(1, 'edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Crawler settings' tab for an individual webpage.
  $items['resource/%edoweb_basic/crawler'] = array(
    'title' => 'Crawler settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_crawler_form', 1),
    'access callback' => '_edoweb_is_webpage_entity',
    'access arguments' => array(1, 'edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Admin' tab for an individual entity page.
  $items['resource/%edoweb_basic/admin'] = array(
    'title' => 'Admin',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_admin', 1),
    'access arguments' => array('edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Access' tab for an individual entity page.
  $items['resource/%edoweb_basic/access'] = array(
    'title' => 'Access',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edoweb_basic_access_form', 1),
    'access callback' => '_edoweb_is_editable_entity',
    'access arguments' => array(1, 'edit any edoweb_basic entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // 'Data' callback for entities' datastreams
  $items['resource/%edoweb_basic/data'] = array(
    'page callback' => 'edoweb_basic_data',
    'page arguments' => array(1),
    // Access control handled by API
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // 'Structure' callback for entities.
  $items['resource/%edoweb_basic/structure'] = array(
    'page callback' => 'edoweb_basic_structure',
    'page arguments' => array(1),
    'access arguments' => array('view any edoweb_basic entity'),
    'type' => MENU_CALLBACK,
  );

  // 'Add Child' for entities that can have children.
  $items['resource/%edoweb_basic/children/add/%'] = array(
    'title callback' => 'edoweb_basic_bundle_name',
    'title arguments' => array(4),
    'page callback' => 'edoweb_basic_add',
    'page arguments' => array(4, 1),
    'access callback' => '_edoweb_field_access',
    'access arguments' => array(1, array('field_edoweb_struct_child'), 'create edoweb_basic entities'),
    'type' => MENU_CALLBACK,
  );

  // GND Autocompletion
  $items['edoweb/autocomplete'] = array(
    'page callback' => '_edoweb_autocomplete',
    'access arguments' => array('edit any edoweb_basic entity'),
    'type' => MENU_CALLBACK
  );

  // Facet browsing
  $items['browse/%'] = array(
    'page callback' => 'edoweb_basic_browse',
    'page arguments' => array(1),
    'access arguments' => array('view any edoweb_basic entity'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Repository settings form
 */
function edoweb_repository_configuration_form() {

  $access_options = array(
    'public' => t('Public'),
    'private' => t('Private'),
  );

  $form = array();

  $form['urn_namespace'] = array(
    '#type' => 'textfield',
    '#title' => t('URN Namensraum'),
    '#default_value' => variable_get('urn_namespace'),
  );

  $form['access_md_default'] = array(
    '#type' => 'radios',
    '#title' => t('Standardsichtbarkeit von Metadaten'),
    '#options' => $access_options,
    '#default_value' => variable_get('access_md_default', 'public'),
  );

  $form['access_data_default'] = array(
    '#type' => 'radios',
    '#title' => t('Standardsichtbarkeit von Dateien'),
    '#options' => $access_options,
    '#default_value' => variable_get('access_data_default', 'private'),
  );

  $form['compact_view_title_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Titelfelder in der Kurzansicht'),
    '#options' => array(
      'field_edoweb_title' => t('Titel'),
      'field_edoweb_creator' => t('Autor'),
      'field_edoweb_contributor' => t('Bearbeiter'),
    ),
    '#default_value' => variable_get('compact_view_title_fields', array('field_edoweb_title')),
  );

  $form['available_facets'] = array(
    '#type' => 'checkboxes',
    '#title' => t('VerfÃ¼gbare Facetten'),
    '#options' => array(
      'creator.@id' => t('Autor'),
      'contentType' => t('Objektart'),
      'subject.@id' => t('SacherschlieÃung'),
      'issued' => t('Erscheinungsjahr'),
      'type.@id' => t('Typ'),
      'medium.@id' => t('Medium'),
      'institution.@id' => t('Institution'),
    ),
    '#default_value' => variable_get('available_facets', array('creator.@id')),
  );
  
  $entity_table_headers = array();
  foreach (_edoweb_entity_table_headers() as $field => $column) {
    $entity_table_headers[$field] = $column['data'];
  }
  
  $form['editor_entity_table_headers'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Dokument-Tabellenheader fÃ¼r Bearbeiter'),
    '#options' => $entity_table_headers,
    '#default_value' => variable_get('editor_entity_table_headers', _edoweb_entity_table_headers_defaults()),
  );
  
  $form['user_entity_table_headers'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Dokument-Tabellenheader fÃ¼r Endnutzer'),
    '#options' => $entity_table_headers,
    '#default_value' => variable_get('user_entity_table_headers',  _edoweb_entity_table_headers_defaults()),
  );
  
  $authority_table_headers = array();
  foreach (_edoweb_authority_table_headers() as $field => $column) {
    $authority_table_headers[$field] = $column['data'];
  }
  
  $form['editor_authority_table_headers'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Normdaten-Tabellenheader fÃ¼r Bearbeiter'),
    '#options' => $authority_table_headers,
    '#default_value' => variable_get('editor_authority_table_headers',  _edoweb_authority_table_headers_defaults()),
  );
  
  $form['user_authority_table_headers'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Normdaten-Tabellenheader fÃ¼r Endnutzer'),
    '#options' => $authority_table_headers,
    '#default_value' => variable_get('user_authority_table_headers', _edoweb_authority_table_headers_defaults()),
  );

  $form['linked_entity_display'] = array(
    '#type' => 'radios',
    '#title' => t('Ansicht verlinkter EntitÃ¤ten'),
    '#options' => array(
      'table' => t('Tabelle'),
      'div' => t('DIVs'),
      'plain' => t('Label'),
    ),
    '#default_value' => variable_get('linked_entity_display', 'plain'),
  );

  return system_settings_form($form);

}

/**
 * Basic information for the page.
 */
function edoweb_info_page() {
  drupal_set_title('');
  $query = new EntityFieldQuery();
  $query->addTag('elasticsearch');
  $query->entityCondition('entity_type', 'edoweb_basic');
  $query->entityCondition('bundle', array(
    'monograph', 'journal', 'volume', 'issue', 'article', 'file', 'webpage', 'version', 'part'
  ));
  $content['resource_list'] = edoweb_basic_search_entities(
    $query, TRUE, array(), TRUE, user_access('edit any edoweb_basic entity'), TRUE, 'compact', TRUE
  );

  return $content;
}

/**
 * Implements hook_permission().
 */
function edoweb_permission() {
  $permissions = array(
    'administer edoweb_basic entities' =>  array(
      'title' => t('Administer Edoweb Basic entities'),
    ),
    'view any edoweb_basic entity' => array(
      'title' => t('View any Edoweb Basic entity'),
    ),
    'edit any edoweb_basic entity' => array(
      'title' => t('Edit any Edoweb Basic entity'),
    ),
    'create edoweb_basic entities' => array(
      'title' => t('Create Edoweb Basic Entities'),
    ),
    'administer edoweb configuration' => array(
      'title' => t('Administer Edoweb Configuration'),
    ),
    'administer edoweb repository' => array(
      'title' => t('Administer Edoweb Repository'),
    ),
  );
  return $permissions;
}

function _edoweb_templates($bundle_name = null) {
  $api = new EdowebAPIClient();
  die($api->getTemplates($bundle_name));
}

function _edoweb_lastmodified($remote_id) {
  $api = new EdowebAPIClient();
  $old_msg = drupal_get_messages();
  $last_modified = $api->getLastModified($remote_id);
  $_SESSION['messages'] = $old_msg;
  return $last_modified;
}

function _edoweb_search($bundle_name = null, $field_name = null) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'edoweb_basic');
  $endpoint = null;
  $parameter = null;

  if ($bundle_name && $field_name) {
    $instance_definition = field_info_instance(
      EDOWEB_ENTITY_TYPE, $field_name, $bundle_name
    );
    $field_definition = field_info_field($field_name);

    $endpoint = isset($field_definition['settings']['endpoint'])
      ? $field_definition['settings']['endpoint']
      : false;
    $parameter = isset($field_definition['settings']['parameter'])
      ? $field_definition['settings']['parameter']
      : false;

    $target_bundles = isset($instance_definition['settings']['handler_settings']['target_bundles'])
      ? array_values($instance_definition['settings']['handler_settings']['target_bundles'])
      : array_values($field_definition['settings']['handler_settings']['target_bundles']);

    $query->entityCondition('bundle', $target_bundles);
  } else if ($bundle_name) {
    $endpoint = 'resource';
    $parameter = 'name';
    $query->entityCondition('bundle', array($bundle_name));
  } else if (isset($_GET['endpoint'])) {
    $endpoint = $_GET['endpoint'];
    $parameter = 'name';
  }

  if ($endpoint && $parameter) {
    $query->addTag('lobid');
    $query->addMetaData('endpoint', $endpoint);
    $query->addMetaData('parameter', $parameter);
    $sortable = FALSE;
  } else {
    $query->addTag('elasticsearch');
    $sortable = TRUE;
  }

  $content = edoweb_basic_search_entities($query, FALSE, array(), FALSE, TRUE, $sortable);

  die(drupal_render($content));

}

function edoweb_basic_search_entities_form($form, &$form_state, $advanced, $search_count, $query, $fulltext_option = false) {

  $form['#method'] = 'get';

  $form['query'] = array(
    '#tree' => TRUE,
  );

  $url_params = explode('&', $_SERVER['QUERY_STRING']);
  foreach ($url_params as $param) {
    if (empty($param)) continue;
    list($key, $value) = explode('=', $param);
    if ("query[$search_count][term]" == urldecode($key)
        || 'page' == $key
        || 'op' == $key
        || "query[$search_count][type]" == substr(urldecode($key), 0, strlen("query[$search_count][type]"))
        || "query[$search_count][user]" == urldecode($key)
        || "query[$search_count][fulltext]" == urldecode($key)
        || "query[$search_count][childlevel]" == urldecode($key)
        ) continue;
    $form['query']['url_params'][] = array(
      '#type' => 'hidden',
      '#value' => urldecode($value),
      '#name' => urldecode($key),
    );
  }

  $form['query'][$search_count]['term'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($query['term']) ? urldecode($query['term']) : '',
    '#attributes' => array(
      'title' => t('Enter your search term here. You may use quotes to search for phrases as in "The quick brown fox", and also boolean operators as in This AND that OR those.'),
    ),
  );

  if (isset($query['target_bundles']) && isset($query['endpoint'])) {
    $options = array();
    $bundle_infos = field_info_bundles(EDOWEB_ENTITY_TYPE);
    foreach ($query['target_bundles'] as $target_bundle) {
      $bundle_info = $bundle_infos[$target_bundle];
      $options[$target_bundle] = $bundle_info['label'];
    }
    $form['query'][$search_count]['type'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#default_value' => isset($query['type']) && $query['type'] != ''
        ? $query['type']
        : current(array_keys($options)),
    );
  } else if (isset($query['endpoint']) && 'resource' == $query['endpoint']) {
    $options = array(
      'generic' => t('Any'),
      'monograph' => t('Monograph'),
      'journal' => t('Journal'),
      'webpage' => t('Webpage'),
    );
    $form['query'][$search_count]['type'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#default_value' => isset($query['type']) && $query['type'] != ''
        ? $query['type']
        : current(array_keys($options)),
    );
  }

  if ($fulltext_option) {
    $form['query'][$search_count]['fulltext'] = array(
      '#type' => 'checkbox',
      '#title' => t('Volltexte'),
      '#default_value' => isset($query['fulltext']),
    );
    if (!user_is_anonymous()) {
      $form['query'][$search_count]['childlevel'] = array(
        '#type' => 'checkbox',
        '#title' => t('Kindobjekte'),
        '#default_value' => isset($query['childlevel']),
      );
    }
  }

  $form['query'][$search_count]['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );

  return $form;
}

function edoweb_basic_search_entities(
  EntityFieldQuery $efq, $advanced = FALSE, $operations = array(),
  $list_noterm = TRUE, $add_links = FALSE, $sortable = TRUE,
  $view_mode = 'default', $fulltext_option = false
) {

  static $search_count = 0;
  if (array_key_exists('query', $_GET)
      && !empty($_GET['query'])
      && array_key_exists($search_count, $_GET['query'])
  ) {
    $query = $_GET['query'][$search_count];
  } else {
    $query = array();
  }

  if (isset($efq->metaData['endpoint'])) {
    $query['endpoint'] = $efq->metaData['endpoint'];
  }

  if (isset($efq->entityConditions['bundle'])) {
    $query['target_bundles'] = $efq->entityConditions['bundle']['value'];
  }

  $content = array();
  $content['search'] = drupal_get_form(
    'edoweb_basic_search_entities_form', $advanced, $search_count, $query, $fulltext_option
  );

  unset($content['search']['form_build_id']);
  unset($content['search']['form_id']);
  unset($content['search']['form_token']);

  $parent_entity = null;
  foreach ($efq->fieldConditions as $field_condition) {
    if ($field_condition['field']['field_name'] == 'field_edoweb_struct_parent') {
      $parent_entity = $field_condition['value'];
    }
  }

  if (isset($efq->entityConditions['bundle']) && $add_links) {
    $target_bundles = $efq->entityConditions['bundle']['value'];
    $links = '';
    foreach($target_bundles as $target_bundle) {
      $url = is_null($parent_entity)
        ? "resource/add/{$target_bundle}"
        : "resource/$parent_entity/children/add/$target_bundle";
      $links .= l(
        _edoweb_map_string("Add {$target_bundle}"), $url,
        array('attributes' => array('data-bundle' => $target_bundle))
      );
    }
    $content['add'] = array(
      '#type' => 'item',
      '#markup' => $links,
    );
  }

  if (@$users = $query['users']) {
    $target_users = array_keys($users);
    $efq->propertyCondition('uid', $target_users);
  }

  if (@$type = $query['type']) {
    if (!is_array($type)) {
      $type = array($type);
    } else {
      $type = array_keys($type);
    }
    $efq->addMetaData('type', $type);
  }

  if (@$term = $query['term']) {
    $efq->addMetaData('term', $term);
  }

  if (! (@$childlevel = $query['childlevel'])) {
    //FIXME: this overwrites person etc bundles!!!
    $efq->entityCondition('bundle', array('monograph', 'journal', 'webpage'));
  }

  if (@$fulltext = $query['fulltext']) {
    $efq->addTag('fulltext');
  }

  if ($term || $list_noterm) {
    $content['results'] = edoweb_basic_list_entities($efq, $operations, $search_count, @$query['facets'], $sortable, $view_mode);
  }

  $search_count++;
  return $content;
}

function _edoweb_entity_table_headers_defaults() {
  return array(
    '_edoweb_compact_view',
    'field_edoweb_issued',
    'objectTimestamp',
    '_edoweb_format_access_icons',
    '_edoweb_link_lastmodified',
    'bundle_type',
  );
}

function _edoweb_entity_table_headers($init_sort = null) {
  return array(
    'field_edoweb_title' => array(
      'data' => 'Titel',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_edoweb_title',
        'column' => 'value',
      ),
      'format' => '_get_edoweb_url',
    ),
    'field_edoweb_identifier_ht' => array(
      'data' => t('ID'),
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_edoweb_identifier_ht',
        'column' => 'value',
      ),
      'format' => '_get_external_url',
    ),
    '_edoweb_compact_view' => array(
      'data' => t('Kurzansicht'),
      'type' => 'generated',
      'format' => '_edoweb_compact_view',  
    ),
    'field_edoweb_issued' => array(
      'data' => t('Issued'),
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_edoweb_issued',
        'column' => 'value',
      ),
    ),
    'objectTimestamp' => array(
      'data' => t('Updated'),
      'type' => 'property',
      'specifier' => 'objectTimestamp',
      'format' => '_edoweb_format_date',
      'sort' => $init_sort ? 'desc' : null,
    ),
    '_edoweb_format_access_icons' => array(
      'data' => t('Zugriff'),
      'type' => 'generated',
      'format' => '_edoweb_format_access_icons',
    ),
    '_edoweb_link_lastmodified' => array(
      'data' => t('Zuletzt hinzugefÃ¼gtes Label'),
      'type' => 'generated',
      'format' => '_edoweb_link_lastmodified',
    ),
    'bundle_type' => array(
      'data' => t('Objektart'),
      'type' => 'property',
      'specifier' => 'bundle_type',
      'format' => '_edoweb_format_bundle_name',
    ),
    'type' => array(
      'data' => t('Typ'),
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_edoweb_type',
        'column' => 'value',
      ),
    ),
  );
}

function _edoweb_authority_table_headers_defaults() {
  return array(
    'field_gnd_identifier',
    'field_gnd_name',
    '_edoweb_format_subject',
    'field_gnd_date_of_establishment',
    'field_gnd_date_of_termination',
    'field_gnd_profession',
    'field_gnd_date_of_birth',
    'field_gnd_date_of_death'
  );
}

function _edoweb_authority_table_headers() {
  return array(
    'field_gnd_name' => array(
      'data' => 'Name / Titel',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_gnd_name',
        'column' => 'value',
      ),
      'format' => '_get_edoweb_url',
    ),
    'field_gnd_identifier' => array(
      'data' => 'ID / Notation',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_gnd_identifier',
        'column' => 'value',
      ),
      'format' => '_get_external_url',
    ),
    '_edoweb_compact_view' => array(
      'data' => t('Kurzansicht'),
      'type' => 'generated',
      'format' => '_edoweb_compact_view',  
    ),
    '_edoweb_format_subject' => array(
      'data' => 'Quelle',
      'type' => 'property',
      'specifier' => 'remote_id',
      'format' => '_edoweb_format_subject',
    ),
    'field_gnd_date_of_establishment' => array(
      'data' => 'GrÃ¼ndungsdatum',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_gnd_date_of_establishment',
        'column' => 'value',
      ),
    ),
    'field_gnd_date_of_termination' => array(
      'data' => 'AuflÃ¶sungsdatum',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_gnd_date_of_termination',
        'column' => 'value',
      ),
    ),
    'field_gnd_profession' => array(
      'data' => 'Beruf',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_gnd_profession',
        'column' => 'value',
      ),
    ),
    'field_gnd_date_of_birth' => array(
      'data' => 'Geburtsdatum',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_gnd_date_of_birth',
        'column' => 'value',
      ),
    ),
    'field_gnd_date_of_death' => array(
      'data' => 'Todesdatum',
      'type' => 'field',
      'specifier' => array(
        'field' => 'field_gnd_date_of_death',
        'column' => 'value',
      ),
    ),
  );
}

/*
 * Returns table header
 */
function edoweb_basic_table_header($bundle_type = 'generic', $init_sort = false) {

  $columns = array();
  
  if (user_access('edit any edoweb_basic entity')) {
    $entity_table_headers = variable_get('editor_entity_table_headers', _edoweb_entity_table_headers_defaults());
    $authority_table_headers = variable_get('editor_authority_table_headers', _edoweb_authority_table_headers_defaults());
  } else {
    $entity_table_headers = variable_get('user_entity_table_headers', _edoweb_entity_table_headers_defaults());
    $authority_table_headers = variable_get('user_authority_table_headers', _edoweb_authority_table_headers_defaults()); 
  }

  switch ($bundle_type) {
    case 'monograph':
    case 'journal':
    case 'volume':
    case 'issue':
    case 'article':
    case 'file':
    case 'collection':
    case 'webpage':
    case 'version':
    case 'generic':
    case 'part':
      foreach (_edoweb_entity_table_headers($init_sort) as $field => $column) {
        if (isset($entity_table_headers[$field]) && $entity_table_headers[$field]) {
          $columns[] = $column;
        }
      }
      break;
    case 'person':
    case 'subject':
    case 'corporate_body':
    case 'event':
    case 'work':
    case 'place':
    case 'authority_resource':
      foreach (_edoweb_authority_table_headers() as $field => $column) {
        if ($authority_table_headers[$field]) {
          $columns[] = $column;
        }
      }
      break;
    default:
      $columns = array(
        array(
          'data' => 'Label',
          'type' => 'field',
          'specifier' => array(
            'field' => 'field_edoweb_label',
            'column' => 'value',
          ),
        ),
      );

  }

  // Add fixed columns, independant of bundle type
  array_push($columns, t('Operations'));

  return $columns;

}

/*
 * Returns a list of entities themed as a table.
 */
function edoweb_basic_entity_table($header, $entities, $operations = array(), $total = null, $view_mode = 'default') {

  $content = array(
    '#type' => 'fieldset',
    '#title' => t('Your search returned @total results', array('@total' => $total)),
    '#attributes' => array(
      'class' => array('edoweb-entity-list')
    ),
  );

  $rows = array();
  $columns = $header;

  foreach ($entities as $i => $entity) {

    // Render embedded operations form
    $operation_elements = '';
    foreach ($operations as $operation) {
      $operation_form = drupal_get_form(
        "{$operation}_{$i}", $entity->remote_id
      );
      $operation_elements .= drupal_render($operation_form);
    }

    $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
    $curie = _edoweb_compact_uri($wrapper->remote_id->value());
    $row = array(
      'data-curie' => $curie,
      'data-updated' => $entity->objectTimestamp
    );
    
    foreach ($columns as $column) {
      $property = null;
      $value = null;
      $is_ref = false;
      $list_items = array();
      if (!isset($column['type'])) {
        $property = null;
      } else if ('field' == $column['type']) {
        $property = $column['specifier']['field'];
        $field_info = field_info_field($property);
        $is_ref = ($field_info['type'] == 'edoweb_ld_reference');
      } else if ('property' == $column['type']) {
        $property = $column['specifier'];
      }
      if (null === $property) {
        if (isset($column['format']) && function_exists($column['format'])
            && $list_item = $column['format']($entity)) {
          $list_items[] = $list_item;
        }
      } else if (!(($property == 'access_md' || $property == 'access_data')
          && ! _is_edoweb_entity($entity))) {
        try {
          $values = $wrapper->$property->value();
          if ($values and !is_array($values)) $values = array($values);
          if ($values) foreach ($values as $value) {
            if ('field' == $column['type']) {
              // Fixme: workaround for Drupal bug
              // https://www.drupal.org/node/1824820
              if ($is_ref) {
                $field_value = field_view_value(
                  EDOWEB_ENTITY_TYPE, $entity, $property, array('value' => $value['value'])
                );
              } else {
                $field_value = field_view_value(
                  EDOWEB_ENTITY_TYPE, $entity, $property, array('value' => $value)
                );
              }
              if (isset($column['format'])) {
                $list_items[] = $column['format'](drupal_render($field_value), $entity);
              } else {
                $list_items[] = drupal_render($field_value);
              }
            } else if (isset($column['format'])) {
              $list_items[] = $column['format']($value, $entity);
            } else {
              $list_items[] = $value;
            }
          }
        } catch (EntityMetadataWrapperException $e) {
          // No value for field, ignore
          //var_dump($e);
        }
      }
      $row['data'][] = theme_item_list(array(
        'items' => $list_items,
        'title' => null,
        'type' => 'ul',
        'attributes' => array(),
      ));
    }

    /*
    $row['data'][] = sprintf(
      '<span class="entity-label-%s">%s</span>',
      $entity->bundle_type,
      edoweb_basic_bundle_name($entity->bundle_type)
    );
    $row['data'][] = $operation_elements;
    */
    $rows[] = $row;
  }

  $content['pager_above'] = array(
    '#theme' => 'pager',
    '#weight' => 8,
  );
  // Put our entities into a themed table. See theme_table() for details.
  $content['entity_table'] = array(
    '#theme' => 'table',
    '#rows' => $rows,
    '#header' => $header,
    '#weight' => 9,
  );
  $content['pager_below'] = array(
    '#theme' => 'pager',
    '#weight' => 10,
  );
  return $content;
}

/**
 * Returns a render array with all edoweb_basic entities.
 *
 */
function edoweb_basic_list_entities(EntityFieldQuery $efq, $operations = array(), $search_count = 0, $active_facets = null, $sortable = TRUE, $view_mode = 'default') {

  global $user;

  // Prepare query: header for table sort
  // TODO: decide which table header to use if multiple target bundles
  // are set.
  $target_bundle = isset($efq->entityConditions['bundle']['value'])
    ? current($efq->entityConditions['bundle']['value'])
    : null;
  $header = edoweb_basic_table_header($target_bundle, !isset($efq->metaData['term']));
  if ($sortable) {
    $efq->tableSort($header);
  }

  $content = array();

  // Prepare query: apply active facets
  $content['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Facets'),
    '#collapsed' => FALSE,
    '#collapsible' => TRUE,
    '#attributes' => array(
      'class' => array('edoweb-facets')
    ),
  );

  if ($active_facets) {
    foreach (array_keys($active_facets) as $jsonld_property) {
      $content['filters'][$jsonld_property] = array(
        '#theme' => 'item_list',
        '#attributes' => array(
          'class' => array('edoweb-facets-active'),
        ),
        '#type' => 'ul',
        '#weight' => -200,
      );
    }
    foreach ($active_facets as $jsonld_property => $facet) {
      $is_ref = in_array($jsonld_property, array('creator', 'subject'));
      $is_user = ('createdBy' == $jsonld_property
          || 'lastModifiedBy' == $jsonld_property);
      foreach ($facet as $key => $value) {
        // Add facet to query
        if ('contentType' == $jsonld_property) {
          $efq->entityCondition('bundle', array($value));
        } else if ('lastModifiedBy' == $jsonld_property) {
          $efq->propertyCondition('mid', $value);
        } else if ('createdBy' == $jsonld_property) {
          $efq->propertyCondition('uid', $value);
        } else {
          $field_name = _jsonld_key_to_field_name($jsonld_property);
          $efq->fieldCondition(
            $field_name, 'value', $value
          );
        }
      }
    }
  }

  // Execute query
  $result = $efq->execute();

  if (!$result or !array_key_exists('edoweb_basic', $result)) {
    $entities = array();
  } else {
    $entities = $result['edoweb_basic'];
  }

  // Available facets
  if (isset($result['facets'])) {
    // Add list of available facets
    foreach ($result['facets'] as $jsonld_property => $facet) {
      $content['filters']['facets'][$jsonld_property] = array(
        '#theme' => 'item_list',
        '#type' => 'ul',
        '#attributes' => array(
          'class' => array('edoweb-facets-available'),
        ),
        '#title' => l(_edoweb_map_string($jsonld_property), 'browse/' . $jsonld_property),
      );
      $is_ref = in_array($jsonld_property, array('creator', 'subject', 'institution', 'medium', 'type'));
      $is_user = ('createdBy' == $jsonld_property
          || 'lastModifiedBy' == $jsonld_property);
      foreach ($facet->terms as $term) {
        $facet_entity_uri = $term->term;
        $facet_entity_count = $term->count;
        if ($is_ref) {
          $facet_object = es_facet_object($facet_entity_uri);
          $title = isset($facet_object['prefLabel']) ? $facet_object['prefLabel'] : $facet_object['@id'];
          $facet_entity_uri = $facet_object['@id'];
        } else if ($is_user) {
          $title = _edoweb_user_name($facet_entity_uri);
        } else {
          $title = _edoweb_map_string("$facet_entity_uri");
        }
        // Check if facet is active
        if ($active_facets && array_key_exists($jsonld_property, $active_facets)
            && in_array($facet_entity_uri, $active_facets[$jsonld_property])) {
          // Link to remove facet
          $params = drupal_get_query_parameters();
          unset($params['query'][$search_count]['facets'][$jsonld_property][$key]);
          if (isset($params['page'])) {
            unset($params['page']);
          }
          $remove_facet_link = $title . l(t(' [x]'), current_path(), array('query' => $params));
          $content['filters'][$jsonld_property]['#items'][] = $remove_facet_link;
        } else if (!$is_user || ($is_user && $user->uid == $facet_entity_uri)
              || in_array('edoweb_backend_admin', $user->roles)) {
          $params = drupal_get_query_parameters();
          if (isset($params['page'])) {
            unset($params['page']);
          }
          $params['query'][$search_count]['facets'][$jsonld_property][] = $facet_entity_uri;
          $apply_facet_link = l(
            $title, current_path(),
            array(
              'query' => $params,
              'attributes' => array(),
            )
          ) . " <span>($facet_entity_count)</span>";
          $content['filters']['facets'][$jsonld_property]['#items'][] = $apply_facet_link;
        }
      }
    }
  }

  if (!$active_facets && !isset($result['facets'])) {
    unset($content['filters']);
  }


  if (!empty($entities)) {
    $content['entity_list'] = edoweb_basic_entity_table($header, $entities, $operations, $result['hits'], $view_mode);
  } else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No results.'),
    );
  }
  return $content;
}

/**
 * Get a user name
 */
function _edoweb_user_name($id) {
  $account = is_numeric($id) ? user_load($id) : false;
  if (!$account) {
    $name = $id;
  } else {
    $name = $account->name != '' ? $account->name : $account->uid;
  }
  return $name;
}

/**
 * Due to the way Drupals t() function works, variable strings must be
 * mapped to literals.
 */
function _edoweb_map_string($string) {
  switch ($string) {
    case 'creator':
      return t('creator');
    case 'subject':
      return t('subject');
    case 'issued':
      return t('issued');
    case 'contentType':
      return t('contentType');
    case 'file':
      return t('file');
    case 'monograph':
      return t('monograph');
    case 'journal':
      return t('journal');
    case 'volume':
      return t('volume');
    case 'issue':
      return t('issue');
    case 'article':
      return t('article');
    case 'webpage':
      return t('webpage');
    case 'version':
      return t('version');
    case 'part':
      return t('part');
    case 'Add monograph':
      return t('Add monograph');
    case 'Add journal':
      return t('Add journal');
    case 'Add volume':
      return t('Add volume');
    case 'Add issue':
      return t('Add issue');
    case 'Add article':
      return t('Add article');
    case 'Add file':
      return t('Add file');
    case 'Add part':
      return t('Add part');
    case 'Add webpage':
      return t('Add webpage');
    case 'Add version':
      return t('Add version');
    case 'createdBy':
      return t('createdBy');
    case 'lastModifiedBy':
      return t('lastModifiedBy');
    case 'private':
      return t('private');
    case 'public':
      return t('public');
    case 'subscriber':
      return t('subscriber');
    case 'restricted':
      return t('restricted');
    case 'remote':
      return t('remote');
    case 'institution':
      return t('institution');
    case 'type':
      return t('type');
    case 'medium':
      return t('medium');
    default:
      return $string;
  }
}

/**
 * Callback to display bundle name.
 */
function edoweb_basic_bundle_name($bundle) {
  $info = entity_get_info('edoweb_basic');
  $label = !empty($info['bundles'][$bundle]['label'])
    ? $info['bundles'][$bundle]['label']
    : 'Resource';
  return $label;
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function edoweb_basic_view($entity, $view_mode = 'default') {
  global $base_url;
  $page_url = $base_url . '/' . current_path();

  // Our entity type, for convenience.
  $entity_type = 'edoweb_basic';

  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  $attr_bundle = 'data-entity-bundle="' .  $entity->bundle_type . '"';
  $attr_rdf_typeof = 'typeof="' . implode(' ', edoweb_rdf_types($entity->bundle_type)) . '"';
  $attr_rdf_resource = isset($entity->remote_id)
    ? 'resource="' . $entity->remote_id . '"'
    : 'resource="[_:foo]"';

  // Start setting up the content.
  if (!('compact' == $view_mode)) {
    $entity->content = array(
      '#view_mode' => $view_mode,
      '#prefix' => "<div class=\"edoweb entity $view_mode\" $attr_bundle $attr_rdf_resource $attr_rdf_typeof>",
      '#suffix' => "<span about=\"$page_url\" rel=\"foaf:primaryTopic\" $attr_rdf_resource /></div>",
    );
  } else {
    $link = _get_edoweb_url($entity->label($view_mode), $entity);
    $entity->content = array(
      '#prefix' => "<div class=\"edoweb entity $view_mode\" $attr_bundle $attr_rdf_resource $attr_rdf_typeof>"
                 . '<h1>' . $link . '</h1>',
      '#suffix' => "</div>",
    );
  }

  if (isset($entity->remote_id)) {
    // Build fields content - this is where the Field API really comes in to play.
    // The task has very little code here because it all gets taken care of by
    // field module.
    // field_attach_prepare_view() lets the fields load any data they need
    // before viewing.
    field_attach_prepare_view($entity_type, array($entity->remote_id => $entity), $view_mode);

    // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
    // for us.
    entity_prepare_view($entity_type, array($entity->remote_id => $entity));
    // Now field_attach_view() generates the content for the fields.
    $entity->content += field_attach_view($entity_type, $entity, $view_mode);

    // OK, Field API done, now we can set up some of our own data.
    if ('default' == $view_mode) {

      if ('file' == $entity->bundle() && ($thumby = variable_get('edoweb_thumby_url'))) {
        $url = $entity->url() . '/data';
        $entity->content['thumbnail'] = array(
          '#markup' => "<div class=\"thumb\"><a target=\"_blank\" href=\"$url\"><img src=\"$thumby?url=$url&size=250\" /></a></div>",
          '#weight' => -1000
        );
      }

      // Find fields linking to this entity
      $inverse_query = new EntityFieldQuery();
      $inverse_query->addTag('elasticsearch');
      $inverse_query->entityCondition(
        'entity_type', 'edoweb_basic'
      );
      $fields_info = field_info_fields();
      $has_inverse = FALSE;
      foreach ($fields_info as $field_name => $field_info) {
        if (isset($field_info['settings']['inverse'])
            && in_array($entity->bundle_type, $field_info['settings']['inverse']['bundles'])) {
          $has_inverse = TRUE;
          $inverse_query->fieldCondition(
            $field_name, 'value', $entity->identifier(), null, 'or'
          );
        }
      }
      if ($has_inverse) {
        $inverse_query->entityCondition('bundle', array(
          'monograph', 'journal', 'volume', 'issue', 'article', 'file', 'part'
        ));
        $entity->content['related'] = edoweb_basic_search_entities(
          $inverse_query
        );
        $entity->content['related'] += array(
          '#weight' => 900,
          '#type' => 'fieldset',
          '#title' => 'Related resources',
        );
      }

      if (user_access('edit any edoweb_basic entity')) {
        $markup = '<small>Letzte Ãnderung ';
        $markup .= isset($entity->updated) ? _edoweb_format_date($entity->updated) : '';
        $markup .= ' durch ' . _edoweb_user_name($entity->mid) . ', erstellt: ';
        $markup .= isset($entity->created) ? _edoweb_format_date($entity->created) : '';
        $markup .= ' durch ' .  _edoweb_user_name($entity->uid) . '</small>';
        $entity->content['_updated'] = array(
          '#type' => 'item',
          '#markup' => $markup,
          '#weight' => 1000,
        );
      }

      $entity->content['remote_id'] = array(
        '#type' => 'item',
        '#markup' => '<small>' . l(
          'View source',
          _edoweb_expand_curie($entity->remote_id),
          array('attributes' => array(
            'target'=>'_blank',
            'class' => array('entity-id'),
          ))
        ) . '</small>',
        '#weight' => 1001,
      );

      try {
        $archived_url = $wrapper->field_edoweb_webpage_archived->value();
        if (! empty($archived_url)) {
          $entity->content['archived_url'] = array(
            '#type' => 'item',
            '#markup' => '<small>' . l(
              'View in Internet Archive',
              "http://web.archive.org/web/*/{$archived_url}",
              array('attributes' => array(
                'target'=>'_blank',
              ))
            ) . '</small>',
            '#weight' => 1003,
          );
        }
      } catch (EntityMetadataWrapperException $e) {
        // Field not present, ignore
      }

      try {
        $origin = $wrapper->field_edoweb_parallel->value();
        if (! empty($origin)) {
          $entity->content['mab_source'] = array(
            '#type' => 'item',
            '#markup' => '<small>' . l(
              'View MAB source',
              $origin[0]['value'] . '?format=source',
              array('attributes' => array(
                'target'=>'_blank',
                'class' => array('entity-id'),
              ))
            ) . '</small>',
            '#weight' => 1004,
          );
        }
      } catch (EntityMetadataWrapperException $e) {
        // Field not present, ignore
      }

    }
  }

  if (1 == variable_get('edoweb_api_debug')) {
    $entity->content['turtle'] = array(
      '#type' => 'item',
      '#title' => t('Turtle view'),
      '#markup' => sprintf('<pre>%s</pre>', htmlentities(_edoweb_storage_entity_serialize_turtle($entity))),
      '#weight' => 100,
    );

    $entity->content['json'] = array(
      '#type' => 'item',
      '#title' => t('JSON-LD view'),
      '#markup' => sprintf('<pre>%s</pre>', htmlentities(_edoweb_storage_entity_serialize_jsonld($entity))),
      '#weight' => 100,
    );
  }

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language ;
  $langcode = $language->language ;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('edoweb_basic_view', 'entity_view'), $entity->content, $entity_type);

  if (!('compact' == $view_mode)) {
    _edoweb_build_breadcrumb($entity);
  }

  // Add custom HTTP header for AJAX requests
  if (isset($entity->remote_id)) {
    drupal_add_http_header('X-Edoweb-Entity', $entity->remote_id);
  }

  // And finally return the content.
  return $entity->content;
}

function edoweb_entity_view_alter(&$build, $type) {
  if (user_is_anonymous()) {
    unset($build['field_gnd_date_of_birth']);
    unset($build['field_gnd_date_of_death']);
  }
}

function edoweb_basic_edit($entity, $view_mode = 'edit') {

  drupal_add_js(
    drupal_get_path('module', 'edoweb') . '/edoweb_edit.js'
  );

  global $base_url;
  $page_url = $base_url . '/' . current_path();

  $postdata = file_get_contents("php://input");
  if ($postdata != '') {
    $rdf_model = new LibRDF_Model(new LibRDF_Storage());
    $rdf_parser = new LibRDF_Parser('rdfxml');

    $rdf_model->loadStatementsFromString(
      $rdf_parser, $postdata
    );
    $entity_uri = $rdf_model->getTarget(
      new LibRDF_URINode($page_url),
      new LibRDF_URINode('http://xmlns.com/foaf/0.1/primaryTopic')
    );
    $entity->remote_id = $entity_uri->getValue();
    _edoweb_storage_entity_deserialize_rdf($entity, $rdf_model);

    $entity->namespace = isset($_GET['namespace'])
      ? $_GET['namespace'] : null;
    $entity->name = isset($_GET['name'])
      ? $_GET['name'] : null;

    if ($entity_uri instanceof LibRDF_BlankNode) {
      $entity->remote_id = null;
    }
    edoweb_basic_save($entity);
    drupal_add_http_header('X-Edoweb-Entity', $entity->remote_id);
    die($entity->remote_id);
  }

  return edoweb_basic_view($entity, $view_mode);

}

function _edoweb_find_top_level_parent($entity) {
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  if (FALSE !== $parents) {
    return _edoweb_find_top_level_parent(
      edoweb_basic_load($parents[0]['value'])
    );
  }
  return $entity;
}

function _edoweb_build_tree($tree) {

  // Add current entity to tree
  $title = isset($tree['title'])
      ? implode(', ', $tree['title']) : $tree['@id'];
  $entity_bundle = $tree['contentType'];
  $options = array('attributes' => array('data-bundle' => $entity_bundle));
  $tree_item = array(
    'data' => l($title, 'resource/' . $tree['@id'], $options),
    'data-curie' => $tree['@id'],
    'class' => array('collapsed'),
  );

  // Append download links when applicable
  if ('file' == $entity_bundle && isset($tree['hasData'])) {
    $tree_item['data'] .= _edoweb_download_link($tree['hasData']['format'], $tree['hasData']['@id']);
  }

  // Add child enities to tree
  if (isset($tree['hasPart'])) {
    $children = $tree['hasPart'];
    foreach ($children as $child) {
      foreach ($child as $id => $subtree) {
        $tree_item['children'][] = _edoweb_build_tree($subtree);
      }
    }
  }

  return $tree_item;

}

function _edoweb_build_parent_trail($entity, $trail = array()) {
  // Recursively add parents to trail
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  if (FALSE !== $parents) {
    $parent = edoweb_basic_load($parents[0]['value']);
    $trail = array_merge(
      _edoweb_build_parent_trail($parent, $trail),
      $trail
    );
  }
  $title = entity_label(EDOWEB_ENTITY_TYPE, $entity);
  $entity_url = entity_class_uri($entity);
  $attributes = array('attributes' => array(
    'class' => array("entity-label-{$entity->bundle_type}"),
  ));
  $trail[] = l($title, $entity_url['path'], $attributes);
  return $trail;
}

function _edoweb_build_breadcrumb($entity) {
  $trail = _edoweb_build_parent_trail($entity);
  array_unshift($trail, l(t('Home'), 'resource'));
  drupal_set_breadcrumb($trail);
}

/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 */
function edoweb_field_extra_fields() {
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );

  // Attach extra_fields to all bundles
  $extra_fields['edoweb_basic']['monograph']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['journal']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['volume']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function edoweb_basic_add($bundle_type, $parent = NULL) {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('edoweb_basic')->create(
    array(
      'bundle_type' => $bundle_type,
      'created' => time(),
      'updated' => time(),
    )
  );
  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  if (NULL !== $parent) {
    $wrapper->field_edoweb_struct_parent = $parent->remote_id;
  }
  return edoweb_basic_edit($entity);
}

/**
 * Provides a wrapper on the edit form to add a new child to an entity.
 */
function edoweb_basic_structure($entity) {
  $api = new EdowebAPIClient();
  if ('POST' == $_SERVER['REQUEST_METHOD'] && user_access('edit any edoweb_basic entity')) {
    $new_parent_id = isset($_POST['parent_id']) ? $_POST['parent_id'] : FALSE;
    $parts = isset($_POST['parts']) ? $_POST['parts'] : FALSE;

    if ($new_parent_id) {
      $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
      $prev_parent = $wrapper->field_edoweb_struct_parent->value();
      $prev_parent_id = $prev_parent['value'];
      $wrapper->field_edoweb_struct_parent = array(
        'value' => $new_parent_id,
        'label' => '',
      );
      //TODO: How to add response text by AJAX?
      if ($api->saveResource($entity)) {
        echo "Moving {$entity->remote_id} from $prev_parent_id to $new_parent_id\n";
      } else if ($new_parent_id) {
        echo "Failed moving {$entity->remote_id} from $prev_parent_id to $new_parent_id\n";
      }
    }
    //TODO: How to add response text by AJAX?
    if ($parts && $api->setParts($entity, $parts)) {
      echo "Settings parts for {$entity->remote_id}\n";
    } else if ($parts) {
      echo "Failed settings parts for {$entity->remote_id}\n";
    }
    die;
  } else if ('POST' == $_SERVER['REQUEST_METHOD']) {
    return MENU_ACCESS_DENIED;
  } else {
    $subtree = _edoweb_build_tree($api->getTree($entity));
    die(theme_item_list(array(
      'items' => array($subtree),
      'title' => null,
      'type' => 'ul',
      'attributes' => array('class' => array('edoweb-tree')),
    )));
  }
}

/**
 * Provides a form to administrate webpage crawls.
 */
function edoweb_basic_crawler_form($form, &$form_state, $entity) {

  $api = new EdowebAPIClient();

  if (!$conf = $api->getCrawlerConfiguration($entity)) {
    $conf = array();
  }

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL'),
    '#default_value' => @$conf['url'],
    '#required' => TRUE,
  );

  $form['startDate'] = array(
    '#type' => 'date',
    '#title' => t('Start date'),
    '#default_value' => isset($conf['startDate'])
      ?  date_parse($conf['startDate'])
      : array(),
    '#required' => TRUE,
  );

  $form['interval'] = array(
    '#type' => 'select',
    '#title' => t('Interval'),
    '#options' => array(
      'annually' => t('Annually'),
      'halfYearly' => t('Half yearly'),
      'quarterly' => t('Quarterly'),
      'monthly' => t('Monthly'),
      'weekly' => t('Weekly'),
      'daily' => t('Daily'),
    ),
    '#default_value' => @$conf['interval'],
    '#required' => TRUE,
  );

  $form['robotsPolicy'] = array(
    '#type' => 'radios',
    '#title' => t('Robots'),
    '#options' => array(
      'classic' => t('Classic'),
      'ignore' => t('Ignore'),
      'obey' => t('Obey'),
    ),
    '#default_value' => @$conf['robotsPolicy'],
    '#required' => TRUE,
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#name' => 'save',
    '#value' => t('Save'),
  );

  $form['crawl'] = array(
    '#type' => 'submit',
    '#name' => 'crawl',
    '#value' => t('Save & Crawl'),
  );

  _edoweb_build_breadcrumb($entity);
  return $form;
}

/**
 * Processes a form to administrate webpage crawls.
 */
function edoweb_basic_crawler_form_submit($form, &$form_state) {

  $api = new EdowebAPIClient();
  $entity = $form_state['values']['basic_entity'];


  $conf = array();
  $conf['url'] = $form_state['values']['url'];
  $conf['startDate'] = $form_state['values']['startDate']['year']
      . '-' . $form_state['values']['startDate']['month']
      . '-' . $form_state['values']['startDate']['day'];
  $conf['interval'] = $form_state['values']['interval'];
  $conf['robotsPolicy'] = $form_state['values']['robotsPolicy'];

  $api->setCrawlerConfiguration($entity, $conf);
  
  if ('crawl' == $form_state['triggering_element']['#name']) {
    $api->triggerCrawl($entity);
    $uri = $entity->uri();
    $form_state['redirect'] = $uri['path'] . '/status';
  }

}

/**
 * Provides API status information for a single entity.
 */
function edoweb_basic_status($entity) {

  $api = new EdowebAPIClient();
  $status = $api->getStatus($entity);
  $content = array();

  $content['interfaces'] = array(
    '#type' => 'fieldset',
    '#title' => t('Interfaces'),
  );

  $urnStatus = @$status['urnStatus'] == 200 ? t('registriert') : t('nicht registriert');

  $content['interfaces']['_urnStatus'] = array(
    '#prefix' => '<div class="field field-label-above"><div class="field-label">'
                  . t('URN')
                  . ':</div><div class="field-items"><div class="field-item even">',
    '#suffix' => '</div></div></div>',
    '#markup' => '<a href="' . @$status['links']['urn'] . '"target="_blank">' . $urnStatus . '</a>',
    '#weight' => 999,
  );

  $oaiStatus = @$status['oaiStatus'] == 200 ? t('gemeldet') : t('nicht gemeldet');

  $content['interfaces']['_oaiStatus'] = array(
    '#prefix' => '<div class="field field-label-above"><div class="field-label">'
                  . t('Katalog')
                  . ':</div><div class="field-items"><div class="field-item even">',
    '#suffix' => '</div></div></div>',
    '#markup' => '<a href="' . @$status['links']['oai'] . '"target="_blank">' . $oaiStatus . '</a>',
    '#weight' => 999,
  );

  if ('webpage' == $entity->bundle()) {
    $content['webgatherer'] = array(
      '#type' => 'fieldset',
      '#title' => t('Web Gatherer'),
    );
    $content['webgatherer']['_crawlControllerState'] = array(
      '#prefix' => '<div class="field field-label-above"><div class="field-label">'
                    . t('Crawler state')
                    . ':</div><div class="field-items"><div class="field-item even">',
      '#suffix' => '</div></div></div>',
      '#markup' => @$status['webgatherer']['crawlControllerState'],
      '#weight' => 999,
    );
    $content['webgatherer']['_crawlExitStatus'] = array(
      '#prefix' => '<div class="field field-label-above"><div class="field-label">'
                    . t('Exit status')
                    . ':</div><div class="field-items"><div class="field-item even">',
      '#suffix' => '</div></div></div>',
      '#markup' => @$status['webgatherer']['crawlExitStatus'],
      '#weight' => 999,
    );
    $content['webgatherer']['_launchCount'] = array(
      '#prefix' => '<div class="field field-label-above"><div class="field-label">'
                    . t('Launch Count')
                    . ':</div><div class="field-items"><div class="field-item even">',
      '#suffix' => '</div></div></div>',
      '#markup' => @$status['webgatherer']['launchCount'],
      '#weight' => 999,
    );

    $content['webgatherer']['_lastLaunch'] = array(
      '#prefix' => '<div class="field field-label-above"><div class="field-label">'
                    . t('Last launch')
                    . ':</div><div class="field-items"><div class="field-item even">',
      '#suffix' => '</div></div></div>',
      '#markup' => isset($status['webgatherer']['lastLaunch'])
        ? _edoweb_format_date(strtotime($status['webgatherer']['lastLaunch'])) : '',
      '#weight' => 999,
    );
    $content['webgatherer']['_nextLaunch'] = array(
      '#prefix' => '<div class="field field-label-above"><div class="field-label">'
                    . t('Next launch')
                    . ':</div><div class="field-items"><div class="field-item even">',
      '#suffix' => '</div></div></div>',
      '#markup' => isset($status['webgatherer']['nextLaunch'])
        ? _edoweb_format_date(strtotime($status['webgatherer']['nextLaunch'])) : '',
      '#weight' => 999,
    );
  }

  return $content;

}

/**
 * Provides a form to administrate entities.
 */
function edoweb_basic_admin($form, &$form_state, $entity) {

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['actions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Actions'),
    '#weight' => 5,
  );

  $form['actions']['reload'] = array(
    '#type' => 'submit',
    '#value' => t('Reload'),
    '#submit' => array('edoweb_basic_admin_reload'),
    '#weight' => 100,
  );

  if (_is_edoweb_entity($entity)) {
    $api = new EdowebAPIClient();
    $has_urn = field_get_items('edoweb_basic', $entity, 'field_edoweb_urn') ? TRUE : FALSE;
    if (!$has_urn) {
      $form['actions']['urn'] = array(
        '#type' => 'submit',
        '#value' => t('Add URN'),
        '#submit' => array('edoweb_basic_admin_add_urn'),
        '#weight' => 50,
      );
    }
    $has_doi = field_get_items('edoweb_basic', $entity, 'field_edoweb_doi') ? TRUE : FALSE;
    if (!$has_doi) {
      $form['actions']['doi'] = array(
        '#type' => 'submit',
        '#value' => t('Add DOI'),
        '#submit' => array('edoweb_basic_admin_add_doi'),
        '#weight' => 50,
      );
    }
    $form['actions']['index'] = array(
      '#type' => 'submit',
      '#value' => t('Index'),
      '#submit' => array('edoweb_basic_admin_index'),
      '#weight' => 50,
    );
    $form['actions']['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('edoweb_basic_admin_delete'),
      '#weight' => 200,
    );
    $form['transformers'] = array(
      '#type' => 'fieldset',
      '#title' => t('Transformers'),
      '#weight' => 5,
    );
    $transformers = $api->getTransformers($entity);
    $form['transformers']['transformers'] = array(
      '#type' => 'checkboxes',
      '#attributes' => array('disabled' => 'disabled'),
      '#options' => array(
        'epicur' => t('Register Urn'),
        'aleph' => t('Copy to Catalog'),
        'oaidc' => t('Support OAI-PMH'),
        'mets' => t('OAI-PMH METS'),
	'rdf' => t('OAI-PMH RDF'),
      ),
      '#default_value' => $transformers,
    );

    foreach ($transformers as $transformer) {
      $label = $form['transformers']['transformers']['#options'][$transformer];
      $edoweb_api_host = variable_get('edoweb_api_host');
      $api_link = l(
        $label,
        "{$edoweb_api_host}/resource/{$entity->remote_id}.$transformer",
        array('attributes' => array('target'=>'_blank'))
      );
      $form['transformers']['transformers']['#options'][$transformer] = $api_link;
    }

  }

  _edoweb_build_breadcrumb($entity);
  return $form;
}

/**
 * Form index handler.
 *
 */
function edoweb_basic_admin_index( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $api = new EdowebAPIClient();
  $api->index($entity);
  $form_state['redirect'] = 'resource/' . $entity->remote_id;
}

/**
 * Form reload handler.
 *
 */
function edoweb_basic_admin_reload( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  entity_get_controller('edoweb_basic')->clearCache($entity->remote_id);
  $form_state['redirect'] = 'resource/' . $entity->remote_id;
}

/**
 * Form deletion handler.
 *
 */
function edoweb_basic_admin_delete( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  edoweb_basic_delete($entity);
  $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
  $parent_id = '';
  if (FALSE !== $parents) {
    foreach($parents as $parent) {
      $parent_id = $parent['value'];
    }
  }
  $form_state['redirect'] = "resource/$parent_id";
}

/**
 * Form transformers handler.
 *
 */
function edoweb_basic_admin_apply_transformers( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $transformers = array_keys(array_filter($form_state['values']['transformers']));
  $api = new EdowebAPIClient();
  $api->saveResource($entity, $transformers);
}

/**
 * Form add URN handler.
 *
 */
function edoweb_basic_admin_add_urn( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $api = new EdowebAPIClient();
  $api->addURN($entity);
}

/**
 * Form add DOI handler.
 *
 */
function edoweb_basic_admin_add_doi( $form , &$form_state ) {
  $entity = $form_state['values']['basic_entity'];
  $api = new EdowebAPIClient();
  $api->addDOI($entity);
}

/**
 * Provides a form to configure access for entities.
 */
function edoweb_basic_access_form($form, &$form_state, $entity) {

  $form['basic_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  $form['access_md'] = array(
    '#type' => 'radios',
    '#title' => t('Metadata'),
    '#default_value' => isset($entity->access_md) ? $entity->access_md : variable_get('access_md_default'),
    '#options' => array(
      'public' => t('Public'),
      'private' => t('Private'),
    ),
  );

  $form['access_data'] = array(
    '#type' => 'radios',
    '#title' => t('Data'),
    '#default_value' => isset($entity->access_data) ? $entity->access_data : variable_get('access_data_default'),
    '#options' => array(
      'public' => t('Public'),
      'private' => t('Private'),
      'restricted' => t('Restricted'),
      'remote' => t('Remote'),
      'single' => t('Single'),
    ),
  );

  $children = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_child');
  if (FALSE !== $children) {
    $form['subtree_apply'] = array(
      '#type' => 'checkbox',
      '#title' => t('Auch auf untergeordnete Objekte anwenden'),
    );
  }

  // Submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Apply'),
  );

  _edoweb_build_breadcrumb($entity);
  return $form;
}

function edoweb_basic_access_form_submit($form, &$form_state) {
  $entity = $form_state['values']['basic_entity'];

  $access_md = isset($form_state['values']['access_md'])
    ? $form_state['values']['access_md'] : FALSE;

  $access_data = isset($form_state['values']['access_data'])
    ? $form_state['values']['access_data'] : FALSE;

  $subtree_apply = isset($form_state['values']['subtree_apply'])
    ? $form_state['values']['subtree_apply'] : FALSE;

  if ($access_md) $entity->access_md = $access_md;
  if ($access_data) $entity->access_data = $access_data;

  $api = new EdowebAPIClient();
  $api->setAccessRights($entity, $subtree_apply);
}

function edoweb_basic_data($entity) {
  $api = new EdowebAPIClient();
  if ('POST' == $_SERVER['REQUEST_METHOD']) {
    // Handle uploaded files by moving them from the tmp directory
    // and storing the resulting (local) URI
    if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
        && isset($_FILES['files']['error'][0])
        && isset($_FILES['files']['error'][0])
    ) {
      $tmp_name = $_FILES['files']['tmp_name'][0];
      $file_name = $_FILES['files']['name'][0];
      $file_type = $_FILES['files']['type'][0];
      $file_size = $_FILES['files']['size'][0];
      $file_uri = file_unmanaged_move($tmp_name);
      $entity->field_edoweb_datastream[LANGUAGE_NONE][]['value'] = $file_uri;
      $entity->field_edoweb_label[LANGUAGE_NONE][]['value'] = $file_name;
      $entity->field_edoweb_filetype[LANGUAGE_NONE][]['value'] = $file_type;
      $entity->field_edoweb_filesize[LANGUAGE_NONE][]['value'] = $file_size;
      $api->saveFiles($entity);
    } else if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
               && !isset($entity->field_edoweb_datastream[LANGUAGE_NONE][0]['value'])
    ) {
      form_set_error('field_edoweb_datastream', t('File is required.'));
    }
  } else {
    $http_response = $api->getFile($entity);
    if (2 != $http_response->code[0]) {
      return drupal_access_denied();
    }
    foreach ($http_response->headers as $header => $value) {
      header("{$header}:{$value}");
    }
    ob_clean();
    die($http_response->data);
  }
}

function edoweb_basic_browse($jsonld_property) {

  $api = new EdowebApiClient();
  $query = new EntityFieldQuery();
  $query->addTag('elasticsearch');
  $query->addMetaData('facet_size', 999);
  $result = $query->execute();

  if (!property_exists($result['facets'], $jsonld_property)) {
    return drupal_not_found();
  }

  $is_ref = in_array($jsonld_property, array('creator', 'subject', 'institution', 'type', 'medium'));
  $is_user = ('createdBy' == $jsonld_property
      || 'lastModifiedBy' == $jsonld_property);
  $items = array();
  foreach ($result['facets']->$jsonld_property->terms as $term) {
    $facet_entity_uri = $term->term;
    $facet_entity_count = $term->count;
    if ($is_ref) {
      $facet_object = es_facet_object($facet_entity_uri);
      $title = $facet_object['prefLabel'];
      $facet_entity_uri = $facet_object['@id'];
    } else if ($is_user) {
      $title = _edoweb_user_name($facet_entity_uri);
    } else {
      $title = _edoweb_map_string("$facet_entity_uri");
    }
    $params = array();
    $params['query'][0]['facets'][$jsonld_property][] = $facet_entity_uri;
    $apply_facet_link = l(
      $title, '/resource/',
      array(
        'query' => $params,
        'attributes' => array(),
      )
    ) . " <span>($facet_entity_count)</span>";
    $items[] = array(
      'data' => $apply_facet_link,
    );
  }

  return theme_item_list(array(
    'items' => $items,
    'title' => _edoweb_map_string($jsonld_property),
    'type' => 'ul',
    'attributes' => array('class' => array('listnav')),
  ));

}

function es_facet_object($string) {
  $string = substr($string, 1, -1);
  $regex = '/(?<=\s|\A)([^\s=]+)=(.*?)(?=(?:\s[^\s=]+=|$))/';
  $matches = array();
  if (preg_match_all($regex, $string, $matches)) {
    $result = array();
    foreach ($matches[0] as $i => $key_value) {
      list($key, $value) = explode('=', $key_value, 2);
      $result[$key] = ($i + 1 == count($matches[0])) ? $value : substr($value, 0, -1);
    }
    return $result;
  } else {
    return $string;
  }
}

/**
 * We save the entity by calling the controller.
 */
function edoweb_basic_save(&$entity) {
  return entity_get_controller('edoweb_basic')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function edoweb_basic_delete($entity) {
  entity_get_controller('edoweb_basic')->delete($entity);
}

/**
 * Implements hook_rdf_mapping().
 *
 * This hook should only be used to define the RDF mapping for an entity or
 * bundle that has been defined by this module. On installation, this mapping
 * will be saved to the database. To alter anything in this mapping after module
 * installation (or to alter bundles defined in another module), the RDF CRUD
 * functions should be used.
 */
function edoweb_rdf_mapping() {

  module_load_install('edoweb');
  $bundles = _edoweb_installed_instances();

  $rdf_types = edoweb_rdf_types();
  $rdf_mappings = array();
  foreach ($bundles as $bundle_type => $field_instances) {
    $rdf_mapping = array(
      'type' => EDOWEB_ENTITY_TYPE,
      'bundle' => $bundle_type,
      'mapping' => array(
        'rdftype' => $rdf_types[$bundle_type],
      ),
    );
    foreach ($field_instances as $field_name => $field_instance) {
      $field_info = field_info_field($field_name);
      if (isset($field_info['settings']['predicates'])) {
        $rdf_mapping['mapping'][$field_name]['predicates'] =
          $field_info['settings']['predicates'];
        if ($field_info['type'] == 'edoweb_ld_reference' || $field_info['type'] == 'list_text') {
          $rdf_mapping['mapping'][$field_name]['type'] = 'rel';
        }
      }
    }
    $rdf_mappings[] = $rdf_mapping;
  }

  return $rdf_mappings;

}

function edoweb_rdf_types($bundle = null) {
  $rdf_types = array(
    'person' => array('gnd:DifferentiatedPerson'),
    'corporate_body' => array('gnd:CorporateBody'),
    'event' => array('gnd:ConferenceOrEvent'),
    'family' => array('gnd:Family'),
    'work' => array('gnd:Work'),
    'place' => array('gnd:PlaceOrGeographicName'),
    'subject' => array(
      'skos:Concept',
      'gnd:SubjectHeading'
    ),
    'monograph' => array('bibo:Book'),
    'journal' => array('bibo:Journal'),
    'volume' => array('bibo:Volume'),
    'issue' => array('bibo:Issue'),
    'article' => array('bibo:Article'),
    'file' => array('bibo:DocumentPart'),
    'webpage' => array('lv:ArchivedWebPage'),
    //FIXME: dummy RDF type for version
    'version' => array('lv:ArchivedWebPageVersion'),
    'generic' => array('dc:BibliographicResource'),
    //FIXME: do we need an RDF type mapping for the 'part' bundle?
    'part' => array('dc:BibliographicResource'),
    'authority_resource' => array('gnd:AuthorityResource'),
    'collection' => array(
      'bibo:Collection',
      'radion:Repository',
      'bibo:Series',
    ),
  );
  return $bundle ? $rdf_types[$bundle] : $rdf_types;
}

/*
 * Implements hook_rdf_namespaces().
 *
 * This hook should be used to define any prefixes used by this module that are
 * not already defined in core by entity_rdf_namespaces.
 *
 * http://api.drupal.org/api/drupal/modules--rdf--rdf.api.php/function/hook_rdf_namespaces/7
 */
function edoweb_rdf_namespaces() {
  $edoweb_api_host = variable_get('edoweb_api_host');
  $edoweb_api_namespace = variable_get('edoweb_api_namespace');
  $edoweb_lobid_host = variable_get('edoweb_lobid_host');
  return array(
    $edoweb_api_namespace => "$edoweb_api_host/resource/$edoweb_api_namespace:",
    'local' => "$edoweb_api_host/resource/local:",
    'template' => "$edoweb_api_host/resource/template:",
    'isbd' => 'http://iflastandards.info/ns/isbd/elements/',
    'frbr' => 'http://purl.org/vocab/frbr/core#',
    'bibo' => 'http://purl.org/ontology/bibo/',
    'dce'  => 'http://purl.org/dc/elements/1.1/',
    'ore'  => 'http://www.openarchives.org/ore/terms/',
    'foaf'  => 'http://xmlns.com/foaf/0.1/',
    'umbel'  => 'http://umbel.org/umbel#',
    'lv'  => 'http://purl.org/lobid/lv#',
    'rdfs'  => 'http://www.w3.org/2000/01/rdf-schema#',
    'orca'  => 'http://geni-orca.renci.org/owl/topology.owl#',
    'dnb' => 'http://d-nb.info/gnd/',
    'gnd' => 'http://d-nb.info/standards/elementset/gnd#',
    'lr' => "$edoweb_lobid_host/resource/",
    'skos' => 'http://www.w3.org/2004/02/skos/core#',
    'ddc' => 'http://dewey.info/class/',
    'regal' => 'http://hbz-nrw.de/regal#',
    'rdvocab' => 'http://rdvocab.info/Elements/',
    'file' => 'http://downlode.org/Code/RDF/File_Properties/schema#',
    'marcrel' => 'http://id.loc.gov/vocabulary/relators/',
    'rpb' => 'http://purl.org/lobid/rpb#',
    'nwbib' => 'http://purl.org/lobid/nwbib#',
    'nwbib-spatial' => 'http://purl.org/lobid/nwbib-spatial#',
    'radion' => 'http://www.w3.org/ns/radion#',
    'holding' => 'http://purl.org/ontology/holding#',
    'dbpedia' => 'http://dbpedia.org/ontology/',
    'rdf' => 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    'rda' => 'http://rdaregistry.info/Elements/u/',
  );
}

/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 *
 */
function edoweb_block_info() {
  $blocks = array();

  $blocks['edoweb_search_block'] = array(
    'info' => t('Edoweb search'),
    'status' => 1,
    'region' => 'header',
    'weight' => '100',
  );

  $blocks['edoweb_tree_navigation'] = array(
    'info' => t('Edoweb Tree Navigation'),
    'status' => 1,
    'region' => 'left',
    'weight' => '100',
  );

  return $blocks;
}

function edoweb_block_list_alter(&$blocks) {
  // Exclude all blocks when handling AJAX request
  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])
      && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest')
  {
    foreach ($blocks as $id => $block) {
      if ('content' !== $block->region) {
        unset($blocks[$id]);
      }
    }
  }
}

/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function edoweb_block_view($delta = '') {
  $block = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'edoweb_search_block':
      drupal_add_css(
        '.block .form-text {max-width: 100%;}',
        array('type' => 'inline')
      );
      $block['subject'] = t('Search');
      $block['content'] = drupal_get_form(
        'edoweb_basic_search_entities_form', FALSE, 0, array()
      );
      $block['content']['#action'] = url('resource');
      unset($block['content']['form_build_id']);
      unset($block['content']['form_id']);
      unset($block['content']['form_token']);
      break;
    case 'edoweb_tree_navigation':
      if ($entity = menu_get_object(EDOWEB_ENTITY_TYPE)) {
        drupal_add_js(
          drupal_get_path('module', 'edoweb') . '/edoweb_edit.js'
        );
        drupal_add_js(
          drupal_get_path('module', 'edoweb') . '/edoweb_tree.js'
        );
        $top_level_parent = _edoweb_find_top_level_parent($entity);
        if (_edoweb_is_editable_entity($top_level_parent) &&
            in_array($top_level_parent->bundle_type, array('monograph', 'journal'))) {
          $api = new EdowebAPIClient();
          $subtree = _edoweb_build_tree($api->getTree($top_level_parent));
          $block['content'] = theme_item_list(array(
            'items' => array($subtree),
            'title' => null,
            'type' => 'ul',
            'attributes' => array('class' => array('edoweb-tree')),
          ));
        }
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_help().
 */
function edoweb_help($path, $arg) {
  //switch ($path) {
  //  case 'edoweb/resource':
  //    return "<p>" . t(
  //      'This Module implements Edoweb functionality'
  //    ) . "</p>";
  //}
}

/**
 * Implements hook_file_load().
 */
function edoweb_file_load($files) {
  //drupal_set_message(print_r($files, TRUE));
}

/**
 * Implements hook_file_insert().
 */
function edoweb_file_insert($files) {
  //drupal_set_message(print_r($files, TRUE));
}

/**
 * Set prefix of HTML title
 */
function edoweb_preprocess_html(&$vars) {
  $title_parts = explode('|', $vars['head_title']);
  $site_name = variable_get('site_name');
  if ($site_name == trim(array_pop($title_parts)) && $title_parts) {
    $vars['head_title'] = "{$site_name}: " . implode('|', $title_parts);
  }
}

function _edoweb_format_date($timestamp) {
  return format_date($timestamp, 'custom', 'D, d.m.Y - H:i:s');
}

function _edoweb_format_access_icons($entity) {
  
  if (!_is_edoweb_entity($entity)) {
    return '';
  }

  $icons = '';
  switch ($entity->access_data) {
    case 'private':
      $icons .= '<i class="fa fa-lock" title="' . t($entity->access_data) . '" style="color:red;"></i>';
      break;
    case 'subscriber':
    case 'restricted':
      $icons .= '<i class="fa fa-lock" title="' . t($entity->access_data) . '"style="color:orange;"></i>';
      break;
    case 'remote':
      $icons .= '<i class="fa fa-lock" title="' . t($entity->access_data) . '"style="color:yellow;"></i>';
      break;
    case 'public':
      $icons .= '<i class="fa fa-unlock" title="' . t($entity->access_data) . '"style="color:green;"></i>';
      break;    
  }
 
  switch ($entity->access_md) {
    case 'private':
      $icons .= '&nbsp;&nbsp;&nbsp;&nbsp;<i class="fa fa-circle-o" title="' . t($entity->access_md) . '"style="color:red;"></i>';
      break;
    case 'public':
      $icons .= '&nbsp;&nbsp;&nbsp;&nbsp;<i class="fa fa-circle-o" title="' . t($entity->access_md) . '"style="color:green;"></i>';
      break;
  }
  
  return $icons;

}

function _edoweb_format_subject($remote_id) {
  $curie = _edoweb_compact_uri($remote_id);
  return strtoupper(substr($curie, 0, strpos($curie, ':')));
}

function _edoweb_link_lastmodified($entity) {
  if (_is_edoweb_entity($entity)) {
    $curie = _edoweb_compact_uri($entity->remote_id);
    $href = "edoweb/lastmodified/$curie";
    return l("Zuletzt hinzugefÃ¼gtes Label wird geladen ...",
      $href, array('attributes' => array('class' => array('edoweb lastmodified')))
    );
  }
}

function _edoweb_compact_view($entity) {
  $entity_view = edoweb_basic_view($entity, 'compact');
  return drupal_render($entity_view);
}

function _edoweb_http_request($request_url, $http_options) {

  // Add credentials if loading from API
  $api_host = variable_get('edoweb_api_host');
  $is_api_request = FALSE;
  if ("$api_host" === substr($request_url, 0, strlen($api_host))) {
    $is_api_request = TRUE;
    $http_options['headers']['Authorization'] = _get_api_auth_header();
    $http_options['headers']['UserIp'] = $_SERVER['REMOTE_ADDR'];
  }

  // Add UserId header for modifying methods
  $modifying = $is_api_request
      && in_array($http_options['method'], array('PUT', 'POST', 'DELETE', 'PATCH'));

  if ($modifying) {
    global $user;
    $http_options['headers']['UserId'] = $user->uid;
  }

  $http_options += array(
    'timeout' => 60,
  );

  $http_response = drupal_http_request($request_url, $http_options);

  $request = explode(' ', $http_response->request);
  $is_search_request = $is_api_request && (substr(ltrim(next($request), '/'), 0, 6) == 'search');
  if ($modifying && !$is_search_request) {
    console_log($http_response);
  }

  // FIXME: drupal_http_request does not follow 303s
  if ((303 == $http_response->code) || (307 == $http_response->code)) {
    $redirect_url = $http_response->headers['location'];
    // Fix for relative redirect URLs
    if ("/" == substr($redirect_url, 0, 1)) {
      $parsed_url = parse_url($request_url);
      $redirect_url = "{$parsed_url['scheme']}://{$parsed_url['host']}$redirect_url";
    } else if ("http" != substr($redirect_url, 0, 4)) {
      $parsed_url = parse_url($request_url);
      $path = substr($parsed_url['path'], 0, strrpos($parsed_url['path'], '/'));
      $redirect_url = "{$parsed_url['scheme']}://{$parsed_url['host']}{$path}/$redirect_url";
    }
    $request_url = $redirect_url;
    $http_response = drupal_http_request($request_url, $http_options);
  }

  // Display response in UI
  if ($is_api_request) {
    drupal_add_http_header('Status', $http_response->code);
    if (($modifying && !$is_search_request)
        || ($http_options['method'] == 'GET' && $http_response->code >= 400)) {
      $status_type = 'error';
      switch ($http_response->code[0]) {
        case '2':
          $status_type = 'status';
          break;
        case '5':
          $status_type = 'warning';
          break;
      }
      if ('DELETE' == $http_options['method']) {
        $message = $http_response->data;
        $code = $http_response->code;
      } else {
        $data = json_decode($http_response->data);
        $message = $data->text;
        $code = $data->code;
      }
      drupal_set_message("$code: $message", $status_type);
    }
  }

  return $http_response;
}

function _edoweb_autocomplete($bundle_name, $field_name) {

  $term = $_GET['term'];
  $entities = _edoweb_lookup($bundle_name, $field_name, $term);
  $matches = array();
  foreach ($entities as $entity) {
    $matches[] = array(
      'value' => $entity->identifier(),
      'label' => entity_label(EDOWEB_ENTITY_TYPE, $entity),
    );
  }
  drupal_json_output($matches);
}

function _edoweb_lookup($bundle_name, $field_name, $term, $page = null) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'edoweb_basic');
  $query->addMetaData('term', $term);

  // Overwrite page query parameter
  if (!is_null($page)) {
    $_GET['page'] = $page;
  }

  $instance_definition = field_info_instance(
    EDOWEB_ENTITY_TYPE, $field_name, $bundle_name
  );
  $field_definition = field_info_field($field_name);

  $endpoint = isset($field_definition['settings']['endpoint'])
    ? $field_definition['settings']['endpoint']
    : false;
  $parameter = isset($field_definition['settings']['parameter'])
    ? $field_definition['settings']['parameter']
    : false;

  if ($endpoint && $parameter) {
    $query->addTag('lobid');
    $query->addMetaData('endpoint', $endpoint);
    $query->addMetaData('parameter', $parameter);
  } else {
    $query->addTag('elasticsearch');
  }

  $target_bundles = isset($instance_definition['settings']['handler_settings']['target_bundles'])
    ? array_values($instance_definition['settings']['handler_settings']['target_bundles'])
    : array_values($field_definition['settings']['handler_settings']['target_bundles']);

  $query->entityCondition('bundle', $target_bundles);

  $result = $query->execute();
  if (!$result or !array_key_exists('edoweb_basic', $result)) {
    $entities = array();
  } else {
    $entities = $result['edoweb_basic'];
  }
  return $entities;
}

function _edoweb_field_has_value_type($entity, $field_name, $bundle_type) {
  $values = field_get_items('edoweb_basic', $entity, $field_name);
  if (FALSE === $values) return FALSE;
  $field_has_value_type = FALSE;
  foreach ($values as $value) {
    $ref_entity = edoweb_basic_load($value['value']);
    if ($ref_entity->bundle_type == $bundle_type) {
      $field_has_value_type = TRUE;
      break;
    }
  }
  return $field_has_value_type;
}

function _edoweb_field_access($entity, $fields = array(), $permissions = null) {
  // Check that the entity has at least one of the provided
  // fields and that the user has the proper permission.
  $field_instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );
  $entity_has_field = FALSE;
  foreach ($field_instances_info as $field_name => $instance_settings) {
    if (in_array($field_name, $fields)) {
      $entity_has_field = TRUE;
      break;
    }
  }
  if (isset($permissions)) {
    return $entity_has_field && user_access($permissions);
  } else {
    return $entity_has_field;
  }
}

function _edoweb_is_editable_entity($entity, $permissions = null) {
  if (isset($permissions)) {
    return _is_edoweb_entity($entity) && user_access($permissions);
  } else {
    return _is_edoweb_entity($entity);
  }
}

function _edoweb_is_webpage_entity($entity, $permissions = null) {
  return 'webpage' == $entity->bundle()
      && _edoweb_is_editable_entity($entity, $permissions);
}

function _edoweb_available_languages() {
  $languages = include drupal_realpath(file_default_scheme() . '://') .  '/available_languages.inc';
  return $languages;
}

function _get_edoweb_url($label, $entity, $attributes = array()) {
  if (is_object($entity)) {
    $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
    $curie = $entity->remote_id;
  } else {
    $curie = $entity;
  }
  $uri = _edoweb_expand_curie($curie);
  $query = array();
  if (_is_edoweb_entity($curie)) {
    $href = 'resource/' . $curie;
  } else if ('lr:' == substr($curie, 0, 3)) {
    if ($wrapper) {
      $id = $wrapper->field_edoweb_identifier_ht->value();
    } else {
      $id = $label;
    }
    $attributes['target'] = '_blank';
    $href = "http://okeanos-www.hbz-nrw.de/F/?func=find-c&ccl_term=IDN%3D{$id}";
  } else {
    $href = "resource";
    $query = array("query[0][term]" => '"' . $uri . '"');
  }
  return l($label ? $label : $curie, $href,
    array(
      'attributes' => $attributes,
      'query' => $query,
    )
  );
}

function _get_external_url($label, $entity, $attributes = array()) {
  if (is_object($entity)) {
    $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
    $curie = $entity->remote_id;
  } else {
    $curie = $entity;
  }
  $uri = _edoweb_expand_curie($curie);
  if (_is_edoweb_entity($curie)) {
    $href = 'resource/' . $curie;
  } else if ('lr:' == substr($curie, 0, 3)) {
    if ($wrapper) {
      $id = $wrapper->field_edoweb_identifier_ht->value();
    } else {
      $id = $label;
    }
    $href = "http://okeanos-www.hbz-nrw.de/F/?func=find-c&ccl_term=IDN%3D{$id}";
  } else {
    $href = $uri;
  }
  $attributes['target'] = '_blank';
  return l($label ? $label : $curie, $href,
    array(
      'attributes' => $attributes
    )
  );
}

function _edoweb_format_bundle_name($bundle) {
  return sprintf(
    '<span class="entity-label-%s">%s</span>',
    $bundle,
    edoweb_basic_bundle_name($bundle)
  );
}

function console_log($obj) {
  file_put_contents('php://stderr', date('Y-m-d H:i:s') . ': ' . print_r($obj, true) . "\n");
}

function _update_edoweb_installed_fields($updated_fields = null) {

  module_load_install('edoweb');
  $installed_fields = _edoweb_installed_fields();

  // Update all fields by default
  if (is_null($updated_fields)) {
    $updated_fields = array_keys($installed_fields);
  }

  foreach ($updated_fields as $field_name) {
    $field_definition = $installed_fields[$field_name];
    $field_definition['field_name'] = $field_name;
    $installed_field = field_info_field($field_name);
    if (is_null($installed_field)) {
      $field_definition['storage'] = array(
        'type' => 'edoweb_storage',
      );
      field_create_field($field_definition);
      drupal_set_message("Created field $field_name.");
    } else if($installed_field['type'] != $field_definition['type']) {
      field_delete_field($field_name);
      field_purge_batch(10);
      $field_definition['storage'] = array(
        'type' => 'edoweb_storage',
      );
      field_create_field($field_definition);
      drupal_set_message("Recreated field $field_name.");
    } else {
      field_update_field($field_definition);
      drupal_set_message("Updated field $field_name.");
    }
  }

}

/*
 * Reload instance definitions from edoweb.install
 * @param $updated_instances
 *   array(
 *     'updated_bundle' => array(
 *       field_name_1, field_name_2, ...
 *     )
 *   )
 */
function _update_edoweb_installed_instances($updated_instances = null) {

  module_load_install('edoweb');
  $installed_instances = _edoweb_installed_instances();

  // Update all instances by default
  if (is_null($updated_instances)) {
    $updated_instances = array();
    foreach ($installed_instances as $bundle_type => $installed_fields) {
      foreach (array_keys($installed_fields) as $field_name) {
        $updated_instances[$bundle_type][] = $field_name;
      }
    }
  }

  foreach ($updated_instances as $bundle_type => $field_names) {
    foreach ($field_names as $field_name) {
      $field_instance = $installed_instances[$bundle_type][$field_name];
      $field_instance['field_name'] = $field_name;
      $field_instance['entity_type'] = 'edoweb_basic';
      $field_instance['bundle'] = $bundle_type;
      $defaults = _edoweb_field_instance_defaults($field_name);
      $field_instance += $defaults;
      $widget_weight = array_search(
        $field_name, array_keys($installed_instances[$bundle_type])
      );
      //
      if (FALSE !== $widget_weight) {
        $field_instance['widget']['weight'] = $widget_weight;
        unset($field_instance['display']);
        foreach (_edoweb_viewmodes_for($field_name) as $view_mode) {
          $field_instance['display'][$view_mode]['weight'] = $widget_weight;
          drupal_set_message("Setting widget weight for $field_name in bundle $bundle_type to $widget_weight for $view_mode");
        }
      }
      $installed_instance = field_info_instance(
        EDOWEB_ENTITY_TYPE, $field_name, $bundle_type
      );
      if (is_null($installed_instance)) {
        field_create_instance($field_instance);
        drupal_set_message(
          "Created instance for field $field_name in bundle $bundle_type."
        );
      } else {
        field_update_instance($field_instance);
        drupal_set_message(
          "Updated instance for field $field_name in bundle $bundle_type."
        );
      }
    }
  }

}

function _update_edoweb_js_permissions() {

  module_load_install('edoweb');

  $entity_info = entity_get_info(EDOWEB_ENTITY_TYPE);
  $permissions = array();
  foreach (array_keys($entity_info['bundles']) as $bundle_type) {
    $permissions[] = EDOWEB_ENTITY_TYPE . " entity js read $bundle_type";
  }

  $installed_permissions = _edoweb_installed_permissions();
  $role_ids = array(DRUPAL_ANONYMOUS_RID, DRUPAL_AUTHENTICATED_RID);
  foreach (array_keys($installed_permissions) as $role_name) {
    $role = user_role_load_by_name($role_name);
    $role_ids[] = $role->rid;
  }

  foreach ($role_ids as $role_id) {
    user_role_grant_permissions($role_id, $permissions);
  }

}

function _update_rdf_mapping($updated_mappings = null) {

  module_load_install('edoweb');
  $installed_fields = _edoweb_installed_fields();

  // Update mappings for all fields by default
  if (is_null($updated_mappings)) {
    $updated_mappings = array_keys($installed_fields);
  }

  // Add RDF type
  $updated_mappings[] = 'rdftype';

  $rdf_mappings = edoweb_rdf_mapping();
  foreach ($rdf_mappings as $rdf_mapping) {
    foreach (array_keys($rdf_mapping['mapping']) as $field_name) {
      if (!in_array($field_name, $updated_mappings)) {
        unset($rdf_mapping['mapping'][$field_name]);
      }
    }
    rdf_mapping_save($rdf_mapping);
    drupal_set_message(
      'Updated RDF mappings for '
      . implode(', ', array_keys($rdf_mapping['mapping']))
    );
  }

}

/**
 * Fix RDF mapping of field_edoweb_urn
 */
function edoweb_update_7100() {
  $rdf_mapping = array(
    'type' => EDOWEB_ENTITY_TYPE,
    'bundle' => RDF_DEFAULT_BUNDLE,
    'mapping' => array(
      'field_edoweb_urn' => array(
        'predicates' => array('orca:hasURN'),
      ),
    ),
  );
  rdf_mapping_save($rdf_mapping);
}

/**
 * Update definitions of linked data fields
 */
function edoweb_update_7101() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_parallel',
  );
  module_load_install('edoweb');
  $field_definitions = _edoweb_installed_fields();
  foreach ($updated_fields as $updated_field) {
    $field_definition = array();
    $field_definition['settings']['label_properties'] =
      $field_definitions[$updated_field]['settings']['label_properties'];
    $field_definition['field_name'] = $updated_field;
    field_update_field($field_definition);
  }
}

/**
 * Add URN field instances to volume, issue, article and file bundles
 */
function edoweb_update_7102() {
  $added_instances = array(
    'volume' => array('field_edoweb_urn'),
    'issue' => array('field_edoweb_urn'),
    'article' => array('field_edoweb_urn'),
    'file' => array('field_edoweb_urn'),
  );
  _update_edoweb_installed_instances($added_instances);
}

/**
 * Remove superfluous fields
 */
function edoweb_update_7103() {
  field_delete_field('field_edoweb_creator_new');
  field_delete_field('field_edoweb_contributor_new');
  field_delete_field('field_edoweb_identifier');
  field_purge_batch(10);
}

/**
 * Add user id column
 */
function edoweb_update_7104() {
  $uid_column = array(
    'description' => 'The {users}.uid that created this entity.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
  );
  db_add_field('edoweb_basic', 'uid', $uid_column);
}

/**
 * Update fields, field instances and RDF mappings
 */
function edoweb_update_7105() {
  cache_clear_all('field:edoweb_basic:*', 'cache_field', TRUE);
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
  _update_rdf_mapping();
}

/**
 * Update RDF mapping for field_gnd_name
 */
function edoweb_update_7106() {
  _update_edoweb_installed_fields(
    array('field_gnd_name')
  );
  _update_edoweb_installed_instances(
    array('subject' => array('field_gnd_name'))
  );
  _update_rdf_mapping();
}

/**
 * Update field definitions
 */
function edoweb_update_7107() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
    'field_edoweb_parallel',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Update RDF mappings, add fields for alternative and short title
 */
function edoweb_update_7108() {
  _update_edoweb_installed_fields();
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_title_alternative',
      'field_edoweb_title_short',
    ),
    'journal' => array(
      'field_edoweb_title_alternative',
      'field_edoweb_title_short',
    ),
    'corporate_body' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Configure inverse fields
 */
function edoweb_update_7109() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Configure field groups
 */
function edoweb_update_7110() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_subject',
    'field_edoweb_parallel',
    'field_edoweb_parent',
  );
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Add extensive list of MARC relator fields
 */
function edoweb_update_7111() {
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
  _update_rdf_mapping();
}

/**
 * Update title fields to text_long, apply field weights
 */
function edoweb_update_7112() {
  _update_edoweb_installed_fields();
  _update_edoweb_installed_instances();
}

/**
 * Ungroup parent, parallel and subject fields
 */
function edoweb_update_7113() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_parallel',
    'field_edoweb_subject',
  );
  foreach ($updated_fields as $updated_field) {
    $field_info = field_info_field($updated_field);
    $field_info['settings']['field_group'] = null;
    field_update_field($field_info);
  }
}

/**
 * Update field and instance definitions:
 * - use name parameter for lobid lookups
 * - delete SKOS-specific fields
 */
function edoweb_update_7114() {
  field_delete_field('field_skos_pref_label');
  field_delete_field('field_skos_notation');
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_editor',
    'field_edoweb_edt',
    'field_edoweb_translator',
    'field_edoweb_ill',
    'field_edoweb_act',
    'field_edoweb_drt',
    'field_edoweb_clb',
    'field_edoweb_pht',
    'field_edoweb_cnd',
    'field_edoweb_cmp',
    'field_edoweb_aui',
    'field_edoweb_aus',
    'field_edoweb_col',
    'field_edoweb_ctb',
    'field_edoweb_prf',
    'field_edoweb_cng',
    'field_edoweb_ant',
    'field_edoweb_voc',
    'field_edoweb_ivr',
    'field_edoweb_ive',
    'field_edoweb_ctg',
    'field_edoweb_mus',
    'field_edoweb_aft',
    'field_edoweb_pro',
    'field_edoweb_egr',
    'field_edoweb_dte',
    'field_edoweb_subject',
    'field_edoweb_parallel',
    'field_gnd_profession',
    'field_gnd_name',
    'field_gnd_identifier',
  );
  $updated_instances = array(
    'person' => array(
      'field_gnd_profession',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Update RDF mappings, set read-only fields
 */
function edoweb_update_7115() {
  $updated_fields = array(
    'field_edoweb_urn',
    'field_edoweb_identifier_ht',
    'field_edoweb_identifier_zdb',
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_rdf_mapping();
}

/**
 * Add free-text tag field
 */
function edoweb_update_7116() {
  $updated_fields = array(
    'field_edoweb_tag',
  );
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_tag',
    ),
    'journal' => array(
      'field_edoweb_tag',
    ),
    'article' => array(
      'field_edoweb_tag',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Set subject endpoint for all GND lookups
 */
function edoweb_update_7117() {
  $updated_fields = array(
    'field_edoweb_creator',
    'field_edoweb_contributor',
    'field_edoweb_editor',
    'field_edoweb_edt',
    'field_edoweb_translator',
    'field_edoweb_ill',
    'field_edoweb_act',
    'field_edoweb_drt',
    'field_edoweb_clb',
    'field_edoweb_pht',
    'field_edoweb_cnd',
    'field_edoweb_cmp',
    'field_edoweb_aui',
    'field_edoweb_aus',
    'field_edoweb_col',
    'field_edoweb_ctb',
    'field_edoweb_prf',
    'field_edoweb_cng',
    'field_edoweb_ant',
    'field_edoweb_voc',
    'field_edoweb_ivr',
    'field_edoweb_ive',
    'field_edoweb_ctg',
    'field_edoweb_mus',
    'field_edoweb_aft',
    'field_edoweb_pro',
    'field_edoweb_egr',
    'field_edoweb_dte',
  );

  _update_edoweb_installed_fields($updated_fields);
  _update_rdf_mapping();
}

/**
 * Remove add and import actions from menu
 */
function edoweb_update_7118() {
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Add bundles for event, family, event, work, place and collection
 */
function edoweb_update_7119() {
  cache_clear_all('field:edoweb_basic:*', 'cache_field', TRUE);
  $updated_fields = array('field_edoweb_subject');
  $updated_instances = array(
    'event' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'family' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'work' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'place' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'collection' => array(
      'field_edoweb_label',
      'field_edoweb_description',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Move field_edoweb_parent field to last position
 */
function edoweb_update_7120() {
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_parent',
    ),
    'journal' => array(
      'field_edoweb_parent',
    ),
    'file' => array(
      'field_edoweb_filesize',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Add generic bundle for authority resources, add fields for date of
 * establishment & termination
 */
function edoweb_update_7121() {
  $updated_fields = array(
    'field_gnd_date_of_establishment',
    'field_gnd_date_of_termination',
  );
  $updated_instances = array(
    'collection' => array(
      'field_edoweb_title',
      'field_edoweb_identifier_ht',
    ),
    'authority_resource' => array(
      'field_gnd_name',
      'field_gnd_identifier',
    ),
    'subject' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'corporate_body' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'event' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'work' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
    'place' => array(
      'field_gnd_date_of_establishment',
      'field_gnd_date_of_termination',
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
  cache_clear_all('*', 'cache_field', TRUE);
  db_truncate('edoweb_basic')->execute();
  drupal_set_message('Entity caches cleared');
}

/**
 * Configure fieldset rows
 */
function edoweb_update_7122() {
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_title',
      'field_edoweb_title_other',
      'field_edoweb_title_alternative',
    ),
    'journal' => array(
      'field_edoweb_title',
      'field_edoweb_title_other',
      'field_edoweb_title_alternative',
    ),
    'issue' => array(
      'field_edoweb_title',
    ),
    'article' => array(
      'field_edoweb_title',
      'field_edoweb_title_other',
    ),
    'file' => array(
      'field_edoweb_title',
    ),
    'collection' => array(
      'field_edoweb_title',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
}

/**
 * Fix field weights for view mode
 */
function edoweb_update_7123() {
  edoweb_update_7122();
}

/**
 * Add field_edoweb_struct_child for file in article bundle
 */
function edoweb_update_7124() {
  $updated_instances = array(
    'article' => array(
      'field_edoweb_struct_child',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
}

/**
 * Add field_edoweb_title to volume bundle, make title mandatory for all
 * bundles
 */
function edoweb_update_7125() {
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_title',
    ),
    'journal' => array(
      'field_edoweb_title',
    ),
    'volume' => array(
      'field_edoweb_title',
    ),
    'issue' => array(
      'field_edoweb_title',
    ),
    'article' => array(
      'field_edoweb_title',
    ),
    'file' => array(
      'field_edoweb_title',
    ),
    'collection' => array(
      'field_edoweb_title',
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Rebuild menu
 */
function edoweb_update_7126() {
  menu_rebuild();
}

/**
 * Rebuild menu
 */
function edoweb_update_7127() {
  menu_rebuild();
}

/**
 * Rebuild menu
 */
function edoweb_update_7128() {
  menu_rebuild();
}

/**
 * Update RDF mapping for monographs
 */
function edoweb_update_7129() {
  $updated_fields = array(
    'field_edoweb_parent',
    'field_edoweb_parallel',
  );
  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_parent',
      'field_edoweb_parallel'
    ),
    'journal' => array(
      'field_edoweb_parent',
      'field_edoweb_parallel'
    ),
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

/**
 * Rebuild menu
 */
function edoweb_update_7130() {
  menu_rebuild();
}

/**
 * Add columns for access rights
 */
function edoweb_update_7131() {
  $new_fields = array('access_md', 'access_data');
  module_load_install('edoweb');
  if (function_exists('edoweb_schema')) {
    $schema = edoweb_schema();
    foreach ($new_fields as $new_field) {
      $column = $schema[EDOWEB_ENTITY_TYPE]['fields'][$new_field];
      db_add_field(EDOWEB_ENTITY_TYPE, $new_field, $column);
    }
  }
  menu_rebuild();
}

/**
 * Add edoweb_backend_reader role and permissions
 */
function edoweb_update_7132() {
  module_load_install('edoweb');
  $permissions = _edoweb_installed_permissions();
  $role = new stdClass();
  $role->name = 'edoweb_backend_reader';
  user_role_save($role);
  user_role_grant_permissions($role->rid, $permissions[$role->name]);
}

/**
 * Drop the entity table
 */
function edoweb_update_7133() {
  db_drop_table('edoweb_basic');
  menu_rebuild();
}

/**
 * Rebuild menu
 */
function edoweb_update_7134() {
  menu_rebuild();
}

/**
 * Regenerate list of available languages
 */
function edoweb_update_7135() {
  module_load_install('edoweb');
  _edoweb_generate_available_languages(
    dirname(__FILE__) . '/iso639-2.nt',
    drupal_realpath(file_default_scheme() . '://') .  '/available_languages.inc'
  );
}

/**
 * Set default fields for JS forms
 */
function edoweb_update_7136() {
  $updated_instances = array(
    'file' => array('field_edoweb_datastream'),
    'monograph' => array('field_edoweb_creator', 'field_edoweb_issued'),
    'journal' => array('field_edoweb_creator'),
    'article' => array('field_edoweb_creator', 'field_edoweb_issued'),
    'volume' => array('field_edoweb_issued'),
    'issue' => array('field_edoweb_issued'),
    'person' => array('field_gnd_name'),
    'subject' => array('field_gnd_name'),
    'corporate_body' => array('field_gnd_name'),
    'event' => array('field_gnd_name'),
    'family' => array('field_gnd_name'),
    'work' => array('field_gnd_name'),
    'place' => array('field_gnd_name'),
    'authority_resource' => array('field_gnd_name'),
  );
  _update_edoweb_installed_instances($updated_instances);
}

/**
 * Set subject field to writeable
 */
function edoweb_update_7137() {
  $updated_fields = array('field_edoweb_subject');
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Remove field_edoweb_is_like, map umbel:isLike to
 * field_edoweb_parallel
 */
function edoweb_update_7138() {
  field_delete_field('field_edoweb_is_like');
  _update_edoweb_installed_fields(array('field_edoweb_parallel'));
  _update_rdf_mapping();
}

/**
 * Update field instances, removing descriptions and updating labels
 */
function edoweb_update_7139() {
  _update_edoweb_installed_instances();
}

/**
 * Update route permissions
 */
function edoweb_update_7140() {
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Update permissions for JS access
 */
function edoweb_update_7141() {
  _update_edoweb_js_permissions();
}

/**
 * Clear entity info cache
 */
function edoweb_update_7142() {
  entity_info_cache_clear();
}

/**
 * Add fields for lv:subjectChain, holding:collectedBy and foaf:isPrimaryTopicOf
 */
function edoweb_update_7143() {
  $added_fields = array(
    'field_edoweb_subject_chain',
    'field_edoweb_collected_by',
    'field_edoweb_catalog_link',
  );
  $added_instances = array(
    'monograph' => array(
      'field_edoweb_subject_chain',
      'field_edoweb_collected_by',
      'field_edoweb_catalog_link',
    ),
    'journal' => array(
      'field_edoweb_subject_chain',
      'field_edoweb_collected_by',
      'field_edoweb_catalog_link',
    ),
    'article' => array(
      'field_edoweb_subject_chain',
    ),
  );
  _update_edoweb_installed_fields($added_fields);
  _update_edoweb_installed_instances($added_instances);
  _update_rdf_mapping();
  entity_info_cache_clear();
}

/**
 * Add field instances for webpage and version bundles, update RDF mapping of field_edoweb_parallel
 */
function edoweb_update_7144() {

  entity_info_cache_clear();
  module_load_install('edoweb');

  $updated_fields = array(
    'field_edoweb_parallel',
    'field_edoweb_webpage_archived',
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_rdf_mapping();

  $available_instances = _edoweb_installed_instances();
  $added_instances = array(
    'webpage' => array_keys($available_instances['webpage']),
    'version' => array_keys($available_instances['version']),
  );
  _update_edoweb_installed_instances($added_instances);

}

/**
 * Add field and instance for field_edoweb_webpage_archived
 */
function edoweb_update_7145() {

  $added_fields = array('field_edoweb_webpage_archived');
  $added_instances = array(
    'webpage' => array('field_edoweb_webpage_archived')
  );
  _update_edoweb_installed_fields($added_fields);
  _update_edoweb_installed_instances($added_instances);
  _update_rdf_mapping();

}

/**
 * Remove field_edoweb_webpage_archived and field_edoweb_catalog_link instances.
 */
function edoweb_update_7146() {
  $deleted_instances = array(
    'monograph' => array(
      'field_edoweb_catalog_link',
    ),
    'journal' => array(
      'field_edoweb_catalog_link',
    ),
    'webpage' => array(
      'field_edoweb_catalog_link',
      'field_edoweb_webpage_archived',
    ),
  );
  foreach ($deleted_instances as $bundle => $field_names) {
    foreach ($field_names as $field_name) {
      if ($instance = field_info_instance(EDOWEB_ENTITY_TYPE, $field_name, $bundle)) {
        field_delete_instance($instance, FALSE);
        drupal_set_message("Deleted $field_name in $bundle bundle.");
      }
    }
  }
}

/**
 * Update field titel
 */
function edoweb_update_7147() {
  $updated_instances = array(
    'monograph' => array('field_edoweb_title_other'),
    'journal' => array('field_edoweb_title_other'),
    'article' => array('field_edoweb_title_other'),
    'webpage' => array('field_edoweb_title_other')
  );
  _update_edoweb_installed_instances($updated_instances);
}

/**
 * Update view mode settings for all fields
 */
function edoweb_update_7148() {
  entity_info_cache_clear();
  _update_edoweb_installed_instances();
}

/**
 * Add edoweb_backend_subscriber and edoweb_backend_remote roles and permissions
 */
function edoweb_update_7149() {
  module_load_install('edoweb');
  $permissions = _edoweb_installed_permissions();
  $subscriber_role = new stdClass();
  $subscriber_role->name = 'edoweb_backend_subscriber';
  user_role_save($subscriber_role);
  user_role_grant_permissions($subscriber_role->rid, $permissions[$subscriber_role->name]);
  $remote_role = new stdClass();
  $remote_role->name = 'edoweb_backend_remote';
  user_role_save($remote_role);
  user_role_grant_permissions($remote_role->rid, $permissions[$remote_role->name]);
}

/**
 * Remove filesize and filetype from file compact view mode
 */
function edoweb_update_7150() {
  $updated_instances = array(
    'file' => array('field_edoweb_filesize', 'field_edoweb_filetype')
  );
  _update_edoweb_installed_instances($updated_instances);
}

/**
 * Map lv:ArchivedWebPage to monograph bundle
 */
function edoweb_update_7151() {
  _update_rdf_mapping();
}

/**
 * Update metadata type of field_edoweb_datastream
 */
function edoweb_update_7152() {
  $updated_fields = array('field_edoweb_datastream');
  _update_edoweb_installed_fields($updated_fields);
}

/**
 * Remove mapping from lv:ArchivedWebPage to monograph bundle
 */
function edoweb_update_7153() {
  _update_rdf_mapping();
}

/**
 * Add fields to generic bundle
 */
function edoweb_update_7154() {
  module_load_install('edoweb');
  $available_instances = _edoweb_installed_instances();
  $added_instances = array(
    'generic' => array_keys($available_instances['generic']),
  );
  _update_edoweb_installed_instances($added_instances);
  _update_rdf_mapping();
  entity_info_cache_clear();
}

/**
 * Update field_edoweb_doi mapping
 */
function edoweb_update_7155() {
  $updated_fields = array(
    'field_edoweb_doi',
    'field_edoweb_urn',
  );
  $updated_instances = array(
    'file' => array('field_edoweb_doi'),
    'version' => array('field_edoweb_doi')
  );
  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
}

function edoweb_update_7156() {
  module_load_install('edoweb');
  $available_instances = _edoweb_installed_instances();
  $updated_instances_fields = array(
    'field_edoweb_struct_child',
    'field_edoweb_struct_parent'
  );
  $updated_instances = array(
    'part' => array_keys($available_instances['part']),
    'monograph' => array(
      'field_edoweb_struct_child',
    ),
    'journal' => array(
      'field_edoweb_struct_child',
    ),
    'volume' => array(
      'field_edoweb_struct_child',
      'field_edoweb_struct_parent'
    ),
    'issue' => array(
      'field_edoweb_struct_child',
      'field_edoweb_struct_parent'
    ),
    'article' => array(
      'field_edoweb_struct_child',
      'field_edoweb_struct_parent'
    ),
    'file' => array(
      'field_edoweb_struct_parent'
    ),
  );
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();
  entity_info_cache_clear();
}

/**
 * Add fields for type, medium and institution to monograph and journal bundles.
 */
function edoweb_update_7160() {
  $added_fields = array(
    'field_edoweb_type',
    'field_edoweb_medium',
    'field_edoweb_institution'
  );
  $added_instances = array(
    'monograph' => array(
      'field_edoweb_type',
      'field_edoweb_medium',
      'field_edoweb_institution'
    ),
    'journal' => array(
      'field_edoweb_type',
      'field_edoweb_medium',
      'field_edoweb_institution'
    ),
  );  
  _update_edoweb_installed_fields($added_fields);
  _update_edoweb_installed_instances($added_instances);
  _update_rdf_mapping();
}
    
/**
 * Add thesis information field.
 */
function edoweb_update_7158() {

  $added_fields = array('field_edoweb_thesis_information');
  $added_instances = array(
    'monograph' => array('field_edoweb_thesis_information'),
  );
  _update_edoweb_installed_fields($added_fields);
  _update_edoweb_installed_instances($added_instances);
  _update_rdf_mapping();
}

/**
 * Add text fields for dce:creator and dce:contributor
 */
 function edoweb_update_7159() {

  $added_fields = array(
    'field_edoweb_creator_label',
    'field_edoweb_contributor_label',
  );
  $added_instances = array(
    'monograph' => array(
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'journal' => array(
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'webpage' => array(
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'article' => array(
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'generic' => array(
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
  );
  _update_edoweb_installed_fields($added_fields);
  _update_edoweb_installed_instances($added_instances);
  _update_rdf_mapping();

}

/**
 * Add field for marcrel:red
 */
function edoweb_update_7166() {

  $added_fields = array(
    'field_edoweb_red',
  );

  $updated_instances = array(
    'monograph' => array('field_edoweb_red'),
    'journal' => array('field_edoweb_red'),
    'webpage' => array('field_edoweb_red'),
    'generic' => array('field_edoweb_red'),
  );

  _update_edoweb_installed_fields($added_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();

}

/**
 * Add field for regal:isPartOf
 */
function edoweb_update_7165() {

  $added_fields = array(
    'field_edoweb_source',
  );
  $added_instances = array(
    'monograph' => array(
      'field_edoweb_source',
    ),
    'journal' => array(
      'field_edoweb_source',
    ),
    'webpage' => array(
      'field_edoweb_source',
    ),
    'generic' => array(
      'field_edoweb_source',
    ),
  );
  _update_edoweb_installed_fields($added_fields);
  _update_edoweb_installed_instances($added_instances);
  _update_rdf_mapping();

}

/**
 * Set weight for dce:creator and dce:contributor
 */
function edoweb_update_7161() {

  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_creator',
      'field_edoweb_contributor',
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'journal' => array(
      'field_edoweb_creator',
      'field_edoweb_contributor',
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'webpage' => array(
      'field_edoweb_creator',
      'field_edoweb_contributor',
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'article' => array(
      'field_edoweb_creator',
      'field_edoweb_contributor',
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
    'generic' => array(
      'field_edoweb_creator',
      'field_edoweb_contributor',
      'field_edoweb_creator_label',
      'field_edoweb_contributor_label',
    ),
  );

  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();

}

/**
 * Set type, medium and description as linked data fields
 */
function edoweb_update_7167() {

  $updated_fields = array(
    'field_edoweb_description',
    'field_edoweb_type',
    'field_edoweb_medium'
  );

  $updated_instances = array(
    'monograph' => array(
      'field_edoweb_type',
      'field_edoweb_medium',
      'field_edoweb_description',
    ),
    'journal' => array(
      'field_edoweb_type',
      'field_edoweb_medium',
      'field_edoweb_description',
    ),
    'volume' => array(
      'field_edoweb_description',
    ),
    'issue' => array(
      'field_edoweb_description',
    ),
    'article' => array(
      'field_edoweb_description',
    ),
    'webpage' => array(
      'field_edoweb_description',
    ),
    'collection' => array(
      'field_edoweb_description',
    ),
    'generic' => array(
      'field_edoweb_description',
      'field_edoweb_type',
      'field_edoweb_medium',
    ),
  );

  _update_edoweb_installed_fields($updated_fields);
  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();

}

/**
 * Add HT-Number to bundles
 */
function edoweb_update_7168() {

  $updated_instances = array(
    'volume' => array(
      'field_edoweb_identifier_ht',
    ),
    'issue' => array(
      'field_edoweb_identifier_ht',
    ),
    'article' => array(
      'field_edoweb_identifier_ht',
    ),
    'version' => array(
      'field_edoweb_identifier_ht',
    ),
    'part' => array(
      'field_edoweb_identifier_ht',
    ),
  );

  _update_edoweb_installed_instances($updated_instances);
  _update_rdf_mapping();

}

